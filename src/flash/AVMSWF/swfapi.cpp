#include "StdAfxflash.h"
#include "splayer.h"
#include "avmplus.h"
#include "ShellCore.h"
#include "AS3ColorTransform.h"
#include "AS3Point.h"
#include "AS3Rectangle.h"
#include "AS3Matrix.h"
#include "AS3Event.h"
#include "AS3ApplicationDomain.h"
#include "AS3SecurityDomain.h"
#include "AS3ByteArray.h"
#include "AS3ContextMenuBuiltInItems.h"
#include "AS3AccessibilityProperties.h"
#include "AS3Endian.h"
#include "AS3Transform.h"
#include "AS3EventDispatcher.h"
#include "AS3URLRequest.h"
#include "AS3SoundTransform.h"
#include "AS3Responder.h"
#include "AS3ID3Info.h"
#include "AS3SoundLoaderContext.h"
#include "AS3TextFormat.h"
#include "AS3LoaderContext.h"
#include "AS3BitmapFilter.h"
#include "AS3TextSnapshot.h"
#include "AS3Graphics.h"
#include "AS3Scene.h"
#include "AS3PrintJobOptions.h"
#include "AS3Accessibility.h"
#include "AS3ActionScriptVersion.h"
#include "AS3AntiAliasType.h"
#include "AS3arguments.h"
#include "AS3BitmapDataChannel.h"
#include "AS3BitmapFilterQuality.h"
#include "AS3BitmapFilterType.h"
#include "AS3BlendMode.h"
#include "AS3Capabilities.h"
#include "AS3CapsStyle.h"
#include "AS3CSMSettings.h"
#include "AS3CustomActions.h"
#include "AS3Dictionary.h"
#include "AS3DisplacementMapFilterMode.h"
#include "AS3EventPhase.h"
#include "AS3FileFilter.h"
#include "AS3Font.h"
#include "AS3FontStyle.h"
#include "AS3FontType.h"
#include "AS3FrameLabel.h"
#include "AS3GradientType.h"
#include "AS3GridFitType.h"
#include "AS3IMEConversionMode.h"
#include "AS3InterpolationMethod.h"
#include "AS3JointStyle.h"
#include "AS3Keyboard.h"
#include "AS3KeyLocation.h"
#include "AS3LineScaleMode.h"
#include "AS3Mouse.h"
#include "AS3ObjectEncoding.h"
#include "AS3PixelSnapping.h"
#include "AS3PrintJobOrientation.h"
#include "AS3Proxy.h"
#include "AS3Security.h"
#include "AS3SecurityPanel.h"
#include "AS3SharedObjectFlushStatus.h"
#include "AS3SoundMixer.h"
#include "AS3SpreadMethod.h"
#include "AS3StageAlign.h"
#include "AS3StageDisplayState.h"
#include "AS3StageQuality.h"
#include "AS3StageScaleMode.h"
#include "AS3SWFVersion.h"
#include "AS3System.h"
#include "AS3TextColorType.h"
#include "AS3TextDisplayMode.h"
#include "AS3TextFieldAutoSize.h"
#include "AS3TextFieldType.h"
#include "AS3TextFormatAlign.h"
#include "AS3TextLineMetrics.h"
#include "AS3TextRenderer.h"
#include "AS3URLLoaderDataFormat.h"
#include "AS3URLRequestHeader.h"
#include "AS3URLRequestMethod.h"
#include "AS3URLVariables.h"
#include "AS3XMLNode.h"
#include "AS3XMLNodeType.h"
#include "AS3XMLUI.h"
#include "AS3IllegalOperationError.h"
#include "AS3IOError.h"
#include "AS3MemoryError.h"
#include "AS3ScriptTimeoutError.h"
#include "AS3StackOverflowError.h"
#include "AS3ActivityEvent.h"
#include "AS3ContextMenuEvent.h"
#include "AS3FocusEvent.h"
#include "AS3HTTPStatusEvent.h"
#include "AS3InvalidSWFError.h"
#include "AS3KeyboardEvent.h"
#include "AS3MouseEvent.h"
#include "AS3NetStatusEvent.h"
#include "AS3ProgressEvent.h"
#include "AS3StatusEvent.h"
#include "AS3SyncEvent.h"
#include "AS3TextEvent.h"
#include "AS3TimerEvent.h"
#include "AS3ContextMenu.h"
#include "AS3DisplayObject.h"
#include "AS3IME.h"
#include "AS3NetConnection.h"
#include "AS3SoundChannel.h"
#include "AS3StyleSheet.h"
#include "AS3Microphone.h"
#include "AS3NetStream.h"
#include "AS3Camera.h"
#include "AS3ContextMenuItem.h"
#include "AS3FileReference.h"
#include "AS3FileReferenceList.h"
#include "AS3LoaderInfo.h"
#include "AS3LocalConnection.h"
#include "AS3PrintJob.h"
#include "AS3SharedObject.h"
#include "AS3Socket.h"
#include "AS3Sound.h"
#include "AS3Timer.h"
#include "AS3URLLoader.h"
#include "AS3URLStream.h"
#include "AS3XMLSocket.h"
#include "AS3BlurFilter.h"
#include "AS3BevelFilter.h"
#include "AS3ColorMatrixFilter.h"
#include "AS3ConvolutionFilter.h"
#include "AS3DisplacementMapFilter.h"
#include "AS3DropShadowFilter.h"
#include "AS3GlowFilter.h"
#include "AS3GradientBevelFilter.h"
#include "AS3GradientGlowFilter.h"
#include "AS3XMLDocument.h"
#include "AS3EOFError.h"
#include "AS3FullScreenEvent.h"
#include "AS3DataEvent.h"
#include "AS3ErrorEvent.h"
#include "AS3IMEEvent.h"
#include "AS3InteractiveObject.h"
#include "AS3AVM1Movie.h"
#include "AS3Bitmap.h"
#include "AS3BitmapData.h"
#include "AS3MorphShape.h"
#include "AS3Shape.h"
#include "AS3StaticText.h"
#include "AS3Video.h"
#include "AS3AsyncErrorEvent.h"
#include "AS3IOErrorEvent.h"
#include "AS3SecurityErrorEvent.h"
#include "AS3DisplayObjectContainer.h"
#include "AS3SimpleButton.h"
#include "AS3TextField.h"
#include "AS3Loader.h"
#include "AS3Sprite.h"
#include "AS3Stage.h"
#include "AS3MovieClip.h"
#include "AS3ExternalInterface.h"
///////////////////////////////////////////////////////
#include "AS3Private.h"
//#include "Inc/AIR.h"
#include "AS3AccessibilityImplementation.h"
#include "JavaScript.h"
/////////////////////////////////////////////////////
// specical API
//#include "AS3DeviceBitmapData.h"
//#include "AS3BGLayer.h"
#include "AS3WaveStream.h"
#include "AS3BwExternAPI.h"
#include "AS3WeiXinShareSession.h"
#include "AS3DuoMengSDKInterface.h"
#include "AS3BwPayAPI.h"
#include "BXFile.h"

///////////////////////////////////////////////////
// extend for OPT
//#if (__CORE_VERSION__>=0x02070200)
#include "org/util/zip/Inflater.h"
#include "com/jiuyu/frameworks/utils/HashAlgorithms.h"
//#endif

//new adds
//#include "AS3AccessibilityImplementation.h"
#include "AS3ColorCorrection.h"
#include "AS3ColorCorrectionSupport.h"
#include "AS3FocusDirection.h"
#include "AS3GraphicsBitmapFill.h"
#include "AS3GraphicsEndFill.h"
#include "AS3GraphicsGradientFill.h"
#include "AS3GraphicsPath.h"
#include "AS3GraphicsPathCommand.h"
#include "AS3GraphicsPathWinding.h"
#include "AS3GraphicsShaderFill.h"
#include "AS3GraphicsSolidFill.h"
#include "AS3GraphicsStroke.h"
#include "AS3GraphicsTrianglePath.h"
#include "AS3NativeMenu.h"
#include "AS3NativeMenuItem.h"
#include "AS3NativeWindow.h"
#include "AS3NativeWindowDisplayState.h"
#include "AS3NativeWindowInitOptions.h"
#include "AS3NativeWindowResize.h"
#include "AS3NativeWindowSystemChrome.h"
#include "AS3NativeWindowType.h"
#include "AS3Screen.h"
#include "AS3Shader.h"
#include "AS3ShaderData.h"
#include "AS3ShaderInput.h"
#include "AS3ShaderJob.h"
#include "AS3ShaderParameter.h"
#include "AS3ShaderParameterType.h"
#include "AS3ShaderPrecision.h" 
#include "AS3StageAspectRatio.h"
#include "AS3StageOrientation.h"
#include "AS3TriangleCulling.h"
#include "AS3DRMManagerError.h" 
#include "AS3SQLError.h"
#include "AS3SQLErrorOperation.h"
#include "AS3AccelerometerEvent.h"
#include "AS3BrowserInvokeEvent.h"
#include "AS3DatagramSocketDataEvent.h"
#include "AS3DNSResolverEvent.h"
#include "AS3DRMAuthenticateEvent.h"
#include "AS3DRMAuthenticationCompleteEvent.h"
#include "AS3DRMAuthenticationErrorEvent.h"
#include "AS3DRMErrorEvent.h"
#include "AS3DRMStatusEvent.h"
#include "AS3FileListEvent.h"
#include "AS3GeolocationEvent.h"
#include "AS3GestureEvent.h"
#include "AS3GesturePhase.h"
#include "AS3HTMLUncaughtScriptExceptionEvent.h"
#include "AS3InvokeEvent.h"
#include "AS3LocationChangeEvent.h"
#include "AS3MediaEvent.h"
#include "AS3NativeDragEvent.h"
#include "AS3NativeProcessExitEvent.h"
#include "AS3NativeWindowBoundsEvent.h"
#include "AS3NativeWindowDisplayStateEvent.h"
#include "AS3NetDataEvent.h"
#include "AS3NetMonitorEvent.h"
#include "AS3OutputProgressEvent.h"
#include "AS3PressAndTapGestureEvent.h"
//#include "AS3SampleDataEvent.h"
#include "AS3ScreenMouseEvent.h"
#include "AS3ServerSocketConnectEvent.h"
#include "AS3ShaderEvent.h"
#include "AS3SoftKeyboardEvent.h"
#include "AS3SoftKeyboardTrigger.h"
#include "AS3SQLErrorEvent.h"
#include "AS3SQLEvent.h"
#include "AS3SQLUpdateEvent.h"
#include "AS3StageOrientationEvent.h"
#include "AS3StageVideoAvailabilityEvent.h"
#include "AS3StageVideoEvent.h"
#include "AS3StorageVolumeChangeEvent.h"
#include "AS3TouchEvent.h"
#include "AS3TransformGestureEvent.h"
#include "AS3UncaughtErrorEvent.h"
#include "AS3UncaughtErrorEvents.h"
#include "AS3VideoEvent.h"
#include "AS3ExtensionContext.h"
#include "AS3ShaderFilter.h"
#include "AS3Matrix3D.h"
#include "AS3Orientation3D.h"
#include "AS3PerspectiveProjection.h"
#include "AS3Utils3D.h"
#include "AS3Vector3D.h"
#include "AS3CameraRoll.h"
#include "AS3CameraUI.h"
#include "AS3MediaPromise.h"
#include "AS3MediaType.h"
#include "AS3MicrophoneEnhancedMode.h"
#include "AS3MicrophoneEnhancedOptions.h"
#include "AS3SoundCodec.h"
#include "AS3StageVideo.h"
#include "AS3StageVideoAvailability.h"
#include "AS3StageWebView.h"
#include "AS3VideoStatus.h"
#include "AS3DatagramSocket.h"
#include "AS3GroupSpecifier.h"
#include "AS3InterfaceAddress.h"
#include "AS3IPVersion.h"
#include "AS3NetGroup.h"
#include "AS3NetGroupInfo.h"
#include "AS3NetGroupReceiveMode.h"
#include "AS3NetGroupReplicationStrategy.h"
#include "AS3NetGroupSendMode.h"
#include "AS3NetGroupSendResult.h"
#include "AS3NetMonitor.h"
//#include "AS3NetStream.h"
#include "AS3NetStreamAppendBytesAction.h"
#include "AS3NetStreamInfo.h"
#include "AS3NetStreamMulticastInfo.h"
#include "AS3NetStreamPlayOptions.h"
#include "AS3NetStreamPlayTransitions.h"
#include "AS3NetworkInfo.h"
#include "AS3NetworkInterface.h"
#include "AS3SecureSocket.h"
#include "AS3ServerSocket.h"
#include "AS3URLRequestDefaults.h"
#include "AS3PaperSize.h"
#include "AS3PrintMethod.h"
#include "AS3PrintUIOptions.h"
#include "AS3ImageDecodingPolicy.h"
#include "AS3JPEGLoaderContext.h"
#include "AS3SystemUpdater.h"
#include "AS3SystemUpdaterType.h"
#include "AS3TouchscreenType.h"
#include "AS3TextExtent.h"
#include "AS3TextInteractionMode.h"
#include "AS3ContextMenuClipboardItems.h"
#include "AS3KeyboardType.h"
#include "AS3MouseCursor.h"
#include "AS3MouseCursorData.h"
#include "AS3Multitouch.h"
#include "AS3MultitouchInputMode.h"
#include "AS3CompressionAlgorithm.h"
#include "AS3Clipboard.h"
#include "AS3ClipboardFormats.h"
#include "AS3ClipboardTransferMode.h"
#include "AS3DockIcon.h"
#include "AS3Icon.h"
#include "AS3InteractiveIcon.h"
#include "AS3InvokeEventReason.h"
#include "AS3NativeApplication.h"
#include "AS3NativeDragActions.h"
#include "AS3NativeDragManager.h"
#include "AS3NativeDragOptions.h"
#include "AS3NativeProcess.h"
#include "AS3NativeProcessStartupInfo.h"
#include "AS3NotificationType.h"
#include "AS3SystemIdleMode.h"
#include "AS3SystemTrayIcon.h"
#include "AS3Updater.h"
#include "AS3File.h"
#include "AS3FileMode.h"
#include "AS3FileStream.h"
#include "AS3StorageVolume.h"
#include "AS3StorageVolumeInfo.h"
#include "AS3Collator.h"
#include "AS3CollatorMode.h"
#include "AS3CurrencyFormatter.h"
#include "AS3CurrencyParseResult.h"
#include "AS3DateTimeFormatter.h"
#include "AS3DateTimeNameContext.h"
#include "AS3DateTimeNameStyle.h"
#include "AS3DateTimeStyle.h"
#include "AS3LastOperationStatus.h"
#include "AS3LocaleID.h"
#include "AS3NationalDigitsType.h"
#include "AS3NumberFormatter.h"
#include "AS3NumberParseResult.h"
#include "AS3StringTools.h"
#include "AS3AuthenticationMethod.h"
#include "AS3DRMContentData.h"
#include "AS3DRMManager.h"
#include "AS3DRMPlaybackTimeWindow.h"
#include "AS3DRMVoucher.h"
#include "AS3LoadVoucherSetting.h"
#include "AS3VoucherAccessInfo.h"
#include "AS3DeleteObjectSample.h"
#include "AS3NewObjectSample.h"
#include "AS3Sample.h"
#include "AS3StackFrame.h"
#include "AS3Accelerometer.h"
#include "AS3Geolocation.h"
#include "AS3BreakOpportunity.h"
#include "AS3CFFHinting.h"
#include "AS3ContentElement.h"
#include "AS3DigitCase.h"
#include "AS3DigitWidth.h"
#include "AS3EastAsianJustifier.h"
#include "AS3ElementFormat.h"
#include "AS3FontDescription.h"
#include "AS3FontLookup.h"
#include "AS3FontMetrics.h"
#include "AS3FontPosture.h"
#include "AS3FontWeight.h"
#include "AS3GraphicElement.h"
#include "AS3GroupElement.h"
#include "AS3JustificationStyle.h"
#include "AS3Kerning.h"
#include "AS3LigatureLevel.h"
#include "AS3LineJustification.h"
#include "AS3RenderingMode.h"
#include "AS3SpaceJustifier.h"
#include "AS3TabAlignment.h"
#include "AS3TabStop.h"
#include "AS3TextBaseline.h"
#include "AS3TextBlock.h"
#include "AS3TextElement.h"
#include "AS3TextJustifier.h"
#include "AS3TextLine.h"
#include "AS3TextLineCreationResult.h"
#include "AS3TextLineMirrorRegion.h"
#include "AS3TextLineValidity.h"
#include "AS3TextRotation.h"
#include "AS3TypographicCase.h"
#include "AS3CompositionAttributeRange.h"
#include "AS3CertificateStatus.h"
#include "AS3ReferencesValidationSetting.h"
#include "AS3RevocationCheckSettings.h"
#include "AS3SignatureStatus.h"
#include "AS3SignerTrustSettings.h"
#include "AS3XMLSignatureValidator.h"
#include "AS3HTMLHistoryItem.h"
#include "AS3HTMLHost.h"
#include "AS3HTMLLoader.h"
#include "AS3HTMLPDFCapability.h"
#include "AS3HTMLSWFCapability.h"
#include "AS3HTMLWindowCreateOptions.h"
#include "AS3AAAARecord.h"
#include "AS3ARecord.h"
#include "AS3DNSResolver.h"
#include "AS3MXRecord.h"
#include "AS3PTRRecord.h"
#include "AS3ResourceRecord.h"
#include "AS3SRVRecord.h"
#include "AS3EncryptedLocalStore.h"
#include "AS3SQLCollationType.h"
#include "AS3SQLColumnNameStyle.h"
#include "AS3SQLColumnSchema.h"
#include "AS3SQLConnection.h"
#include "AS3SQLIndexSchema.h"
#include "AS3SQLMode.h"
#include "AS3SQLResult.h"
#include "AS3SQLSchema.h"
#include "AS3SQLSchemaResult.h"
#include "AS3SQLStatement.h"
#include "AS3SQLTableSchema.h"
#include "AS3SQLTransactionLockType.h"
#include "AS3SQLTriggerSchema.h"
#include "AS3SQLViewSchema.h"

#include "AS3X500DistinguishedName.h"
#include "AS3X509Certificate.h"
#include "AS3DRMVoucherStoreContext.h"
#include "AS3DRMManagerSession.h"
//new adds end

//new adds 11
//#include "AS3BitmapEncodingColorSpace.h"
#include "AS3Stage3D.h"
#include "AS3AVDictionaryDataEvent.h"
#include "AS3DRMDeviceGroupErrorEvent.h"
#include "AS3DRMDeviceGroupEvent.h"
#include "AS3DRMLicenseRequestEvent.h"
#include "AS3DRMMetadataEvent.h"
#include "AS3DRMReturnVoucherCompleteEvent.h"
#include "AS3DRMReturnVoucherErrorEvent.h"
#include "AS3GameInputEvent.h"
#include "AS3RemoteNotificationEvent.h"
#include "AS3ThrottleEvent.h"
#include "AS3AVTagData.h"
#include "AS3CameraRollBrowseOptions.h"
#include "AS3H264VideoStreamSettings.h"
#include "AS3VideoStreamSettings.h"
#include "AS3DRMDeviceGroup.h"
#include "AS3MessageChannel.h"
#include "AS3Worker.h"
#include "AS3WorkerDomain.h"
#include "AS3StageText.h"
#include "AS3StageTextInitOptions.h"
#include "AS3GameInput.h"
#include "AS3GameInputControl.h"
#include "AS3GameInputDevice.h"
#include "AS3JSON.h"
//new adds 11 end

namespace avmplus 
{ 
	namespace NativeID 
	{

#include "AS3/TotalInclude.h"
#include "AS3/TotalInclude.cpp"

using namespace avmshell;
class ShellCore;


class SlotOffsetsAndAsserts
{
private:
	static uint32_t getSlotOffset(Traits* t, int nameId);
public:

	static const uint16_t s_slotsOffsetScriptObject = 0;
	static const uint16_t s_slotsOffsetColorTransformClass = offsetof(::avmshell::ColorTransformClass, m_slots_ColorTransformClass);
	static const uint16_t s_slotsOffsetColorTransformObject = offsetof(::avmshell::ColorTransformObject,m_slots_ColorTransformObject);
	static void doColorTransformClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetExternalInterfaceClass = offsetof(::avmshell::ExternalInterfaceClass, m_slots_ExternalInterfaceClass);
	static const uint16_t s_slotsOffsetExternalInterfaceObject = offsetof(::avmshell::ExternalInterfaceObject,m_slots_ExternalInterfaceObject);
	static void doExternalInterfaceClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetPointClass = offsetof(::avmshell::PointClass, m_slots_PointClass);
	static const uint16_t s_slotsOffsetPointObject = offsetof(::avmshell::PointObject,m_slots_PointObject);
	static void doPointClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetRectangleClass = offsetof(::avmshell::RectangleClass, m_slots_RectangleClass);
	static const uint16_t s_slotsOffsetRectangleObject = offsetof(::avmshell::RectangleObject,m_slots_RectangleObject);
	static void doRectangleClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetMatrixClass = offsetof(::avmshell::MatrixClass, m_slots_MatrixClass);
	static const uint16_t s_slotsOffsetMatrixObject = offsetof(::avmshell::MatrixObject,m_slots_MatrixObject);
	static void doMatrixClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetEventClass = offsetof(::avmshell::EventClass, m_slots_EventClass);
	static const uint16_t s_slotsOffsetEventObject = offsetof(::avmshell::EventObject,m_slots_EventObject);
	static void doEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetBitmapDataClass = offsetof(::avmshell::BitmapDataClass, m_slots_BitmapDataClass);
	static const uint16_t s_slotsOffsetBitmapDataObject = offsetof(::avmshell::BitmapDataObject,m_slots_BitmapDataObject);
	static void doBitmapDataClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetApplicationDomainClass = offsetof(::avmshell::ApplicationDomainClass, m_slots_ApplicationDomainClass);
	static const uint16_t s_slotsOffsetApplicationDomainObject = offsetof(::avmshell::ApplicationDomainObject,m_slots_ApplicationDomainObject);
	static void doApplicationDomainClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSecurityDomainClass = offsetof(::avmshell::SecurityDomainClass, m_slots_SecurityDomainClass);
	static const uint16_t s_slotsOffsetSecurityDomainObject = offsetof(::avmshell::SecurityDomainObject,m_slots_SecurityDomainObject);
	static void doSecurityDomainClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetByteArrayClass = offsetof(::avmshell::ByteArrayClass, m_slots_ByteArrayClass);
	static const uint16_t s_slotsOffsetByteArrayObject = offsetof(::avmshell::ByteArrayObject,m_slots_ByteArrayObject);
	static void doByteArrayClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetContextMenuBuiltInItemsClass = offsetof(::avmshell::ContextMenuBuiltInItemsClass, m_slots_ContextMenuBuiltInItemsClass);
	static const uint16_t s_slotsOffsetContextMenuBuiltInItemsObject = offsetof(::avmshell::ContextMenuBuiltInItemsObject,m_slots_ContextMenuBuiltInItemsObject);
	static void doContextMenuBuiltInItemsClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetAccessibilityPropertiesClass = offsetof(::avmshell::AccessibilityPropertiesClass, m_slots_AccessibilityPropertiesClass);
	static const uint16_t s_slotsOffsetAccessibilityPropertiesObject = offsetof(::avmshell::AccessibilityPropertiesObject,m_slots_AccessibilityPropertiesObject);
	static void doAccessibilityPropertiesClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTransformClass = offsetof(::avmshell::TransformClass, m_slots_TransformClass);
	static const uint16_t s_slotsOffsetTransformObject = offsetof(::avmshell::TransformObject,m_slots_TransformObject);
	static void doTransformClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetEventDispatcherClass = offsetof(::avmshell::EventDispatcherClass, m_slots_EventDispatcherClass);
	static const uint16_t s_slotsOffsetEventDispatcherObject = offsetof(::avmshell::EventDispatcherObject,m_slots_EventDispatcherObject);
	static void doEventDispatcherClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetURLRequestClass = offsetof(::avmshell::URLRequestClass, m_slots_URLRequestClass);
	static const uint16_t s_slotsOffsetURLRequestObject = offsetof(::avmshell::URLRequestObject,m_slots_URLRequestObject);
	static void doURLRequestClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSoundTransformClass = offsetof(::avmshell::SoundTransformClass, m_slots_SoundTransformClass);
	static const uint16_t s_slotsOffsetSoundTransformObject = offsetof(::avmshell::SoundTransformObject,m_slots_SoundTransformObject);
	static void doSoundTransformClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetResponderClass = offsetof(::avmshell::ResponderClass, m_slots_ResponderClass);
	static const uint16_t s_slotsOffsetResponderObject = offsetof(::avmshell::ResponderObject,m_slots_ResponderObject);
	static void doResponderClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetID3InfoClass = offsetof(::avmshell::ID3InfoClass, m_slots_ID3InfoClass);
	static const uint16_t s_slotsOffsetID3InfoObject = offsetof(::avmshell::ID3InfoObject,m_slots_ID3InfoObject);
	static void doID3InfoClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSoundLoaderContextClass = offsetof(::avmshell::SoundLoaderContextClass, m_slots_SoundLoaderContextClass);
	static const uint16_t s_slotsOffsetSoundLoaderContextObject = offsetof(::avmshell::SoundLoaderContextObject,m_slots_SoundLoaderContextObject);
	static void doSoundLoaderContextClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTextFormatClass = offsetof(::avmshell::TextFormatClass, m_slots_TextFormatClass);
	static const uint16_t s_slotsOffsetTextFormatObject = offsetof(::avmshell::TextFormatObject,m_slots_TextFormatObject);
	static void doTextFormatClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetLoaderContextClass = offsetof(::avmshell::LoaderContextClass, m_slots_LoaderContextClass);
	static const uint16_t s_slotsOffsetLoaderContextObject = offsetof(::avmshell::LoaderContextObject,m_slots_LoaderContextObject);
	static void doLoaderContextClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetBitmapFilterClass = offsetof(::avmshell::BitmapFilterClass, m_slots_BitmapFilterClass);
	static const uint16_t s_slotsOffsetBitmapFilterObject = offsetof(::avmshell::BitmapFilterObject,m_slots_BitmapFilterObject);
	static void doBitmapFilterClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTextSnapshotClass = offsetof(::avmshell::TextSnapshotClass, m_slots_TextSnapshotClass);
	static const uint16_t s_slotsOffsetTextSnapshotObject = offsetof(::avmshell::TextSnapshotObject,m_slots_TextSnapshotObject);
	static void doTextSnapshotClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetGraphicsClass = offsetof(::avmshell::GraphicsClass, m_slots_GraphicsClass);
	static const uint16_t s_slotsOffsetGraphicsObject = offsetof(::avmshell::GraphicsObject,m_slots_GraphicsObject);
	static void doGraphicsClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSceneClass = offsetof(::avmshell::SceneClass, m_slots_SceneClass);
	static const uint16_t s_slotsOffsetSceneObject = offsetof(::avmshell::SceneObject,m_slots_SceneObject);
	static void doSceneClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetPrintJobOptionsClass = offsetof(::avmshell::PrintJobOptionsClass, m_slots_PrintJobOptionsClass);
	static const uint16_t s_slotsOffsetPrintJobOptionsObject = offsetof(::avmshell::PrintJobOptionsObject,m_slots_PrintJobOptionsObject);
	static void doPrintJobOptionsClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetAccessibilityClass = offsetof(::avmshell::AccessibilityClass, m_slots_AccessibilityClass);
	static const uint16_t s_slotsOffsetAccessibilityObject = offsetof(::avmshell::AccessibilityObject,m_slots_AccessibilityObject);
	static void doAccessibilityClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetActionScriptVersionClass = offsetof(::avmshell::ActionScriptVersionClass, m_slots_ActionScriptVersionClass);
	static const uint16_t s_slotsOffsetActionScriptVersionObject = offsetof(::avmshell::ActionScriptVersionObject,m_slots_ActionScriptVersionObject);
	static void doActionScriptVersionClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetAntiAliasTypeClass = offsetof(::avmshell::AntiAliasTypeClass, m_slots_AntiAliasTypeClass);
	static const uint16_t s_slotsOffsetAntiAliasTypeObject = offsetof(::avmshell::AntiAliasTypeObject,m_slots_AntiAliasTypeObject);
	static void doAntiAliasTypeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetargumentsClass = offsetof(::avmshell::argumentsClass, m_slots_argumentsClass);
	static const uint16_t s_slotsOffsetargumentsObject = offsetof(::avmshell::argumentsObject,m_slots_argumentsObject);
	static void doargumentsClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetBitmapDataChannelClass = offsetof(::avmshell::BitmapDataChannelClass, m_slots_BitmapDataChannelClass);
	static const uint16_t s_slotsOffsetBitmapDataChannelObject = offsetof(::avmshell::BitmapDataChannelObject,m_slots_BitmapDataChannelObject);
	static void doBitmapDataChannelClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetBitmapFilterQualityClass = offsetof(::avmshell::BitmapFilterQualityClass, m_slots_BitmapFilterQualityClass);
	static const uint16_t s_slotsOffsetBitmapFilterQualityObject = offsetof(::avmshell::BitmapFilterQualityObject,m_slots_BitmapFilterQualityObject);
	static void doBitmapFilterQualityClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetBitmapFilterTypeClass = offsetof(::avmshell::BitmapFilterTypeClass, m_slots_BitmapFilterTypeClass);
	static const uint16_t s_slotsOffsetBitmapFilterTypeObject = offsetof(::avmshell::BitmapFilterTypeObject,m_slots_BitmapFilterTypeObject);
	static void doBitmapFilterTypeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetBlendModeClass = offsetof(::avmshell::BlendModeClass, m_slots_BlendModeClass);
	static const uint16_t s_slotsOffsetBlendModeObject = offsetof(::avmshell::BlendModeObject,m_slots_BlendModeObject);
	static void doBlendModeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetCapabilitiesClass = offsetof(::avmshell::CapabilitiesClass, m_slots_CapabilitiesClass);
	static const uint16_t s_slotsOffsetCapabilitiesObject = offsetof(::avmshell::CapabilitiesObject,m_slots_CapabilitiesObject);
	static void doCapabilitiesClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetCapsStyleClass = offsetof(::avmshell::CapsStyleClass, m_slots_CapsStyleClass);
	static const uint16_t s_slotsOffsetCapsStyleObject = offsetof(::avmshell::CapsStyleObject,m_slots_CapsStyleObject);
	static void doCapsStyleClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetCSMSettingsClass = offsetof(::avmshell::CSMSettingsClass, m_slots_CSMSettingsClass);
	static const uint16_t s_slotsOffsetCSMSettingsObject = offsetof(::avmshell::CSMSettingsObject,m_slots_CSMSettingsObject);
	static void doCSMSettingsClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetCustomActionsClass = offsetof(::avmshell::CustomActionsClass, m_slots_CustomActionsClass);
	static const uint16_t s_slotsOffsetCustomActionsObject = offsetof(::avmshell::CustomActionsObject,m_slots_CustomActionsObject);
	static void doCustomActionsClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDictionaryClass = offsetof(::avmshell::DictionaryClass, m_slots_DictionaryClass);
	static const uint16_t s_slotsOffsetDictionaryObject = offsetof(::avmshell::DictionaryObject,m_slots_DictionaryObject);
	static void doDictionaryClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDisplacementMapFilterModeClass = offsetof(::avmshell::DisplacementMapFilterModeClass, m_slots_DisplacementMapFilterModeClass);
	static const uint16_t s_slotsOffsetDisplacementMapFilterModeObject = offsetof(::avmshell::DisplacementMapFilterModeObject,m_slots_DisplacementMapFilterModeObject);
	static void doDisplacementMapFilterModeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetEndianClass = offsetof(::avmshell::EndianClass, m_slots_EndianClass);
	static const uint16_t s_slotsOffsetEndianObject = offsetof(::avmshell::EndianObject,m_slots_EndianObject);
	static void doEndianClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetEventPhaseClass = offsetof(::avmshell::EventPhaseClass, m_slots_EventPhaseClass);
	static const uint16_t s_slotsOffsetEventPhaseObject = offsetof(::avmshell::EventPhaseObject,m_slots_EventPhaseObject);
	static void doEventPhaseClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetFileFilterClass = offsetof(::avmshell::FileFilterClass, m_slots_FileFilterClass);
	static const uint16_t s_slotsOffsetFileFilterObject = offsetof(::avmshell::FileFilterObject,m_slots_FileFilterObject);
	static void doFileFilterClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetFontClass = offsetof(::avmshell::FontClass, m_slots_FontClass);
	static const uint16_t s_slotsOffsetFontObject = offsetof(::avmshell::FontObject,m_slots_FontObject);
	static void doFontClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetFontStyleClass = offsetof(::avmshell::FontStyleClass, m_slots_FontStyleClass);
	static const uint16_t s_slotsOffsetFontStyleObject = offsetof(::avmshell::FontStyleObject,m_slots_FontStyleObject);
	static void doFontStyleClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetFontTypeClass = offsetof(::avmshell::FontTypeClass, m_slots_FontTypeClass);
	static const uint16_t s_slotsOffsetFontTypeObject = offsetof(::avmshell::FontTypeObject,m_slots_FontTypeObject);
	static void doFontTypeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetFrameLabelClass = offsetof(::avmshell::FrameLabelClass, m_slots_FrameLabelClass);
	static const uint16_t s_slotsOffsetFrameLabelObject = offsetof(::avmshell::FrameLabelObject,m_slots_FrameLabelObject);
	static void doFrameLabelClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetGradientTypeClass = offsetof(::avmshell::GradientTypeClass, m_slots_GradientTypeClass);
	static const uint16_t s_slotsOffsetGradientTypeObject = offsetof(::avmshell::GradientTypeObject,m_slots_GradientTypeObject);
	static void doGradientTypeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetGridFitTypeClass = offsetof(::avmshell::GridFitTypeClass, m_slots_GridFitTypeClass);
	static const uint16_t s_slotsOffsetGridFitTypeObject = offsetof(::avmshell::GridFitTypeObject,m_slots_GridFitTypeObject);
	static void doGridFitTypeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetIMEConversionModeClass = offsetof(::avmshell::IMEConversionModeClass, m_slots_IMEConversionModeClass);
	static const uint16_t s_slotsOffsetIMEConversionModeObject = offsetof(::avmshell::IMEConversionModeObject,m_slots_IMEConversionModeObject);
	static void doIMEConversionModeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetInterpolationMethodClass = offsetof(::avmshell::InterpolationMethodClass, m_slots_InterpolationMethodClass);
	static const uint16_t s_slotsOffsetInterpolationMethodObject = offsetof(::avmshell::InterpolationMethodObject,m_slots_InterpolationMethodObject);
	static void doInterpolationMethodClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetJointStyleClass = offsetof(::avmshell::JointStyleClass, m_slots_JointStyleClass);
	static const uint16_t s_slotsOffsetJointStyleObject = offsetof(::avmshell::JointStyleObject,m_slots_JointStyleObject);
	static void doJointStyleClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetKeyboardClass = offsetof(::avmshell::KeyboardClass, m_slots_KeyboardClass);
	static const uint16_t s_slotsOffsetKeyboardObject = offsetof(::avmshell::KeyboardObject,m_slots_KeyboardObject);
	static void doKeyboardClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetKeyLocationClass = offsetof(::avmshell::KeyLocationClass, m_slots_KeyLocationClass);
	static const uint16_t s_slotsOffsetKeyLocationObject = offsetof(::avmshell::KeyLocationObject,m_slots_KeyLocationObject);
	static void doKeyLocationClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetLineScaleModeClass = offsetof(::avmshell::LineScaleModeClass, m_slots_LineScaleModeClass);
	static const uint16_t s_slotsOffsetLineScaleModeObject = offsetof(::avmshell::LineScaleModeObject,m_slots_LineScaleModeObject);
	static void doLineScaleModeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetMouseClass = offsetof(::avmshell::MouseClass, m_slots_MouseClass);
	static const uint16_t s_slotsOffsetMouseObject = offsetof(::avmshell::MouseObject,m_slots_MouseObject);
	static void doMouseClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetObjectEncodingClass = offsetof(::avmshell::ObjectEncodingClass, m_slots_ObjectEncodingClass);
	static const uint16_t s_slotsOffsetObjectEncodingObject = offsetof(::avmshell::ObjectEncodingObject,m_slots_ObjectEncodingObject);
	static void doObjectEncodingClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetPixelSnappingClass = offsetof(::avmshell::PixelSnappingClass, m_slots_PixelSnappingClass);
	static const uint16_t s_slotsOffsetPixelSnappingObject = offsetof(::avmshell::PixelSnappingObject,m_slots_PixelSnappingObject);
	static void doPixelSnappingClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetPrintJobOrientationClass = offsetof(::avmshell::PrintJobOrientationClass, m_slots_PrintJobOrientationClass);
	static const uint16_t s_slotsOffsetPrintJobOrientationObject = offsetof(::avmshell::PrintJobOrientationObject,m_slots_PrintJobOrientationObject);
	static void doPrintJobOrientationClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetProxyClass = offsetof(::avmshell::ProxyClass, m_slots_ProxyClass);
	static const uint16_t s_slotsOffsetProxyObject = offsetof(::avmshell::ProxyObject,m_slots_ProxyObject);
	static void doProxyClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSecurityClass = offsetof(::avmshell::SecurityClass, m_slots_SecurityClass);
	static const uint16_t s_slotsOffsetSecurityObject = offsetof(::avmshell::SecurityObject,m_slots_SecurityObject);
	static void doSecurityClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSecurityPanelClass = offsetof(::avmshell::SecurityPanelClass, m_slots_SecurityPanelClass);
	static const uint16_t s_slotsOffsetSecurityPanelObject = offsetof(::avmshell::SecurityPanelObject,m_slots_SecurityPanelObject);
	static void doSecurityPanelClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSharedObjectFlushStatusClass = offsetof(::avmshell::SharedObjectFlushStatusClass, m_slots_SharedObjectFlushStatusClass);
	static const uint16_t s_slotsOffsetSharedObjectFlushStatusObject = offsetof(::avmshell::SharedObjectFlushStatusObject,m_slots_SharedObjectFlushStatusObject);
	static void doSharedObjectFlushStatusClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSoundMixerClass = offsetof(::avmshell::SoundMixerClass, m_slots_SoundMixerClass);
	static const uint16_t s_slotsOffsetSoundMixerObject = offsetof(::avmshell::SoundMixerObject,m_slots_SoundMixerObject);
	static void doSoundMixerClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSpreadMethodClass = offsetof(::avmshell::SpreadMethodClass, m_slots_SpreadMethodClass);
	static const uint16_t s_slotsOffsetSpreadMethodObject = offsetof(::avmshell::SpreadMethodObject,m_slots_SpreadMethodObject);
	static void doSpreadMethodClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetStageAlignClass = offsetof(::avmshell::StageAlignClass, m_slots_StageAlignClass);
	static const uint16_t s_slotsOffsetStageAlignObject = offsetof(::avmshell::StageAlignObject,m_slots_StageAlignObject);
	static void doStageAlignClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetStageDisplayStateClass = offsetof(::avmshell::StageDisplayStateClass, m_slots_StageDisplayStateClass);
	static const uint16_t s_slotsOffsetStageDisplayStateObject = offsetof(::avmshell::StageDisplayStateObject,m_slots_StageDisplayStateObject);
	static void doStageDisplayStateClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetStageQualityClass = offsetof(::avmshell::StageQualityClass, m_slots_StageQualityClass);
	static const uint16_t s_slotsOffsetStageQualityObject = offsetof(::avmshell::StageQualityObject,m_slots_StageQualityObject);
	static void doStageQualityClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetStageScaleModeClass = offsetof(::avmshell::StageScaleModeClass, m_slots_StageScaleModeClass);
	static const uint16_t s_slotsOffsetStageScaleModeObject = offsetof(::avmshell::StageScaleModeObject,m_slots_StageScaleModeObject);
	static void doStageScaleModeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSWFVersionClass = offsetof(::avmshell::SWFVersionClass, m_slots_SWFVersionClass);
	static const uint16_t s_slotsOffsetSWFVersionObject = offsetof(::avmshell::SWFVersionObject,m_slots_SWFVersionObject);
	static void doSWFVersionClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSystemClass = offsetof(::avmshell::SystemClass, m_slots_SystemClass);
	static const uint16_t s_slotsOffsetSystemObject = offsetof(::avmshell::SystemObject,m_slots_SystemObject);
	static void doSystemClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTextColorTypeClass = offsetof(::avmshell::TextColorTypeClass, m_slots_TextColorTypeClass);
	static const uint16_t s_slotsOffsetTextColorTypeObject = offsetof(::avmshell::TextColorTypeObject,m_slots_TextColorTypeObject);
	static void doTextColorTypeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTextDisplayModeClass = offsetof(::avmshell::TextDisplayModeClass, m_slots_TextDisplayModeClass);
	static const uint16_t s_slotsOffsetTextDisplayModeObject = offsetof(::avmshell::TextDisplayModeObject,m_slots_TextDisplayModeObject);
	static void doTextDisplayModeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTextFieldAutoSizeClass = offsetof(::avmshell::TextFieldAutoSizeClass, m_slots_TextFieldAutoSizeClass);
	static const uint16_t s_slotsOffsetTextFieldAutoSizeObject = offsetof(::avmshell::TextFieldAutoSizeObject,m_slots_TextFieldAutoSizeObject);
	static void doTextFieldAutoSizeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTextFieldTypeClass = offsetof(::avmshell::TextFieldTypeClass, m_slots_TextFieldTypeClass);
	static const uint16_t s_slotsOffsetTextFieldTypeObject = offsetof(::avmshell::TextFieldTypeObject,m_slots_TextFieldTypeObject);
	static void doTextFieldTypeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTextFormatAlignClass = offsetof(::avmshell::TextFormatAlignClass, m_slots_TextFormatAlignClass);
	static const uint16_t s_slotsOffsetTextFormatAlignObject = offsetof(::avmshell::TextFormatAlignObject,m_slots_TextFormatAlignObject);
	static void doTextFormatAlignClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTextLineMetricsClass = offsetof(::avmshell::TextLineMetricsClass, m_slots_TextLineMetricsClass);
	static const uint16_t s_slotsOffsetTextLineMetricsObject = offsetof(::avmshell::TextLineMetricsObject,m_slots_TextLineMetricsObject);
	static void doTextLineMetricsClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTextRendererClass = offsetof(::avmshell::TextRendererClass, m_slots_TextRendererClass);
	static const uint16_t s_slotsOffsetTextRendererObject = offsetof(::avmshell::TextRendererObject,m_slots_TextRendererObject);
	static void doTextRendererClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetURLLoaderDataFormatClass = offsetof(::avmshell::URLLoaderDataFormatClass, m_slots_URLLoaderDataFormatClass);
	static const uint16_t s_slotsOffsetURLLoaderDataFormatObject = offsetof(::avmshell::URLLoaderDataFormatObject,m_slots_URLLoaderDataFormatObject);
	static void doURLLoaderDataFormatClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetURLRequestHeaderClass = offsetof(::avmshell::URLRequestHeaderClass, m_slots_URLRequestHeaderClass);
	static const uint16_t s_slotsOffsetURLRequestHeaderObject = offsetof(::avmshell::URLRequestHeaderObject,m_slots_URLRequestHeaderObject);
	static void doURLRequestHeaderClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetURLRequestMethodClass = offsetof(::avmshell::URLRequestMethodClass, m_slots_URLRequestMethodClass);
	static const uint16_t s_slotsOffsetURLRequestMethodObject = offsetof(::avmshell::URLRequestMethodObject,m_slots_URLRequestMethodObject);
	static void doURLRequestMethodClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetURLVariablesClass = offsetof(::avmshell::URLVariablesClass, m_slots_URLVariablesClass);
	static const uint16_t s_slotsOffsetURLVariablesObject = offsetof(::avmshell::URLVariablesObject,m_slots_URLVariablesObject);
	static void doURLVariablesClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetXMLNodeClass = offsetof(::avmshell::XMLNodeClass, m_slots_XMLNodeClass);
	static const uint16_t s_slotsOffsetXMLNodeObject = offsetof(::avmshell::XMLNodeObject,m_slots_XMLNodeObject);
	static void doXMLNodeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetXMLNodeTypeClass = offsetof(::avmshell::XMLNodeTypeClass, m_slots_XMLNodeTypeClass);
	static const uint16_t s_slotsOffsetXMLNodeTypeObject = offsetof(::avmshell::XMLNodeTypeObject,m_slots_XMLNodeTypeObject);
	static void doXMLNodeTypeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetXMLUIClass = offsetof(::avmshell::XMLUIClass, m_slots_XMLUIClass);
	static const uint16_t s_slotsOffsetXMLUIObject = offsetof(::avmshell::XMLUIObject,m_slots_XMLUIObject);
	static void doXMLUIClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetIllegalOperationErrorClass = offsetof(::avmshell::IllegalOperationErrorClass, m_slots_IllegalOperationErrorClass);
	static const uint16_t s_slotsOffsetIllegalOperationErrorObject = offsetof(::avmshell::IllegalOperationErrorObject,m_slots_IllegalOperationErrorObject);
	static void doIllegalOperationErrorClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetIOErrorClass = offsetof(::avmshell::IOErrorClass, m_slots_IOErrorClass);
	static const uint16_t s_slotsOffsetIOErrorObject = offsetof(::avmshell::IOErrorObject,m_slots_IOErrorObject);
	static void doIOErrorClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetMemoryErrorClass = offsetof(::avmshell::MemoryErrorClass, m_slots_MemoryErrorClass);
	static const uint16_t s_slotsOffsetMemoryErrorObject = offsetof(::avmshell::MemoryErrorObject,m_slots_MemoryErrorObject);
	static void doMemoryErrorClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetScriptTimeoutErrorClass = offsetof(::avmshell::ScriptTimeoutErrorClass, m_slots_ScriptTimeoutErrorClass);
	static const uint16_t s_slotsOffsetScriptTimeoutErrorObject = offsetof(::avmshell::ScriptTimeoutErrorObject,m_slots_ScriptTimeoutErrorObject);
	static void doScriptTimeoutErrorClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetStackOverflowErrorClass = offsetof(::avmshell::StackOverflowErrorClass, m_slots_StackOverflowErrorClass);
	static const uint16_t s_slotsOffsetStackOverflowErrorObject = offsetof(::avmshell::StackOverflowErrorObject,m_slots_StackOverflowErrorObject);
	static void doStackOverflowErrorClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetActivityEventClass = offsetof(::avmshell::ActivityEventClass, m_slots_ActivityEventClass);
	static const uint16_t s_slotsOffsetActivityEventObject = offsetof(::avmshell::ActivityEventObject,m_slots_ActivityEventObject);
	static void doActivityEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetContextMenuEventClass = offsetof(::avmshell::ContextMenuEventClass, m_slots_ContextMenuEventClass);
	static const uint16_t s_slotsOffsetContextMenuEventObject = offsetof(::avmshell::ContextMenuEventObject,m_slots_ContextMenuEventObject);
	static void doContextMenuEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetFocusEventClass = offsetof(::avmshell::FocusEventClass, m_slots_FocusEventClass);
	static const uint16_t s_slotsOffsetFocusEventObject = offsetof(::avmshell::FocusEventObject,m_slots_FocusEventObject);
	static void doFocusEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetHTTPStatusEventClass = offsetof(::avmshell::HTTPStatusEventClass, m_slots_HTTPStatusEventClass);
	static const uint16_t s_slotsOffsetHTTPStatusEventObject = offsetof(::avmshell::HTTPStatusEventObject,m_slots_HTTPStatusEventObject);
	static void doHTTPStatusEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetInvalidSWFErrorClass = offsetof(::avmshell::InvalidSWFErrorClass, m_slots_InvalidSWFErrorClass);
	static const uint16_t s_slotsOffsetInvalidSWFErrorObject = offsetof(::avmshell::InvalidSWFErrorObject,m_slots_InvalidSWFErrorObject);
	static void doInvalidSWFErrorClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetKeyboardEventClass = offsetof(::avmshell::KeyboardEventClass, m_slots_KeyboardEventClass);
	static const uint16_t s_slotsOffsetKeyboardEventObject = offsetof(::avmshell::KeyboardEventObject,m_slots_KeyboardEventObject);
	static void doKeyboardEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetMouseEventClass = offsetof(::avmshell::MouseEventClass, m_slots_MouseEventClass);
	static const uint16_t s_slotsOffsetMouseEventObject = offsetof(::avmshell::MouseEventObject,m_slots_MouseEventObject);
	static void doMouseEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNetStatusEventClass = offsetof(::avmshell::NetStatusEventClass, m_slots_NetStatusEventClass);
	static const uint16_t s_slotsOffsetNetStatusEventObject = offsetof(::avmshell::NetStatusEventObject,m_slots_NetStatusEventObject);
	static void doNetStatusEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetProgressEventClass = offsetof(::avmshell::ProgressEventClass, m_slots_ProgressEventClass);
	static const uint16_t s_slotsOffsetProgressEventObject = offsetof(::avmshell::ProgressEventObject,m_slots_ProgressEventObject);
	static void doProgressEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetStatusEventClass = offsetof(::avmshell::StatusEventClass, m_slots_StatusEventClass);
	static const uint16_t s_slotsOffsetStatusEventObject = offsetof(::avmshell::StatusEventObject,m_slots_StatusEventObject);
	static void doStatusEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSyncEventClass = offsetof(::avmshell::SyncEventClass, m_slots_SyncEventClass);
	static const uint16_t s_slotsOffsetSyncEventObject = offsetof(::avmshell::SyncEventObject,m_slots_SyncEventObject);
	static void doSyncEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTextEventClass = offsetof(::avmshell::TextEventClass, m_slots_TextEventClass);
	static const uint16_t s_slotsOffsetTextEventObject = offsetof(::avmshell::TextEventObject,m_slots_TextEventObject);
	static void doTextEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTimerEventClass = offsetof(::avmshell::TimerEventClass, m_slots_TimerEventClass);
	static const uint16_t s_slotsOffsetTimerEventObject = offsetof(::avmshell::TimerEventObject,m_slots_TimerEventObject);
	static void doTimerEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetContextMenuClass = offsetof(::avmshell::ContextMenuClass, m_slots_ContextMenuClass);
	static const uint16_t s_slotsOffsetContextMenuObject = offsetof(::avmshell::ContextMenuObject,m_slots_ContextMenuObject);
	static void doContextMenuClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDisplayObjectClass = offsetof(::avmshell::DisplayObjectClass, m_slots_DisplayObjectClass);
	static const uint16_t s_slotsOffsetDisplayObjectObject = offsetof(::avmshell::DisplayObjectObject,m_slots_DisplayObjectObject);
	static void doDisplayObjectClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetIMEClass = offsetof(::avmshell::IMEClass, m_slots_IMEClass);
	static const uint16_t s_slotsOffsetIMEObject = offsetof(::avmshell::IMEObject,m_slots_IMEObject);
	static void doIMEClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNetConnectionClass = offsetof(::avmshell::NetConnectionClass, m_slots_NetConnectionClass);
	static const uint16_t s_slotsOffsetNetConnectionObject = offsetof(::avmshell::NetConnectionObject,m_slots_NetConnectionObject);
	static void doNetConnectionClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSoundChannelClass = offsetof(::avmshell::SoundChannelClass, m_slots_SoundChannelClass);
	static const uint16_t s_slotsOffsetSoundChannelObject = offsetof(::avmshell::SoundChannelObject,m_slots_SoundChannelObject);
	static void doSoundChannelClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetStyleSheetClass = offsetof(::avmshell::StyleSheetClass, m_slots_StyleSheetClass);
	static const uint16_t s_slotsOffsetStyleSheetObject = offsetof(::avmshell::StyleSheetObject,m_slots_StyleSheetObject);
	static void doStyleSheetClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetMicrophoneClass = offsetof(::avmshell::MicrophoneClass, m_slots_MicrophoneClass);
	static const uint16_t s_slotsOffsetMicrophoneObject = offsetof(::avmshell::MicrophoneObject,m_slots_MicrophoneObject);
	static void doMicrophoneClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNetStreamClass = offsetof(::avmshell::NetStreamClass, m_slots_NetStreamClass);
	static const uint16_t s_slotsOffsetNetStreamObject = offsetof(::avmshell::NetStreamObject,m_slots_NetStreamObject);
	static void doNetStreamClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetCameraClass = offsetof(::avmshell::CameraClass, m_slots_CameraClass);
	static const uint16_t s_slotsOffsetCameraObject = offsetof(::avmshell::CameraObject,m_slots_CameraObject);
	static void doCameraClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetContextMenuItemClass = offsetof(::avmshell::ContextMenuItemClass, m_slots_ContextMenuItemClass);
	static const uint16_t s_slotsOffsetContextMenuItemObject = offsetof(::avmshell::ContextMenuItemObject,m_slots_ContextMenuItemObject);
	static void doContextMenuItemClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetFileReferenceClass = offsetof(::avmshell::FileReferenceClass, m_slots_FileReferenceClass);
	static const uint16_t s_slotsOffsetFileReferenceObject = offsetof(::avmshell::FileReferenceObject,m_slots_FileReferenceObject);
	static void doFileReferenceClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetFileReferenceListClass = offsetof(::avmshell::FileReferenceListClass, m_slots_FileReferenceListClass);
	static const uint16_t s_slotsOffsetFileReferenceListObject = offsetof(::avmshell::FileReferenceListObject,m_slots_FileReferenceListObject);
	static void doFileReferenceListClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetLoaderInfoClass = offsetof(::avmshell::LoaderInfoClass, m_slots_LoaderInfoClass);
	static const uint16_t s_slotsOffsetLoaderInfoObject = offsetof(::avmshell::LoaderInfoObject,m_slots_LoaderInfoObject);
	static void doLoaderInfoClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetLocalConnectionClass = offsetof(::avmshell::LocalConnectionClass, m_slots_LocalConnectionClass);
	static const uint16_t s_slotsOffsetLocalConnectionObject = offsetof(::avmshell::LocalConnectionObject,m_slots_LocalConnectionObject);
	static void doLocalConnectionClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetPrintJobClass = offsetof(::avmshell::PrintJobClass, m_slots_PrintJobClass);
	static const uint16_t s_slotsOffsetPrintJobObject = offsetof(::avmshell::PrintJobObject,m_slots_PrintJobObject);
	static void doPrintJobClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSharedObjectClass = offsetof(::avmshell::SharedObjectClass, m_slots_SharedObjectClass);
	static const uint16_t s_slotsOffsetSharedObjectObject = offsetof(::avmshell::SharedObjectObject,m_slots_SharedObjectObject);
	static void doSharedObjectClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSocketClass = offsetof(::avmshell::SocketClass, m_slots_SocketClass);
	static const uint16_t s_slotsOffsetSocketObject = offsetof(::avmshell::SocketObject,m_slots_SocketObject);
	static void doSocketClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSoundClass = offsetof(::avmshell::SoundClass, m_slots_SoundClass);
	static const uint16_t s_slotsOffsetSoundObject = offsetof(::avmshell::SoundObject,m_slots_SoundObject);
	static void doSoundClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTimerClass = offsetof(::avmshell::TimerClass, m_slots_TimerClass);
	static const uint16_t s_slotsOffsetTimerObject = offsetof(::avmshell::TimerObject,m_slots_TimerObject);
	static void doTimerClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetURLLoaderClass = offsetof(::avmshell::URLLoaderClass, m_slots_URLLoaderClass);
	static const uint16_t s_slotsOffsetURLLoaderObject = offsetof(::avmshell::URLLoaderObject,m_slots_URLLoaderObject);
	static void doURLLoaderClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetURLStreamClass = offsetof(::avmshell::URLStreamClass, m_slots_URLStreamClass);
	static const uint16_t s_slotsOffsetURLStreamObject = offsetof(::avmshell::URLStreamObject,m_slots_URLStreamObject);
	static void doURLStreamClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetXMLSocketClass = offsetof(::avmshell::XMLSocketClass, m_slots_XMLSocketClass);
	static const uint16_t s_slotsOffsetXMLSocketObject = offsetof(::avmshell::XMLSocketObject,m_slots_XMLSocketObject);
	static void doXMLSocketClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetBlurFilterClass = offsetof(::avmshell::BlurFilterClass, m_slots_BlurFilterClass);
	static const uint16_t s_slotsOffsetBlurFilterObject = offsetof(::avmshell::BlurFilterObject,m_slots_BlurFilterObject);
	static void doBlurFilterClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetBevelFilterClass = offsetof(::avmshell::BevelFilterClass, m_slots_BevelFilterClass);
	static const uint16_t s_slotsOffsetBevelFilterObject = offsetof(::avmshell::BevelFilterObject,m_slots_BevelFilterObject);
	static void doBevelFilterClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetColorMatrixFilterClass = offsetof(::avmshell::ColorMatrixFilterClass, m_slots_ColorMatrixFilterClass);
	static const uint16_t s_slotsOffsetColorMatrixFilterObject = offsetof(::avmshell::ColorMatrixFilterObject,m_slots_ColorMatrixFilterObject);
	static void doColorMatrixFilterClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetConvolutionFilterClass = offsetof(::avmshell::ConvolutionFilterClass, m_slots_ConvolutionFilterClass);
	static const uint16_t s_slotsOffsetConvolutionFilterObject = offsetof(::avmshell::ConvolutionFilterObject,m_slots_ConvolutionFilterObject);
	static void doConvolutionFilterClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDisplacementMapFilterClass = offsetof(::avmshell::DisplacementMapFilterClass, m_slots_DisplacementMapFilterClass);
	static const uint16_t s_slotsOffsetDisplacementMapFilterObject = offsetof(::avmshell::DisplacementMapFilterObject,m_slots_DisplacementMapFilterObject);
	static void doDisplacementMapFilterClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDropShadowFilterClass = offsetof(::avmshell::DropShadowFilterClass, m_slots_DropShadowFilterClass);
	static const uint16_t s_slotsOffsetDropShadowFilterObject = offsetof(::avmshell::DropShadowFilterObject,m_slots_DropShadowFilterObject);
	static void doDropShadowFilterClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetGlowFilterClass = offsetof(::avmshell::GlowFilterClass, m_slots_GlowFilterClass);
	static const uint16_t s_slotsOffsetGlowFilterObject = offsetof(::avmshell::GlowFilterObject,m_slots_GlowFilterObject);
	static void doGlowFilterClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetGradientBevelFilterClass = offsetof(::avmshell::GradientBevelFilterClass, m_slots_GradientBevelFilterClass);
	static const uint16_t s_slotsOffsetGradientBevelFilterObject = offsetof(::avmshell::GradientBevelFilterObject,m_slots_GradientBevelFilterObject);
	static void doGradientBevelFilterClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetGradientGlowFilterClass = offsetof(::avmshell::GradientGlowFilterClass, m_slots_GradientGlowFilterClass);
	static const uint16_t s_slotsOffsetGradientGlowFilterObject = offsetof(::avmshell::GradientGlowFilterObject,m_slots_GradientGlowFilterObject);
	static void doGradientGlowFilterClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetXMLDocumentClass = offsetof(::avmshell::XMLDocumentClass, m_slots_XMLDocumentClass);
	static const uint16_t s_slotsOffsetXMLDocumentObject = offsetof(::avmshell::XMLDocumentObject,m_slots_XMLDocumentObject);
	static void doXMLDocumentClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetEOFErrorClass = offsetof(::avmshell::EOFErrorClass, m_slots_EOFErrorClass);
	static const uint16_t s_slotsOffsetEOFErrorObject = offsetof(::avmshell::EOFErrorObject,m_slots_EOFErrorObject);
	static void doEOFErrorClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetFullScreenEventClass = offsetof(::avmshell::FullScreenEventClass, m_slots_FullScreenEventClass);
	static const uint16_t s_slotsOffsetFullScreenEventObject = offsetof(::avmshell::FullScreenEventObject,m_slots_FullScreenEventObject);
	static void doFullScreenEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDataEventClass = offsetof(::avmshell::DataEventClass, m_slots_DataEventClass);
	static const uint16_t s_slotsOffsetDataEventObject = offsetof(::avmshell::DataEventObject,m_slots_DataEventObject);
	static void doDataEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetErrorEventClass = offsetof(::avmshell::ErrorEventClass, m_slots_ErrorEventClass);
	static const uint16_t s_slotsOffsetErrorEventObject = offsetof(::avmshell::ErrorEventObject,m_slots_ErrorEventObject);
	static void doErrorEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetIMEEventClass = offsetof(::avmshell::IMEEventClass, m_slots_IMEEventClass);
	static const uint16_t s_slotsOffsetIMEEventObject = offsetof(::avmshell::IMEEventObject,m_slots_IMEEventObject);
	static void doIMEEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetInteractiveObjectClass = offsetof(::avmshell::InteractiveObjectClass, m_slots_InteractiveObjectClass);
	static const uint16_t s_slotsOffsetInteractiveObjectObject = offsetof(::avmshell::InteractiveObjectObject,m_slots_InteractiveObjectObject);
	static void doInteractiveObjectClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetAVM1MovieClass = offsetof(::avmshell::AVM1MovieClass, m_slots_AVM1MovieClass);
	static const uint16_t s_slotsOffsetAVM1MovieObject = offsetof(::avmshell::AVM1MovieObject,m_slots_AVM1MovieObject);
	static void doAVM1MovieClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetBitmapClass = offsetof(::avmshell::BitmapClass, m_slots_BitmapClass);
	static const uint16_t s_slotsOffsetBitmapObject = offsetof(::avmshell::BitmapObject,m_slots_BitmapObject);
	static void doBitmapClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetMorphShapeClass = offsetof(::avmshell::MorphShapeClass, m_slots_MorphShapeClass);
	static const uint16_t s_slotsOffsetMorphShapeObject = offsetof(::avmshell::MorphShapeObject,m_slots_MorphShapeObject);
	static void doMorphShapeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetShapeClass = offsetof(::avmshell::ShapeClass, m_slots_ShapeClass);
	static const uint16_t s_slotsOffsetShapeObject = offsetof(::avmshell::ShapeObject,m_slots_ShapeObject);
	static void doShapeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetStaticTextClass = offsetof(::avmshell::StaticTextClass, m_slots_StaticTextClass);
	static const uint16_t s_slotsOffsetStaticTextObject = offsetof(::avmshell::StaticTextObject,m_slots_StaticTextObject);
	static void doStaticTextClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetVideoClass = offsetof(::avmshell::VideoClass, m_slots_VideoClass);
	static const uint16_t s_slotsOffsetVideoObject = offsetof(::avmshell::VideoObject,m_slots_VideoObject);
	static void doVideoClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetAsyncErrorEventClass = offsetof(::avmshell::AsyncErrorEventClass, m_slots_AsyncErrorEventClass);
	static const uint16_t s_slotsOffsetAsyncErrorEventObject = offsetof(::avmshell::AsyncErrorEventObject,m_slots_AsyncErrorEventObject);
	static void doAsyncErrorEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetIOErrorEventClass = offsetof(::avmshell::IOErrorEventClass, m_slots_IOErrorEventClass);
	static const uint16_t s_slotsOffsetIOErrorEventObject = offsetof(::avmshell::IOErrorEventObject,m_slots_IOErrorEventObject);
	static void doIOErrorEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSecurityErrorEventClass = offsetof(::avmshell::SecurityErrorEventClass, m_slots_SecurityErrorEventClass);
	static const uint16_t s_slotsOffsetSecurityErrorEventObject = offsetof(::avmshell::SecurityErrorEventObject,m_slots_SecurityErrorEventObject);
	static void doSecurityErrorEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDisplayObjectContainerClass = offsetof(::avmshell::DisplayObjectContainerClass, m_slots_DisplayObjectContainerClass);
	static const uint16_t s_slotsOffsetDisplayObjectContainerObject = offsetof(::avmshell::DisplayObjectContainerObject,m_slots_DisplayObjectContainerObject);
	static void doDisplayObjectContainerClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSimpleButtonClass = offsetof(::avmshell::SimpleButtonClass, m_slots_SimpleButtonClass);
	static const uint16_t s_slotsOffsetSimpleButtonObject = offsetof(::avmshell::SimpleButtonObject,m_slots_SimpleButtonObject);
	static void doSimpleButtonClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTextFieldClass = offsetof(::avmshell::TextFieldClass, m_slots_TextFieldClass);
	static const uint16_t s_slotsOffsetTextFieldObject = offsetof(::avmshell::TextFieldObject,m_slots_TextFieldObject);
	static void doTextFieldClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetLoaderClass = offsetof(::avmshell::LoaderClass, m_slots_LoaderClass);
	static const uint16_t s_slotsOffsetLoaderObject = offsetof(::avmshell::LoaderObject,m_slots_LoaderObject);
	static void doLoaderClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSpriteClass = offsetof(::avmshell::SpriteClass, m_slots_SpriteClass);
	static const uint16_t s_slotsOffsetSpriteObject = offsetof(::avmshell::SpriteObject,m_slots_SpriteObject);
	static void doSpriteClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetStageClass = offsetof(::avmshell::StageClass, m_slots_StageClass);
	static const uint16_t s_slotsOffsetStageObject = offsetof(::avmshell::StageObject,m_slots_StageObject);
	static void doStageClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetMovieClipClass = offsetof(::avmshell::MovieClipClass, m_slots_MovieClipClass);
	static const uint16_t s_slotsOffsetMovieClipObject = offsetof(::avmshell::MovieClipObject,m_slots_MovieClipObject);
	static void doMovieClipClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	///////////////////////////////////////////////////////////////////////
	// Private
	static const uint16_t s_slotsOffsetDomainClass = offsetof(::avmshell::DomainClass, m_slots_DomainClass);
	static const uint16_t s_slotsOffsetDomainObject = offsetof(::avmshell::DomainObject,m_slots_DomainObject);
	static void doDomainClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	//////////////////////////////////////////////////////////////////////
	// AIR
	static const uint16_t s_slotsOffsetAccessibilityImplementationClass = offsetof(::avmshell::AccessibilityImplementationClass, m_slots_AccessibilityImplementationClass);
	static const uint16_t s_slotsOffsetAccessibilityImplementationObject = offsetof(::avmshell::AccessibilityImplementationObject,m_slots_AccessibilityImplementationObject);
	static void doAccessibilityImplementationClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	//////////////////////////////////////////////////////////////////////
	// JavaScript
	//Delete JavaScript for BUGS
	/*static const uint16_t s_slotsOffsetWindowClass = offsetof(::avmshell::WindowClass, m_slots_WindowClass);
	static const uint16_t s_slotsOffsetWindowObject = offsetof(::avmshell::WindowObject,m_slots_WindowObject);
	static void doWindowClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetLocationClass = offsetof(::avmshell::LocationClass, m_slots_LocationClass);
	static const uint16_t s_slotsOffsetLocationObject = offsetof(::avmshell::LocationObject,m_slots_LocationObject);
	static void doLocationClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNavigatorClass = offsetof(::avmshell::NavigatorClass, m_slots_NavigatorClass);
	static const uint16_t s_slotsOffsetNavigatorObject = offsetof(::avmshell::NavigatorObject,m_slots_NavigatorObject);
	static void doNavigatorClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}*/


	//new adds
	static const uint16_t s_slotsOffsetColorCorrectionClass = offsetof(::avmshell::ColorCorrectionClass, m_slots_ColorCorrectionClass);
	static const uint16_t s_slotsOffsetColorCorrectionObject = offsetof(::avmshell::ColorCorrectionObject,m_slots_ColorCorrectionObject);
	static void doColorCorrectionClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetColorCorrectionSupportClass = offsetof(::avmshell::ColorCorrectionSupportClass, m_slots_ColorCorrectionSupportClass);
	static const uint16_t s_slotsOffsetColorCorrectionSupportObject = offsetof(::avmshell::ColorCorrectionSupportObject,m_slots_ColorCorrectionSupportObject);
	static void doColorCorrectionSupportClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetFocusDirectionClass = offsetof(::avmshell::FocusDirectionClass, m_slots_FocusDirectionClass);
	static const uint16_t s_slotsOffsetFocusDirectionObject = offsetof(::avmshell::FocusDirectionObject,m_slots_FocusDirectionObject);
	static void doFocusDirectionClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetGraphicsBitmapFillClass = offsetof(::avmshell::GraphicsBitmapFillClass, m_slots_GraphicsBitmapFillClass);
	static const uint16_t s_slotsOffsetGraphicsBitmapFillObject = offsetof(::avmshell::GraphicsBitmapFillObject,m_slots_GraphicsBitmapFillObject);
	static void doGraphicsBitmapFillClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetGraphicsEndFillClass = offsetof(::avmshell::GraphicsEndFillClass, m_slots_GraphicsEndFillClass);
	static const uint16_t s_slotsOffsetGraphicsEndFillObject = offsetof(::avmshell::GraphicsEndFillObject,m_slots_GraphicsEndFillObject);
	static void doGraphicsEndFillClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetGraphicsGradientFillClass = offsetof(::avmshell::GraphicsGradientFillClass, m_slots_GraphicsGradientFillClass);
	static const uint16_t s_slotsOffsetGraphicsGradientFillObject = offsetof(::avmshell::GraphicsGradientFillObject,m_slots_GraphicsGradientFillObject);
	static void doGraphicsGradientFillClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetGraphicsPathCommandClass = offsetof(::avmshell::GraphicsPathCommandClass, m_slots_GraphicsPathCommandClass);
	static const uint16_t s_slotsOffsetGraphicsPathCommandObject = offsetof(::avmshell::GraphicsPathCommandObject,m_slots_GraphicsPathCommandObject);
	static void doGraphicsPathCommandClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetGraphicsPathWindingClass = offsetof(::avmshell::GraphicsPathWindingClass, m_slots_GraphicsPathWindingClass);
	static const uint16_t s_slotsOffsetGraphicsPathWindingObject = offsetof(::avmshell::GraphicsPathWindingObject,m_slots_GraphicsPathWindingObject);
	static void doGraphicsPathWindingClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetGraphicsPathClass = offsetof(::avmshell::GraphicsPathClass, m_slots_GraphicsPathClass);
	static const uint16_t s_slotsOffsetGraphicsPathObject = offsetof(::avmshell::GraphicsPathObject,m_slots_GraphicsPathObject);
	static void doGraphicsPathClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetGraphicsSolidFillClass = offsetof(::avmshell::GraphicsSolidFillClass, m_slots_GraphicsSolidFillClass);
	static const uint16_t s_slotsOffsetGraphicsSolidFillObject = offsetof(::avmshell::GraphicsSolidFillObject,m_slots_GraphicsSolidFillObject);
	static void doGraphicsSolidFillClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetGraphicsStrokeClass = offsetof(::avmshell::GraphicsStrokeClass, m_slots_GraphicsStrokeClass);
	static const uint16_t s_slotsOffsetGraphicsStrokeObject = offsetof(::avmshell::GraphicsStrokeObject,m_slots_GraphicsStrokeObject);
	static void doGraphicsStrokeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetGraphicsTrianglePathClass = offsetof(::avmshell::GraphicsTrianglePathClass, m_slots_GraphicsTrianglePathClass);
	static const uint16_t s_slotsOffsetGraphicsTrianglePathObject = offsetof(::avmshell::GraphicsTrianglePathObject,m_slots_GraphicsTrianglePathObject);
	static void doGraphicsTrianglePathClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNativeMenuClass = offsetof(::avmshell::NativeMenuClass, m_slots_NativeMenuClass);
	static const uint16_t s_slotsOffsetNativeMenuObject = offsetof(::avmshell::NativeMenuObject,m_slots_NativeMenuObject);
	static void doNativeMenuClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNativeMenuItemClass = offsetof(::avmshell::NativeMenuItemClass, m_slots_NativeMenuItemClass);
	static const uint16_t s_slotsOffsetNativeMenuItemObject = offsetof(::avmshell::NativeMenuItemObject,m_slots_NativeMenuItemObject);
	static void doNativeMenuItemClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNativeWindowDisplayStateClass = offsetof(::avmshell::NativeWindowDisplayStateClass, m_slots_NativeWindowDisplayStateClass);
	static const uint16_t s_slotsOffsetNativeWindowDisplayStateObject = offsetof(::avmshell::NativeWindowDisplayStateObject,m_slots_NativeWindowDisplayStateObject);
	static void doNativeWindowDisplayStateClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNativeWindowInitOptionsClass = offsetof(::avmshell::NativeWindowInitOptionsClass, m_slots_NativeWindowInitOptionsClass);
	static const uint16_t s_slotsOffsetNativeWindowInitOptionsObject = offsetof(::avmshell::NativeWindowInitOptionsObject,m_slots_NativeWindowInitOptionsObject);
	static void doNativeWindowInitOptionsClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNativeWindowResizeClass = offsetof(::avmshell::NativeWindowResizeClass, m_slots_NativeWindowResizeClass);
	static const uint16_t s_slotsOffsetNativeWindowResizeObject = offsetof(::avmshell::NativeWindowResizeObject,m_slots_NativeWindowResizeObject);
	static void doNativeWindowResizeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNativeWindowSystemChromeClass = offsetof(::avmshell::NativeWindowSystemChromeClass, m_slots_NativeWindowSystemChromeClass);
	static const uint16_t s_slotsOffsetNativeWindowSystemChromeObject = offsetof(::avmshell::NativeWindowSystemChromeObject,m_slots_NativeWindowSystemChromeObject);
	static void doNativeWindowSystemChromeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNativeWindowTypeClass = offsetof(::avmshell::NativeWindowTypeClass, m_slots_NativeWindowTypeClass);
	static const uint16_t s_slotsOffsetNativeWindowTypeObject = offsetof(::avmshell::NativeWindowTypeObject,m_slots_NativeWindowTypeObject);
	static void doNativeWindowTypeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNativeWindowBoundsEventClass = offsetof(::avmshell::NativeWindowBoundsEventClass, m_slots_NativeWindowBoundsEventClass);
	static const uint16_t s_slotsOffsetNativeWindowBoundsEventObject = offsetof(::avmshell::NativeWindowBoundsEventObject,m_slots_NativeWindowBoundsEventObject);
	static void doNativeWindowBoundsEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNativeWindowDisplayStateEventClass = offsetof(::avmshell::NativeWindowDisplayStateEventClass, m_slots_NativeWindowDisplayStateEventClass);
	static const uint16_t s_slotsOffsetNativeWindowDisplayStateEventObject = offsetof(::avmshell::NativeWindowDisplayStateEventObject,m_slots_NativeWindowDisplayStateEventObject);
	static void doNativeWindowDisplayStateEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNativeWindowClass = offsetof(::avmshell::NativeWindowClass, m_slots_NativeWindowClass);
	static const uint16_t s_slotsOffsetNativeWindowObject = offsetof(::avmshell::NativeWindowObject,m_slots_NativeWindowObject);
	static void doNativeWindowClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetScreenClass = offsetof(::avmshell::ScreenClass, m_slots_ScreenClass);
	static const uint16_t s_slotsOffsetScreenObject = offsetof(::avmshell::ScreenObject,m_slots_ScreenObject);
	static void doScreenClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetScreenMouseEventClass = offsetof(::avmshell::ScreenMouseEventClass, m_slots_ScreenMouseEventClass);
	static const uint16_t s_slotsOffsetScreenMouseEventObject = offsetof(::avmshell::ScreenMouseEventObject,m_slots_ScreenMouseEventObject);
	static void doScreenMouseEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetShaderClass = offsetof(::avmshell::ShaderClass, m_slots_ShaderClass);
	static const uint16_t s_slotsOffsetShaderObject = offsetof(::avmshell::ShaderObject,m_slots_ShaderObject);
	static void doShaderClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetShaderDataClass = offsetof(::avmshell::ShaderDataClass, m_slots_ShaderDataClass);
	static const uint16_t s_slotsOffsetShaderDataObject = offsetof(::avmshell::ShaderDataObject,m_slots_ShaderDataObject);
	static void doShaderDataClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetShaderInputClass = offsetof(::avmshell::ShaderInputClass, m_slots_ShaderInputClass);
	static const uint16_t s_slotsOffsetShaderInputObject = offsetof(::avmshell::ShaderInputObject,m_slots_ShaderInputObject);
	static void doShaderInputClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetShaderParameterClass = offsetof(::avmshell::ShaderParameterClass, m_slots_ShaderParameterClass);
	static const uint16_t s_slotsOffsetShaderParameterObject = offsetof(::avmshell::ShaderParameterObject,m_slots_ShaderParameterObject);
	static void doShaderParameterClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetShaderParameterTypeClass = offsetof(::avmshell::ShaderParameterTypeClass, m_slots_ShaderParameterTypeClass);
	static const uint16_t s_slotsOffsetShaderParameterTypeObject = offsetof(::avmshell::ShaderParameterTypeObject,m_slots_ShaderParameterTypeObject);
	static void doShaderParameterTypeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetShaderPrecisionClass = offsetof(::avmshell::ShaderPrecisionClass, m_slots_ShaderPrecisionClass);
	static const uint16_t s_slotsOffsetShaderPrecisionObject = offsetof(::avmshell::ShaderPrecisionObject,m_slots_ShaderPrecisionObject);
	static void doShaderPrecisionClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetShaderEventClass = offsetof(::avmshell::ShaderEventClass, m_slots_ShaderEventClass);
	static const uint16_t s_slotsOffsetShaderEventObject = offsetof(::avmshell::ShaderEventObject,m_slots_ShaderEventObject);
	static void doShaderEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetShaderFilterClass = offsetof(::avmshell::ShaderFilterClass, m_slots_ShaderFilterClass);
	static const uint16_t s_slotsOffsetShaderFilterObject = offsetof(::avmshell::ShaderFilterObject,m_slots_ShaderFilterObject);
	static void doShaderFilterClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetGraphicsShaderFillClass = offsetof(::avmshell::GraphicsShaderFillClass, m_slots_GraphicsShaderFillClass);
	static const uint16_t s_slotsOffsetGraphicsShaderFillObject = offsetof(::avmshell::GraphicsShaderFillObject,m_slots_GraphicsShaderFillObject);
	static void doGraphicsShaderFillClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetShaderJobClass = offsetof(::avmshell::ShaderJobClass, m_slots_ShaderJobClass);
	static const uint16_t s_slotsOffsetShaderJobObject = offsetof(::avmshell::ShaderJobObject,m_slots_ShaderJobObject);
	static void doShaderJobClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetStageAspectRatioClass = offsetof(::avmshell::StageAspectRatioClass, m_slots_StageAspectRatioClass);
	static const uint16_t s_slotsOffsetStageAspectRatioObject = offsetof(::avmshell::StageAspectRatioObject,m_slots_StageAspectRatioObject);
	static void doStageAspectRatioClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetStageOrientationClass = offsetof(::avmshell::StageOrientationClass, m_slots_StageOrientationClass);
	static const uint16_t s_slotsOffsetStageOrientationObject = offsetof(::avmshell::StageOrientationObject,m_slots_StageOrientationObject);
	static void doStageOrientationClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetStageOrientationEventClass = offsetof(::avmshell::StageOrientationEventClass, m_slots_StageOrientationEventClass);
	static const uint16_t s_slotsOffsetStageOrientationEventObject = offsetof(::avmshell::StageOrientationEventObject,m_slots_StageOrientationEventObject);
	static void doStageOrientationEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTriangleCullingClass = offsetof(::avmshell::TriangleCullingClass, m_slots_TriangleCullingClass);
	static const uint16_t s_slotsOffsetTriangleCullingObject = offsetof(::avmshell::TriangleCullingObject,m_slots_TriangleCullingObject);
	static void doTriangleCullingClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSQLErrorOperationClass = offsetof(::avmshell::SQLErrorOperationClass, m_slots_SQLErrorOperationClass);
	static const uint16_t s_slotsOffsetSQLErrorOperationObject = offsetof(::avmshell::SQLErrorOperationObject,m_slots_SQLErrorOperationObject);
	static void doSQLErrorOperationClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSQLErrorClass = offsetof(::avmshell::SQLErrorClass, m_slots_SQLErrorClass);
	static const uint16_t s_slotsOffsetSQLErrorObject = offsetof(::avmshell::SQLErrorObject,m_slots_SQLErrorObject);
	static void doSQLErrorClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSQLErrorEventClass = offsetof(::avmshell::SQLErrorEventClass, m_slots_SQLErrorEventClass);
	static const uint16_t s_slotsOffsetSQLErrorEventObject = offsetof(::avmshell::SQLErrorEventObject,m_slots_SQLErrorEventObject);
	static void doSQLErrorEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetBrowserInvokeEventClass = offsetof(::avmshell::BrowserInvokeEventClass, m_slots_BrowserInvokeEventClass);
	static const uint16_t s_slotsOffsetBrowserInvokeEventObject = offsetof(::avmshell::BrowserInvokeEventObject,m_slots_BrowserInvokeEventObject);
	static void doBrowserInvokeEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDRMAuthenticateEventClass = offsetof(::avmshell::DRMAuthenticateEventClass, m_slots_DRMAuthenticateEventClass);
	static const uint16_t s_slotsOffsetDRMAuthenticateEventObject = offsetof(::avmshell::DRMAuthenticateEventObject,m_slots_DRMAuthenticateEventObject);
	static void doDRMAuthenticateEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDRMAuthenticationCompleteEventClass = offsetof(::avmshell::DRMAuthenticationCompleteEventClass, m_slots_DRMAuthenticationCompleteEventClass);
	static const uint16_t s_slotsOffsetDRMAuthenticationCompleteEventObject = offsetof(::avmshell::DRMAuthenticationCompleteEventObject,m_slots_DRMAuthenticationCompleteEventObject);
	static void doDRMAuthenticationCompleteEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDRMAuthenticationErrorEventClass = offsetof(::avmshell::DRMAuthenticationErrorEventClass, m_slots_DRMAuthenticationErrorEventClass);
	static const uint16_t s_slotsOffsetDRMAuthenticationErrorEventObject = offsetof(::avmshell::DRMAuthenticationErrorEventObject,m_slots_DRMAuthenticationErrorEventObject);
	static void doDRMAuthenticationErrorEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDRMErrorEventClass = offsetof(::avmshell::DRMErrorEventClass, m_slots_DRMErrorEventClass);
	static const uint16_t s_slotsOffsetDRMErrorEventObject = offsetof(::avmshell::DRMErrorEventObject,m_slots_DRMErrorEventObject);
	static void doDRMErrorEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDRMStatusEventClass = offsetof(::avmshell::DRMStatusEventClass, m_slots_DRMStatusEventClass);
	static const uint16_t s_slotsOffsetDRMStatusEventObject = offsetof(::avmshell::DRMStatusEventObject,m_slots_DRMStatusEventObject);
	static void doDRMStatusEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetGestureEventClass = offsetof(::avmshell::GestureEventClass, m_slots_GestureEventClass);
	static const uint16_t s_slotsOffsetGestureEventObject = offsetof(::avmshell::GestureEventObject,m_slots_GestureEventObject);
	static void doGestureEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetPressAndTapGestureEventClass = offsetof(::avmshell::PressAndTapGestureEventClass, m_slots_PressAndTapGestureEventClass);
	static const uint16_t s_slotsOffsetPressAndTapGestureEventObject = offsetof(::avmshell::PressAndTapGestureEventObject,m_slots_PressAndTapGestureEventObject);
	static void doPressAndTapGestureEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTransformGestureEventClass = offsetof(::avmshell::TransformGestureEventClass, m_slots_TransformGestureEventClass);
	static const uint16_t s_slotsOffsetTransformGestureEventObject = offsetof(::avmshell::TransformGestureEventObject,m_slots_TransformGestureEventObject);
	static void doTransformGestureEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetGesturePhaseClass = offsetof(::avmshell::GesturePhaseClass, m_slots_GesturePhaseClass);
	static const uint16_t s_slotsOffsetGesturePhaseObject = offsetof(::avmshell::GesturePhaseObject,m_slots_GesturePhaseObject);
	static void doGesturePhaseClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetHTMLUncaughtScriptExceptionEventClass = offsetof(::avmshell::HTMLUncaughtScriptExceptionEventClass, m_slots_HTMLUncaughtScriptExceptionEventClass);
	static const uint16_t s_slotsOffsetHTMLUncaughtScriptExceptionEventObject = offsetof(::avmshell::HTMLUncaughtScriptExceptionEventObject,m_slots_HTMLUncaughtScriptExceptionEventObject);
	static void doHTMLUncaughtScriptExceptionEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetInvokeEventReasonClass = offsetof(::avmshell::InvokeEventReasonClass, m_slots_InvokeEventReasonClass);
	static const uint16_t s_slotsOffsetInvokeEventReasonObject = offsetof(::avmshell::InvokeEventReasonObject,m_slots_InvokeEventReasonObject);
	static void doInvokeEventReasonClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}

	static const uint16_t s_slotsOffsetInvokeEventClass = offsetof(::avmshell::InvokeEventClass, m_slots_InvokeEventClass);
	static const uint16_t s_slotsOffsetInvokeEventObject = offsetof(::avmshell::InvokeEventObject,m_slots_InvokeEventObject);
	static void doInvokeEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetLocationChangeEventClass = offsetof(::avmshell::LocationChangeEventClass, m_slots_LocationChangeEventClass);
	static const uint16_t s_slotsOffsetLocationChangeEventObject = offsetof(::avmshell::LocationChangeEventObject,m_slots_LocationChangeEventObject);
	static void doLocationChangeEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetMediaEventClass = offsetof(::avmshell::MediaEventClass, m_slots_MediaEventClass);
	static const uint16_t s_slotsOffsetMediaEventObject = offsetof(::avmshell::MediaEventObject,m_slots_MediaEventObject);
	static void doMediaEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNativeDragEventClass = offsetof(::avmshell::NativeDragEventClass, m_slots_NativeDragEventClass);
	static const uint16_t s_slotsOffsetNativeDragEventObject = offsetof(::avmshell::NativeDragEventObject,m_slots_NativeDragEventObject);
	static void doNativeDragEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNetDataEventClass = offsetof(::avmshell::NetDataEventClass, m_slots_NetDataEventClass);
	static const uint16_t s_slotsOffsetNetDataEventObject = offsetof(::avmshell::NetDataEventObject,m_slots_NetDataEventObject);
	static void doNetDataEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetOutputProgressEventClass = offsetof(::avmshell::OutputProgressEventClass, m_slots_OutputProgressEventClass);
	static const uint16_t s_slotsOffsetOutputProgressEventObject = offsetof(::avmshell::OutputProgressEventObject,m_slots_OutputProgressEventObject);
	static void doOutputProgressEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}

	static const uint16_t s_slotsOffsetSoftKeyboardEventClass = offsetof(::avmshell::SoftKeyboardEventClass, m_slots_SoftKeyboardEventClass);
	static const uint16_t s_slotsOffsetSoftKeyboardEventObject = offsetof(::avmshell::SoftKeyboardEventObject,m_slots_SoftKeyboardEventObject);
	static void doSoftKeyboardEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSoftKeyboardTriggerClass = offsetof(::avmshell::SoftKeyboardTriggerClass, m_slots_SoftKeyboardTriggerClass);
	static const uint16_t s_slotsOffsetSoftKeyboardTriggerObject = offsetof(::avmshell::SoftKeyboardTriggerObject,m_slots_SoftKeyboardTriggerObject);
	static void doSoftKeyboardTriggerClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSQLEventClass = offsetof(::avmshell::SQLEventClass, m_slots_SQLEventClass);
	static const uint16_t s_slotsOffsetSQLEventObject = offsetof(::avmshell::SQLEventObject,m_slots_SQLEventObject);
	static void doSQLEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSQLUpdateEventClass = offsetof(::avmshell::SQLUpdateEventClass, m_slots_SQLUpdateEventClass);
	static const uint16_t s_slotsOffsetSQLUpdateEventObject = offsetof(::avmshell::SQLUpdateEventObject,m_slots_SQLUpdateEventObject);
	static void doSQLUpdateEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTouchEventClass = offsetof(::avmshell::TouchEventClass, m_slots_TouchEventClass);
	static const uint16_t s_slotsOffsetTouchEventObject = offsetof(::avmshell::TouchEventObject,m_slots_TouchEventObject);
	static void doTouchEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetUncaughtErrorEventsClass = offsetof(::avmshell::UncaughtErrorEventsClass, m_slots_UncaughtErrorEventsClass);
	static const uint16_t s_slotsOffsetUncaughtErrorEventsObject = offsetof(::avmshell::UncaughtErrorEventsObject,m_slots_UncaughtErrorEventsObject);
	static void doUncaughtErrorEventsClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetUncaughtErrorEventClass = offsetof(::avmshell::UncaughtErrorEventClass, m_slots_UncaughtErrorEventClass);
	static const uint16_t s_slotsOffsetUncaughtErrorEventObject = offsetof(::avmshell::UncaughtErrorEventObject,m_slots_UncaughtErrorEventObject);
	static void doUncaughtErrorEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetStageVideoEventClass = offsetof(::avmshell::StageVideoEventClass, m_slots_StageVideoEventClass);
	static const uint16_t s_slotsOffsetStageVideoEventObject = offsetof(::avmshell::StageVideoEventObject,m_slots_StageVideoEventObject);
	static void doStageVideoEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetVideoEventClass = offsetof(::avmshell::VideoEventClass, m_slots_VideoEventClass);
	static const uint16_t s_slotsOffsetVideoEventObject = offsetof(::avmshell::VideoEventObject,m_slots_VideoEventObject);
	static void doVideoEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetExtensionContextClass = offsetof(::avmshell::ExtensionContextClass, m_slots_ExtensionContextClass);
	static const uint16_t s_slotsOffsetExtensionContextObject = offsetof(::avmshell::ExtensionContextObject,m_slots_ExtensionContextObject);
	static void doExtensionContextClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetMatrix3DClass = offsetof(::avmshell::Matrix3DClass, m_slots_Matrix3DClass);
	static const uint16_t s_slotsOffsetMatrix3DObject = offsetof(::avmshell::Matrix3DObject,m_slots_Matrix3DObject);
	static void doMatrix3DClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetOrientation3DClass = offsetof(::avmshell::Orientation3DClass, m_slots_Orientation3DClass);
	static const uint16_t s_slotsOffsetOrientation3DObject = offsetof(::avmshell::Orientation3DObject,m_slots_Orientation3DObject);
	static void doOrientation3DClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetPerspectiveProjectionClass = offsetof(::avmshell::PerspectiveProjectionClass, m_slots_PerspectiveProjectionClass);
	static const uint16_t s_slotsOffsetPerspectiveProjectionObject = offsetof(::avmshell::PerspectiveProjectionObject,m_slots_PerspectiveProjectionObject);
	static void doPerspectiveProjectionClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetUtils3DClass = offsetof(::avmshell::Utils3DClass, m_slots_Utils3DClass);
	static const uint16_t s_slotsOffsetUtils3DObject = offsetof(::avmshell::Utils3DObject,m_slots_Utils3DObject);
	static void doUtils3DClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetVector3DClass = offsetof(::avmshell::Vector3DClass, m_slots_Vector3DClass);
	static const uint16_t s_slotsOffsetVector3DObject = offsetof(::avmshell::Vector3DObject,m_slots_Vector3DObject);
	static void doVector3DClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetCameraRollClass = offsetof(::avmshell::CameraRollClass, m_slots_CameraRollClass);
	static const uint16_t s_slotsOffsetCameraRollObject = offsetof(::avmshell::CameraRollObject,m_slots_CameraRollObject);
	static void doCameraRollClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetCameraUIClass = offsetof(::avmshell::CameraUIClass, m_slots_CameraUIClass);
	static const uint16_t s_slotsOffsetCameraUIObject = offsetof(::avmshell::CameraUIObject,m_slots_CameraUIObject);
	static void doCameraUIClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetMediaPromiseClass = offsetof(::avmshell::MediaPromiseClass, m_slots_MediaPromiseClass);
	static const uint16_t s_slotsOffsetMediaPromiseObject = offsetof(::avmshell::MediaPromiseObject,m_slots_MediaPromiseObject);
	static void doMediaPromiseClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetMediaTypeClass = offsetof(::avmshell::MediaTypeClass, m_slots_MediaTypeClass);
	static const uint16_t s_slotsOffsetMediaTypeObject = offsetof(::avmshell::MediaTypeObject,m_slots_MediaTypeObject);
	static void doMediaTypeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetMicrophoneEnhancedModeClass = offsetof(::avmshell::MicrophoneEnhancedModeClass, m_slots_MicrophoneEnhancedModeClass);
	static const uint16_t s_slotsOffsetMicrophoneEnhancedModeObject = offsetof(::avmshell::MicrophoneEnhancedModeObject,m_slots_MicrophoneEnhancedModeObject);
	static void doMicrophoneEnhancedModeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetMicrophoneEnhancedOptionsClass = offsetof(::avmshell::MicrophoneEnhancedOptionsClass, m_slots_MicrophoneEnhancedOptionsClass);
	static const uint16_t s_slotsOffsetMicrophoneEnhancedOptionsObject = offsetof(::avmshell::MicrophoneEnhancedOptionsObject,m_slots_MicrophoneEnhancedOptionsObject);
	static void doMicrophoneEnhancedOptionsClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSoundCodecClass = offsetof(::avmshell::SoundCodecClass, m_slots_SoundCodecClass);
	static const uint16_t s_slotsOffsetSoundCodecObject = offsetof(::avmshell::SoundCodecObject,m_slots_SoundCodecObject);
	static void doSoundCodecClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetStageVideoAvailabilityClass = offsetof(::avmshell::StageVideoAvailabilityClass, m_slots_StageVideoAvailabilityClass);
	static const uint16_t s_slotsOffsetStageVideoAvailabilityObject = offsetof(::avmshell::StageVideoAvailabilityObject,m_slots_StageVideoAvailabilityObject);
	static void doStageVideoAvailabilityClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetStageVideoAvailabilityEventClass = offsetof(::avmshell::StageVideoAvailabilityEventClass, m_slots_StageVideoAvailabilityEventClass);
	static const uint16_t s_slotsOffsetStageVideoAvailabilityEventObject = offsetof(::avmshell::StageVideoAvailabilityEventObject,m_slots_StageVideoAvailabilityEventObject);
	static void doStageVideoAvailabilityEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetStageVideoClass = offsetof(::avmshell::StageVideoClass, m_slots_StageVideoClass);
	static const uint16_t s_slotsOffsetStageVideoObject = offsetof(::avmshell::StageVideoObject,m_slots_StageVideoObject);
	static void doStageVideoClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetStageWebViewClass = offsetof(::avmshell::StageWebViewClass, m_slots_StageWebViewClass);
	static const uint16_t s_slotsOffsetStageWebViewObject = offsetof(::avmshell::StageWebViewObject,m_slots_StageWebViewObject);
	static void doStageWebViewClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetVideoStatusClass = offsetof(::avmshell::VideoStatusClass, m_slots_VideoStatusClass);
	static const uint16_t s_slotsOffsetVideoStatusObject = offsetof(::avmshell::VideoStatusObject,m_slots_VideoStatusObject);
	static void doVideoStatusClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDatagramSocketDataEventClass = offsetof(::avmshell::DatagramSocketDataEventClass, m_slots_DatagramSocketDataEventClass);
	static const uint16_t s_slotsOffsetDatagramSocketDataEventObject = offsetof(::avmshell::DatagramSocketDataEventObject,m_slots_DatagramSocketDataEventObject);
	static void doDatagramSocketDataEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDatagramSocketClass = offsetof(::avmshell::DatagramSocketClass, m_slots_DatagramSocketClass);
	static const uint16_t s_slotsOffsetDatagramSocketObject = offsetof(::avmshell::DatagramSocketObject,m_slots_DatagramSocketObject);
	static void doDatagramSocketClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetGroupSpecifierClass = offsetof(::avmshell::GroupSpecifierClass, m_slots_GroupSpecifierClass);
	static const uint16_t s_slotsOffsetGroupSpecifierObject = offsetof(::avmshell::GroupSpecifierObject,m_slots_GroupSpecifierObject);
	static void doGroupSpecifierClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetInterfaceAddressClass = offsetof(::avmshell::InterfaceAddressClass, m_slots_InterfaceAddressClass);
	static const uint16_t s_slotsOffsetInterfaceAddressObject = offsetof(::avmshell::InterfaceAddressObject,m_slots_InterfaceAddressObject);
	static void doInterfaceAddressClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetIPVersionClass = offsetof(::avmshell::IPVersionClass, m_slots_IPVersionClass);
	static const uint16_t s_slotsOffsetIPVersionObject = offsetof(::avmshell::IPVersionObject,m_slots_IPVersionObject);
	static void doIPVersionClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNetGroupInfoClass = offsetof(::avmshell::NetGroupInfoClass, m_slots_NetGroupInfoClass);
	static const uint16_t s_slotsOffsetNetGroupInfoObject = offsetof(::avmshell::NetGroupInfoObject,m_slots_NetGroupInfoObject);
	static void doNetGroupInfoClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNetGroupReceiveModeClass = offsetof(::avmshell::NetGroupReceiveModeClass, m_slots_NetGroupReceiveModeClass);
	static const uint16_t s_slotsOffsetNetGroupReceiveModeObject = offsetof(::avmshell::NetGroupReceiveModeObject,m_slots_NetGroupReceiveModeObject);
	static void doNetGroupReceiveModeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNetGroupReplicationStrategyClass = offsetof(::avmshell::NetGroupReplicationStrategyClass, m_slots_NetGroupReplicationStrategyClass);
	static const uint16_t s_slotsOffsetNetGroupReplicationStrategyObject = offsetof(::avmshell::NetGroupReplicationStrategyObject,m_slots_NetGroupReplicationStrategyObject);
	static void doNetGroupReplicationStrategyClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNetGroupSendModeClass = offsetof(::avmshell::NetGroupSendModeClass, m_slots_NetGroupSendModeClass);
	static const uint16_t s_slotsOffsetNetGroupSendModeObject = offsetof(::avmshell::NetGroupSendModeObject,m_slots_NetGroupSendModeObject);
	static void doNetGroupSendModeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNetGroupSendResultClass = offsetof(::avmshell::NetGroupSendResultClass, m_slots_NetGroupSendResultClass);
	static const uint16_t s_slotsOffsetNetGroupSendResultObject = offsetof(::avmshell::NetGroupSendResultObject,m_slots_NetGroupSendResultObject);
	static void doNetGroupSendResultClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNetGroupClass = offsetof(::avmshell::NetGroupClass, m_slots_NetGroupClass);
	static const uint16_t s_slotsOffsetNetGroupObject = offsetof(::avmshell::NetGroupObject,m_slots_NetGroupObject);
	static void doNetGroupClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNetMonitorEventClass = offsetof(::avmshell::NetMonitorEventClass, m_slots_NetMonitorEventClass);
	static const uint16_t s_slotsOffsetNetMonitorEventObject = offsetof(::avmshell::NetMonitorEventObject,m_slots_NetMonitorEventObject);
	static void doNetMonitorEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNetMonitorClass = offsetof(::avmshell::NetMonitorClass, m_slots_NetMonitorClass);
	static const uint16_t s_slotsOffsetNetMonitorObject = offsetof(::avmshell::NetMonitorObject,m_slots_NetMonitorObject);
	static void doNetMonitorClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNetStreamAppendBytesActionClass = offsetof(::avmshell::NetStreamAppendBytesActionClass, m_slots_NetStreamAppendBytesActionClass);
	static const uint16_t s_slotsOffsetNetStreamAppendBytesActionObject = offsetof(::avmshell::NetStreamAppendBytesActionObject,m_slots_NetStreamAppendBytesActionObject);
	static void doNetStreamAppendBytesActionClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNetStreamInfoClass = offsetof(::avmshell::NetStreamInfoClass, m_slots_NetStreamInfoClass);
	static const uint16_t s_slotsOffsetNetStreamInfoObject = offsetof(::avmshell::NetStreamInfoObject,m_slots_NetStreamInfoObject);
	static void doNetStreamInfoClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNetStreamMulticastInfoClass = offsetof(::avmshell::NetStreamMulticastInfoClass, m_slots_NetStreamMulticastInfoClass);
	static const uint16_t s_slotsOffsetNetStreamMulticastInfoObject = offsetof(::avmshell::NetStreamMulticastInfoObject,m_slots_NetStreamMulticastInfoObject);
	static void doNetStreamMulticastInfoClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNetStreamPlayTransitionsClass = offsetof(::avmshell::NetStreamPlayTransitionsClass, m_slots_NetStreamPlayTransitionsClass);
	static const uint16_t s_slotsOffsetNetStreamPlayTransitionsObject = offsetof(::avmshell::NetStreamPlayTransitionsObject,m_slots_NetStreamPlayTransitionsObject);
	static void doNetStreamPlayTransitionsClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNetStreamPlayOptionsClass = offsetof(::avmshell::NetStreamPlayOptionsClass, m_slots_NetStreamPlayOptionsClass);
	static const uint16_t s_slotsOffsetNetStreamPlayOptionsObject = offsetof(::avmshell::NetStreamPlayOptionsObject,m_slots_NetStreamPlayOptionsObject);
	static void doNetStreamPlayOptionsClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNetworkInfoClass = offsetof(::avmshell::NetworkInfoClass, m_slots_NetworkInfoClass);
	static const uint16_t s_slotsOffsetNetworkInfoObject = offsetof(::avmshell::NetworkInfoObject,m_slots_NetworkInfoObject);
	static void doNetworkInfoClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNetworkInterfaceClass = offsetof(::avmshell::NetworkInterfaceClass, m_slots_NetworkInterfaceClass);
	static const uint16_t s_slotsOffsetNetworkInterfaceObject = offsetof(::avmshell::NetworkInterfaceObject,m_slots_NetworkInterfaceObject);
	static void doNetworkInterfaceClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSecureSocketClass = offsetof(::avmshell::SecureSocketClass, m_slots_SecureSocketClass);
	static const uint16_t s_slotsOffsetSecureSocketObject = offsetof(::avmshell::SecureSocketObject,m_slots_SecureSocketObject);
	static void doSecureSocketClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetServerSocketConnectEventClass = offsetof(::avmshell::ServerSocketConnectEventClass, m_slots_ServerSocketConnectEventClass);
	static const uint16_t s_slotsOffsetServerSocketConnectEventObject = offsetof(::avmshell::ServerSocketConnectEventObject,m_slots_ServerSocketConnectEventObject);
	static void doServerSocketConnectEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetServerSocketClass = offsetof(::avmshell::ServerSocketClass, m_slots_ServerSocketClass);
	static const uint16_t s_slotsOffsetServerSocketObject = offsetof(::avmshell::ServerSocketObject,m_slots_ServerSocketObject);
	static void doServerSocketClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetURLRequestDefaultsClass = offsetof(::avmshell::URLRequestDefaultsClass, m_slots_URLRequestDefaultsClass);
	static const uint16_t s_slotsOffsetURLRequestDefaultsObject = offsetof(::avmshell::URLRequestDefaultsObject,m_slots_URLRequestDefaultsObject);
	static void doURLRequestDefaultsClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetPaperSizeClass = offsetof(::avmshell::PaperSizeClass, m_slots_PaperSizeClass);
	static const uint16_t s_slotsOffsetPaperSizeObject = offsetof(::avmshell::PaperSizeObject,m_slots_PaperSizeObject);
	static void doPaperSizeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetPrintMethodClass = offsetof(::avmshell::PrintMethodClass, m_slots_PrintMethodClass);
	static const uint16_t s_slotsOffsetPrintMethodObject = offsetof(::avmshell::PrintMethodObject,m_slots_PrintMethodObject);
	static void doPrintMethodClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetPrintUIOptionsClass = offsetof(::avmshell::PrintUIOptionsClass, m_slots_PrintUIOptionsClass);
	static const uint16_t s_slotsOffsetPrintUIOptionsObject = offsetof(::avmshell::PrintUIOptionsObject,m_slots_PrintUIOptionsObject);
	static void doPrintUIOptionsClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetImageDecodingPolicyClass = offsetof(::avmshell::ImageDecodingPolicyClass, m_slots_ImageDecodingPolicyClass);
	static const uint16_t s_slotsOffsetImageDecodingPolicyObject = offsetof(::avmshell::ImageDecodingPolicyObject,m_slots_ImageDecodingPolicyObject);
	static void doImageDecodingPolicyClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetJPEGLoaderContextClass = offsetof(::avmshell::JPEGLoaderContextClass, m_slots_JPEGLoaderContextClass);
	static const uint16_t s_slotsOffsetJPEGLoaderContextObject = offsetof(::avmshell::JPEGLoaderContextObject,m_slots_JPEGLoaderContextObject);
	static void doJPEGLoaderContextClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTouchscreenTypeClass = offsetof(::avmshell::TouchscreenTypeClass, m_slots_TouchscreenTypeClass);
	static const uint16_t s_slotsOffsetTouchscreenTypeObject = offsetof(::avmshell::TouchscreenTypeObject,m_slots_TouchscreenTypeObject);
	static void doTouchscreenTypeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTextExtentClass = offsetof(::avmshell::TextExtentClass, m_slots_TextExtentClass);
	static const uint16_t s_slotsOffsetTextExtentObject = offsetof(::avmshell::TextExtentObject,m_slots_TextExtentObject);
	static void doTextExtentClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTextInteractionModeClass = offsetof(::avmshell::TextInteractionModeClass, m_slots_TextInteractionModeClass);
	static const uint16_t s_slotsOffsetTextInteractionModeObject = offsetof(::avmshell::TextInteractionModeObject,m_slots_TextInteractionModeObject);
	static void doTextInteractionModeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetKeyboardTypeClass = offsetof(::avmshell::KeyboardTypeClass, m_slots_KeyboardTypeClass);
	static const uint16_t s_slotsOffsetKeyboardTypeObject = offsetof(::avmshell::KeyboardTypeObject,m_slots_KeyboardTypeObject);
	static void doKeyboardTypeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetMouseCursorClass = offsetof(::avmshell::MouseCursorClass, m_slots_MouseCursorClass);
	static const uint16_t s_slotsOffsetMouseCursorObject = offsetof(::avmshell::MouseCursorObject,m_slots_MouseCursorObject);
	static void doMouseCursorClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetMouseCursorDataClass = offsetof(::avmshell::MouseCursorDataClass, m_slots_MouseCursorDataClass);
	static const uint16_t s_slotsOffsetMouseCursorDataObject = offsetof(::avmshell::MouseCursorDataObject,m_slots_MouseCursorDataObject);
	static void doMouseCursorDataClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetMultitouchClass = offsetof(::avmshell::MultitouchClass, m_slots_MultitouchClass);
	static const uint16_t s_slotsOffsetMultitouchObject = offsetof(::avmshell::MultitouchObject,m_slots_MultitouchObject);
	static void doMultitouchClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetMultitouchInputModeClass = offsetof(::avmshell::MultitouchInputModeClass, m_slots_MultitouchInputModeClass);
	static const uint16_t s_slotsOffsetMultitouchInputModeObject = offsetof(::avmshell::MultitouchInputModeObject,m_slots_MultitouchInputModeObject);
	static void doMultitouchInputModeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetCompressionAlgorithmClass = offsetof(::avmshell::CompressionAlgorithmClass, m_slots_CompressionAlgorithmClass);
	static const uint16_t s_slotsOffsetCompressionAlgorithmObject = offsetof(::avmshell::CompressionAlgorithmObject,m_slots_CompressionAlgorithmObject);
	static void doCompressionAlgorithmClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetClipboardClass = offsetof(::avmshell::ClipboardClass, m_slots_ClipboardClass);
	static const uint16_t s_slotsOffsetClipboardObject = offsetof(::avmshell::ClipboardObject,m_slots_ClipboardObject);
	static void doClipboardClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetClipboardFormatsClass = offsetof(::avmshell::ClipboardFormatsClass, m_slots_ClipboardFormatsClass);
	static const uint16_t s_slotsOffsetClipboardFormatsObject = offsetof(::avmshell::ClipboardFormatsObject,m_slots_ClipboardFormatsObject);
	static void doClipboardFormatsClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetClipboardTransferModeClass = offsetof(::avmshell::ClipboardTransferModeClass, m_slots_ClipboardTransferModeClass);
	static const uint16_t s_slotsOffsetClipboardTransferModeObject = offsetof(::avmshell::ClipboardTransferModeObject,m_slots_ClipboardTransferModeObject);
	static void doClipboardTransferModeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetContextMenuClipboardItemsClass = offsetof(::avmshell::ContextMenuClipboardItemsClass, m_slots_ContextMenuClipboardItemsClass);
	static const uint16_t s_slotsOffsetContextMenuClipboardItemsObject = offsetof(::avmshell::ContextMenuClipboardItemsObject,m_slots_ContextMenuClipboardItemsObject);
	static void doContextMenuClipboardItemsClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetIconClass = offsetof(::avmshell::IconClass, m_slots_IconClass);
	static const uint16_t s_slotsOffsetIconObject = offsetof(::avmshell::IconObject,m_slots_IconObject);
	static void doIconClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetInteractiveIconClass = offsetof(::avmshell::InteractiveIconClass, m_slots_InteractiveIconClass);
	static const uint16_t s_slotsOffsetInteractiveIconObject = offsetof(::avmshell::InteractiveIconObject,m_slots_InteractiveIconObject);
	static void doInteractiveIconClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDockIconClass = offsetof(::avmshell::DockIconClass, m_slots_DockIconClass);
	static const uint16_t s_slotsOffsetDockIconObject = offsetof(::avmshell::DockIconObject,m_slots_DockIconObject);
	static void doDockIconClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSystemTrayIconClass = offsetof(::avmshell::SystemTrayIconClass, m_slots_SystemTrayIconClass);
	static const uint16_t s_slotsOffsetSystemTrayIconObject = offsetof(::avmshell::SystemTrayIconObject,m_slots_SystemTrayIconObject);
	static void doSystemTrayIconClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNativeApplicationClass = offsetof(::avmshell::NativeApplicationClass, m_slots_NativeApplicationClass);
	static const uint16_t s_slotsOffsetNativeApplicationObject = offsetof(::avmshell::NativeApplicationObject,m_slots_NativeApplicationObject);
	static void doNativeApplicationClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNativeDragActionsClass = offsetof(::avmshell::NativeDragActionsClass, m_slots_NativeDragActionsClass);
	static const uint16_t s_slotsOffsetNativeDragActionsObject = offsetof(::avmshell::NativeDragActionsObject,m_slots_NativeDragActionsObject);
	static void doNativeDragActionsClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNativeDragManagerClass = offsetof(::avmshell::NativeDragManagerClass, m_slots_NativeDragManagerClass);
	static const uint16_t s_slotsOffsetNativeDragManagerObject = offsetof(::avmshell::NativeDragManagerObject,m_slots_NativeDragManagerObject);
	static void doNativeDragManagerClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNativeDragOptionsClass = offsetof(::avmshell::NativeDragOptionsClass, m_slots_NativeDragOptionsClass);
	static const uint16_t s_slotsOffsetNativeDragOptionsObject = offsetof(::avmshell::NativeDragOptionsObject,m_slots_NativeDragOptionsObject);
	static void doNativeDragOptionsClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNativeProcessStartupInfoClass = offsetof(::avmshell::NativeProcessStartupInfoClass, m_slots_NativeProcessStartupInfoClass);
	static const uint16_t s_slotsOffsetNativeProcessStartupInfoObject = offsetof(::avmshell::NativeProcessStartupInfoObject,m_slots_NativeProcessStartupInfoObject);
	static void doNativeProcessStartupInfoClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNativeProcessExitEventClass = offsetof(::avmshell::NativeProcessExitEventClass, m_slots_NativeProcessExitEventClass);
	static const uint16_t s_slotsOffsetNativeProcessExitEventObject = offsetof(::avmshell::NativeProcessExitEventObject,m_slots_NativeProcessExitEventObject);
	static void doNativeProcessExitEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNativeProcessClass = offsetof(::avmshell::NativeProcessClass, m_slots_NativeProcessClass);
	static const uint16_t s_slotsOffsetNativeProcessObject = offsetof(::avmshell::NativeProcessObject,m_slots_NativeProcessObject);
	static void doNativeProcessClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNotificationTypeClass = offsetof(::avmshell::NotificationTypeClass, m_slots_NotificationTypeClass);
	static const uint16_t s_slotsOffsetNotificationTypeObject = offsetof(::avmshell::NotificationTypeObject,m_slots_NotificationTypeObject);
	static void doNotificationTypeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSystemIdleModeClass = offsetof(::avmshell::SystemIdleModeClass, m_slots_SystemIdleModeClass);
	static const uint16_t s_slotsOffsetSystemIdleModeObject = offsetof(::avmshell::SystemIdleModeObject,m_slots_SystemIdleModeObject);
	static void doSystemIdleModeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSystemUpdaterTypeClass = offsetof(::avmshell::SystemUpdaterTypeClass, m_slots_SystemUpdaterTypeClass);
	static const uint16_t s_slotsOffsetSystemUpdaterTypeObject = offsetof(::avmshell::SystemUpdaterTypeObject,m_slots_SystemUpdaterTypeObject);
	static void doSystemUpdaterTypeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetUpdaterClass = offsetof(::avmshell::UpdaterClass, m_slots_UpdaterClass);
	static const uint16_t s_slotsOffsetUpdaterObject = offsetof(::avmshell::UpdaterObject,m_slots_UpdaterObject);
	static void doUpdaterClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSystemUpdaterClass = offsetof(::avmshell::SystemUpdaterClass, m_slots_SystemUpdaterClass);
	static const uint16_t s_slotsOffsetSystemUpdaterObject = offsetof(::avmshell::SystemUpdaterObject,m_slots_SystemUpdaterObject);
	static void doSystemUpdaterClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetFileModeClass = offsetof(::avmshell::FileModeClass, m_slots_FileModeClass);
	static const uint16_t s_slotsOffsetFileModeObject = offsetof(::avmshell::FileModeObject,m_slots_FileModeObject);
	static void doFileModeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetFileListEventClass = offsetof(::avmshell::FileListEventClass, m_slots_FileListEventClass);
	static const uint16_t s_slotsOffsetFileListEventObject = offsetof(::avmshell::FileListEventObject,m_slots_FileListEventObject);
	static void doFileListEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetFileStreamClass = offsetof(::avmshell::FileStreamClass, m_slots_FileStreamClass);
	static const uint16_t s_slotsOffsetFileStreamObject = offsetof(::avmshell::FileStreamObject,m_slots_FileStreamObject);
	static void doFileStreamClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetFileClass = offsetof(::avmshell::FileClass, m_slots_FileClass);
	static const uint16_t s_slotsOffsetFileObject = offsetof(::avmshell::FileObject,m_slots_FileObject);
	static void doFileClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetStorageVolumeClass = offsetof(::avmshell::StorageVolumeClass, m_slots_StorageVolumeClass);
	static const uint16_t s_slotsOffsetStorageVolumeObject = offsetof(::avmshell::StorageVolumeObject,m_slots_StorageVolumeObject);
	static void doStorageVolumeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetStorageVolumeChangeEventClass = offsetof(::avmshell::StorageVolumeChangeEventClass, m_slots_StorageVolumeChangeEventClass);
	static const uint16_t s_slotsOffsetStorageVolumeChangeEventObject = offsetof(::avmshell::StorageVolumeChangeEventObject,m_slots_StorageVolumeChangeEventObject);
	static void doStorageVolumeChangeEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetStorageVolumeInfoClass = offsetof(::avmshell::StorageVolumeInfoClass, m_slots_StorageVolumeInfoClass);
	static const uint16_t s_slotsOffsetStorageVolumeInfoObject = offsetof(::avmshell::StorageVolumeInfoObject,m_slots_StorageVolumeInfoObject);
	static void doStorageVolumeInfoClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetCollatorClass = offsetof(::avmshell::CollatorClass, m_slots_CollatorClass);
	static const uint16_t s_slotsOffsetCollatorObject = offsetof(::avmshell::CollatorObject,m_slots_CollatorObject);
	static void doCollatorClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetCollatorModeClass = offsetof(::avmshell::CollatorModeClass, m_slots_CollatorModeClass);
	static const uint16_t s_slotsOffsetCollatorModeObject = offsetof(::avmshell::CollatorModeObject,m_slots_CollatorModeObject);
	static void doCollatorModeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetCurrencyFormatterClass = offsetof(::avmshell::CurrencyFormatterClass, m_slots_CurrencyFormatterClass);
	static const uint16_t s_slotsOffsetCurrencyFormatterObject = offsetof(::avmshell::CurrencyFormatterObject,m_slots_CurrencyFormatterObject);
	static void doCurrencyFormatterClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetCurrencyParseResultClass = offsetof(::avmshell::CurrencyParseResultClass, m_slots_CurrencyParseResultClass);
	static const uint16_t s_slotsOffsetCurrencyParseResultObject = offsetof(::avmshell::CurrencyParseResultObject,m_slots_CurrencyParseResultObject);
	static void doCurrencyParseResultClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDateTimeFormatterClass = offsetof(::avmshell::DateTimeFormatterClass, m_slots_DateTimeFormatterClass);
	static const uint16_t s_slotsOffsetDateTimeFormatterObject = offsetof(::avmshell::DateTimeFormatterObject,m_slots_DateTimeFormatterObject);
	static void doDateTimeFormatterClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDateTimeNameContextClass = offsetof(::avmshell::DateTimeNameContextClass, m_slots_DateTimeNameContextClass);
	static const uint16_t s_slotsOffsetDateTimeNameContextObject = offsetof(::avmshell::DateTimeNameContextObject,m_slots_DateTimeNameContextObject);
	static void doDateTimeNameContextClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDateTimeNameStyleClass = offsetof(::avmshell::DateTimeNameStyleClass, m_slots_DateTimeNameStyleClass);
	static const uint16_t s_slotsOffsetDateTimeNameStyleObject = offsetof(::avmshell::DateTimeNameStyleObject,m_slots_DateTimeNameStyleObject);
	static void doDateTimeNameStyleClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDateTimeStyleClass = offsetof(::avmshell::DateTimeStyleClass, m_slots_DateTimeStyleClass);
	static const uint16_t s_slotsOffsetDateTimeStyleObject = offsetof(::avmshell::DateTimeStyleObject,m_slots_DateTimeStyleObject);
	static void doDateTimeStyleClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetLastOperationStatusClass = offsetof(::avmshell::LastOperationStatusClass, m_slots_LastOperationStatusClass);
	static const uint16_t s_slotsOffsetLastOperationStatusObject = offsetof(::avmshell::LastOperationStatusObject,m_slots_LastOperationStatusObject);
	static void doLastOperationStatusClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetLocaleIDClass = offsetof(::avmshell::LocaleIDClass, m_slots_LocaleIDClass);
	static const uint16_t s_slotsOffsetLocaleIDObject = offsetof(::avmshell::LocaleIDObject,m_slots_LocaleIDObject);
	static void doLocaleIDClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNationalDigitsTypeClass = offsetof(::avmshell::NationalDigitsTypeClass, m_slots_NationalDigitsTypeClass);
	static const uint16_t s_slotsOffsetNationalDigitsTypeObject = offsetof(::avmshell::NationalDigitsTypeObject,m_slots_NationalDigitsTypeObject);
	static void doNationalDigitsTypeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNumberFormatterClass = offsetof(::avmshell::NumberFormatterClass, m_slots_NumberFormatterClass);
	static const uint16_t s_slotsOffsetNumberFormatterObject = offsetof(::avmshell::NumberFormatterObject,m_slots_NumberFormatterObject);
	static void doNumberFormatterClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNumberParseResultClass = offsetof(::avmshell::NumberParseResultClass, m_slots_NumberParseResultClass);
	static const uint16_t s_slotsOffsetNumberParseResultObject = offsetof(::avmshell::NumberParseResultObject,m_slots_NumberParseResultObject);
	static void doNumberParseResultClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetStringToolsClass = offsetof(::avmshell::StringToolsClass, m_slots_StringToolsClass);
	static const uint16_t s_slotsOffsetStringToolsObject = offsetof(::avmshell::StringToolsObject,m_slots_StringToolsObject);
	static void doStringToolsClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetAuthenticationMethodClass = offsetof(::avmshell::AuthenticationMethodClass, m_slots_AuthenticationMethodClass);
	static const uint16_t s_slotsOffsetAuthenticationMethodObject = offsetof(::avmshell::AuthenticationMethodObject,m_slots_AuthenticationMethodObject);
	static void doAuthenticationMethodClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDRMContentDataClass = offsetof(::avmshell::DRMContentDataClass, m_slots_DRMContentDataClass);
	static const uint16_t s_slotsOffsetDRMContentDataObject = offsetof(::avmshell::DRMContentDataObject,m_slots_DRMContentDataObject);
	static void doDRMContentDataClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDRMManagerErrorClass = offsetof(::avmshell::DRMManagerErrorClass, m_slots_DRMManagerErrorClass);
	static const uint16_t s_slotsOffsetDRMManagerErrorObject = offsetof(::avmshell::DRMManagerErrorObject,m_slots_DRMManagerErrorObject);
	static void doDRMManagerErrorClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDRMManagerClass = offsetof(::avmshell::DRMManagerClass, m_slots_DRMManagerClass);
	static const uint16_t s_slotsOffsetDRMManagerObject = offsetof(::avmshell::DRMManagerObject,m_slots_DRMManagerObject);
	static void doDRMManagerClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDRMPlaybackTimeWindowClass = offsetof(::avmshell::DRMPlaybackTimeWindowClass, m_slots_DRMPlaybackTimeWindowClass);
	static const uint16_t s_slotsOffsetDRMPlaybackTimeWindowObject = offsetof(::avmshell::DRMPlaybackTimeWindowObject,m_slots_DRMPlaybackTimeWindowObject);
	static void doDRMPlaybackTimeWindowClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDRMVoucherClass = offsetof(::avmshell::DRMVoucherClass, m_slots_DRMVoucherClass);
	static const uint16_t s_slotsOffsetDRMVoucherObject = offsetof(::avmshell::DRMVoucherObject,m_slots_DRMVoucherObject);
	static void doDRMVoucherClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetLoadVoucherSettingClass = offsetof(::avmshell::LoadVoucherSettingClass, m_slots_LoadVoucherSettingClass);
	static const uint16_t s_slotsOffsetLoadVoucherSettingObject = offsetof(::avmshell::LoadVoucherSettingObject,m_slots_LoadVoucherSettingObject);
	static void doLoadVoucherSettingClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetVoucherAccessInfoClass = offsetof(::avmshell::VoucherAccessInfoClass, m_slots_VoucherAccessInfoClass);
	static const uint16_t s_slotsOffsetVoucherAccessInfoObject = offsetof(::avmshell::VoucherAccessInfoObject,m_slots_VoucherAccessInfoObject);
	static void doVoucherAccessInfoClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSampleClass = offsetof(::avmshell::SampleClass, m_slots_SampleClass);
	static const uint16_t s_slotsOffsetSampleObject = offsetof(::avmshell::SampleObject,m_slots_SampleObject);
	static void doSampleClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	//static const uint16_t s_slotsOffsetSampleDataEventClass = offsetof(::avmshell::SampleDataEventClass, m_slots_SampleDataEventClass);
	//static const uint16_t s_slotsOffsetSampleDataEventObject = offsetof(::avmshell::SampleDataEventObject,m_slots_SampleDataEventObject);
	//static void doSampleDataEventClassAsserts(Traits* cTraits, Traits* iTraits)
	//{
	//	(void)cTraits; (void)iTraits;
	//}
	static const uint16_t s_slotsOffsetDeleteObjectSampleClass = offsetof(::avmshell::DeleteObjectSampleClass, m_slots_DeleteObjectSampleClass);
	static const uint16_t s_slotsOffsetDeleteObjectSampleObject = offsetof(::avmshell::DeleteObjectSampleObject,m_slots_DeleteObjectSampleObject);
	static void doDeleteObjectSampleClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetNewObjectSampleClass = offsetof(::avmshell::NewObjectSampleClass, m_slots_NewObjectSampleClass);
	static const uint16_t s_slotsOffsetNewObjectSampleObject = offsetof(::avmshell::NewObjectSampleObject,m_slots_NewObjectSampleObject);
	static void doNewObjectSampleClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetStackFrameClass = offsetof(::avmshell::StackFrameClass, m_slots_StackFrameClass);
	static const uint16_t s_slotsOffsetStackFrameObject = offsetof(::avmshell::StackFrameObject,m_slots_StackFrameObject);
	static void doStackFrameClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetAccelerometerEventClass = offsetof(::avmshell::AccelerometerEventClass, m_slots_AccelerometerEventClass);
	static const uint16_t s_slotsOffsetAccelerometerEventObject = offsetof(::avmshell::AccelerometerEventObject,m_slots_AccelerometerEventObject);
	static void doAccelerometerEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetAccelerometerClass = offsetof(::avmshell::AccelerometerClass, m_slots_AccelerometerClass);
	static const uint16_t s_slotsOffsetAccelerometerObject = offsetof(::avmshell::AccelerometerObject,m_slots_AccelerometerObject);
	static void doAccelerometerClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetGeolocationEventClass = offsetof(::avmshell::GeolocationEventClass, m_slots_GeolocationEventClass);
	static const uint16_t s_slotsOffsetGeolocationEventObject = offsetof(::avmshell::GeolocationEventObject,m_slots_GeolocationEventObject);
	static void doGeolocationEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetGeolocationClass = offsetof(::avmshell::GeolocationClass, m_slots_GeolocationClass);
	static const uint16_t s_slotsOffsetGeolocationObject = offsetof(::avmshell::GeolocationObject,m_slots_GeolocationObject);
	static void doGeolocationClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetBreakOpportunityClass = offsetof(::avmshell::BreakOpportunityClass, m_slots_BreakOpportunityClass);
	static const uint16_t s_slotsOffsetBreakOpportunityObject = offsetof(::avmshell::BreakOpportunityObject,m_slots_BreakOpportunityObject);
	static void doBreakOpportunityClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetCFFHintingClass = offsetof(::avmshell::CFFHintingClass, m_slots_CFFHintingClass);
	static const uint16_t s_slotsOffsetCFFHintingObject = offsetof(::avmshell::CFFHintingObject,m_slots_CFFHintingObject);
	static void doCFFHintingClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetContentElementClass = offsetof(::avmshell::ContentElementClass, m_slots_ContentElementClass);
	static const uint16_t s_slotsOffsetContentElementObject = offsetof(::avmshell::ContentElementObject,m_slots_ContentElementObject);
	static void doContentElementClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDigitCaseClass = offsetof(::avmshell::DigitCaseClass, m_slots_DigitCaseClass);
	static const uint16_t s_slotsOffsetDigitCaseObject = offsetof(::avmshell::DigitCaseObject,m_slots_DigitCaseObject);
	static void doDigitCaseClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDigitWidthClass = offsetof(::avmshell::DigitWidthClass, m_slots_DigitWidthClass);
	static const uint16_t s_slotsOffsetDigitWidthObject = offsetof(::avmshell::DigitWidthObject,m_slots_DigitWidthObject);
	static void doDigitWidthClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetEastAsianJustifierClass = offsetof(::avmshell::EastAsianJustifierClass, m_slots_EastAsianJustifierClass);
	static const uint16_t s_slotsOffsetEastAsianJustifierObject = offsetof(::avmshell::EastAsianJustifierObject,m_slots_EastAsianJustifierObject);
	static void doEastAsianJustifierClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetElementFormatClass = offsetof(::avmshell::ElementFormatClass, m_slots_ElementFormatClass);
	static const uint16_t s_slotsOffsetElementFormatObject = offsetof(::avmshell::ElementFormatObject,m_slots_ElementFormatObject);
	static void doElementFormatClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetFontDescriptionClass = offsetof(::avmshell::FontDescriptionClass, m_slots_FontDescriptionClass);
	static const uint16_t s_slotsOffsetFontDescriptionObject = offsetof(::avmshell::FontDescriptionObject,m_slots_FontDescriptionObject);
	static void doFontDescriptionClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetFontLookupClass = offsetof(::avmshell::FontLookupClass, m_slots_FontLookupClass);
	static const uint16_t s_slotsOffsetFontLookupObject = offsetof(::avmshell::FontLookupObject,m_slots_FontLookupObject);
	static void doFontLookupClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetFontMetricsClass = offsetof(::avmshell::FontMetricsClass, m_slots_FontMetricsClass);
	static const uint16_t s_slotsOffsetFontMetricsObject = offsetof(::avmshell::FontMetricsObject,m_slots_FontMetricsObject);
	static void doFontMetricsClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetFontPostureClass = offsetof(::avmshell::FontPostureClass, m_slots_FontPostureClass);
	static const uint16_t s_slotsOffsetFontPostureObject = offsetof(::avmshell::FontPostureObject,m_slots_FontPostureObject);
	static void doFontPostureClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetFontWeightClass = offsetof(::avmshell::FontWeightClass, m_slots_FontWeightClass);
	static const uint16_t s_slotsOffsetFontWeightObject = offsetof(::avmshell::FontWeightObject,m_slots_FontWeightObject);
	static void doFontWeightClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetGraphicElementClass = offsetof(::avmshell::GraphicElementClass, m_slots_GraphicElementClass);
	static const uint16_t s_slotsOffsetGraphicElementObject = offsetof(::avmshell::GraphicElementObject,m_slots_GraphicElementObject);
	static void doGraphicElementClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetGroupElementClass = offsetof(::avmshell::GroupElementClass, m_slots_GroupElementClass);
	static const uint16_t s_slotsOffsetGroupElementObject = offsetof(::avmshell::GroupElementObject,m_slots_GroupElementObject);
	static void doGroupElementClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetJustificationStyleClass = offsetof(::avmshell::JustificationStyleClass, m_slots_JustificationStyleClass);
	static const uint16_t s_slotsOffsetJustificationStyleObject = offsetof(::avmshell::JustificationStyleObject,m_slots_JustificationStyleObject);
	static void doJustificationStyleClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetKerningClass = offsetof(::avmshell::KerningClass, m_slots_KerningClass);
	static const uint16_t s_slotsOffsetKerningObject = offsetof(::avmshell::KerningObject,m_slots_KerningObject);
	static void doKerningClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetLigatureLevelClass = offsetof(::avmshell::LigatureLevelClass, m_slots_LigatureLevelClass);
	static const uint16_t s_slotsOffsetLigatureLevelObject = offsetof(::avmshell::LigatureLevelObject,m_slots_LigatureLevelObject);
	static void doLigatureLevelClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetLineJustificationClass = offsetof(::avmshell::LineJustificationClass, m_slots_LineJustificationClass);
	static const uint16_t s_slotsOffsetLineJustificationObject = offsetof(::avmshell::LineJustificationObject,m_slots_LineJustificationObject);
	static void doLineJustificationClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetRenderingModeClass = offsetof(::avmshell::RenderingModeClass, m_slots_RenderingModeClass);
	static const uint16_t s_slotsOffsetRenderingModeObject = offsetof(::avmshell::RenderingModeObject,m_slots_RenderingModeObject);
	static void doRenderingModeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSpaceJustifierClass = offsetof(::avmshell::SpaceJustifierClass, m_slots_SpaceJustifierClass);
	static const uint16_t s_slotsOffsetSpaceJustifierObject = offsetof(::avmshell::SpaceJustifierObject,m_slots_SpaceJustifierObject);
	static void doSpaceJustifierClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTabAlignmentClass = offsetof(::avmshell::TabAlignmentClass, m_slots_TabAlignmentClass);
	static const uint16_t s_slotsOffsetTabAlignmentObject = offsetof(::avmshell::TabAlignmentObject,m_slots_TabAlignmentObject);
	static void doTabAlignmentClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTabStopClass = offsetof(::avmshell::TabStopClass, m_slots_TabStopClass);
	static const uint16_t s_slotsOffsetTabStopObject = offsetof(::avmshell::TabStopObject,m_slots_TabStopObject);
	static void doTabStopClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTextBaselineClass = offsetof(::avmshell::TextBaselineClass, m_slots_TextBaselineClass);
	static const uint16_t s_slotsOffsetTextBaselineObject = offsetof(::avmshell::TextBaselineObject,m_slots_TextBaselineObject);
	static void doTextBaselineClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTextBlockClass = offsetof(::avmshell::TextBlockClass, m_slots_TextBlockClass);
	static const uint16_t s_slotsOffsetTextBlockObject = offsetof(::avmshell::TextBlockObject,m_slots_TextBlockObject);
	static void doTextBlockClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTextElementClass = offsetof(::avmshell::TextElementClass, m_slots_TextElementClass);
	static const uint16_t s_slotsOffsetTextElementObject = offsetof(::avmshell::TextElementObject,m_slots_TextElementObject);
	static void doTextElementClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTextJustifierClass = offsetof(::avmshell::TextJustifierClass, m_slots_TextJustifierClass);
	static const uint16_t s_slotsOffsetTextJustifierObject = offsetof(::avmshell::TextJustifierObject,m_slots_TextJustifierObject);
	static void doTextJustifierClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTextLineCreationResultClass = offsetof(::avmshell::TextLineCreationResultClass, m_slots_TextLineCreationResultClass);
	static const uint16_t s_slotsOffsetTextLineCreationResultObject = offsetof(::avmshell::TextLineCreationResultObject,m_slots_TextLineCreationResultObject);
	static void doTextLineCreationResultClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTextLineMirrorRegionClass = offsetof(::avmshell::TextLineMirrorRegionClass, m_slots_TextLineMirrorRegionClass);
	static const uint16_t s_slotsOffsetTextLineMirrorRegionObject = offsetof(::avmshell::TextLineMirrorRegionObject,m_slots_TextLineMirrorRegionObject);
	static void doTextLineMirrorRegionClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTextLineValidityClass = offsetof(::avmshell::TextLineValidityClass, m_slots_TextLineValidityClass);
	static const uint16_t s_slotsOffsetTextLineValidityObject = offsetof(::avmshell::TextLineValidityObject,m_slots_TextLineValidityObject);
	static void doTextLineValidityClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTextLineClass = offsetof(::avmshell::TextLineClass, m_slots_TextLineClass);
	static const uint16_t s_slotsOffsetTextLineObject = offsetof(::avmshell::TextLineObject,m_slots_TextLineObject);
	static void doTextLineClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTextRotationClass = offsetof(::avmshell::TextRotationClass, m_slots_TextRotationClass);
	static const uint16_t s_slotsOffsetTextRotationObject = offsetof(::avmshell::TextRotationObject,m_slots_TextRotationObject);
	static void doTextRotationClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetTypographicCaseClass = offsetof(::avmshell::TypographicCaseClass, m_slots_TypographicCaseClass);
	static const uint16_t s_slotsOffsetTypographicCaseObject = offsetof(::avmshell::TypographicCaseObject,m_slots_TypographicCaseObject);
	static void doTypographicCaseClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetCompositionAttributeRangeClass = offsetof(::avmshell::CompositionAttributeRangeClass, m_slots_CompositionAttributeRangeClass);
	static const uint16_t s_slotsOffsetCompositionAttributeRangeObject = offsetof(::avmshell::CompositionAttributeRangeObject,m_slots_CompositionAttributeRangeObject);
	static void doCompositionAttributeRangeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetCertificateStatusClass = offsetof(::avmshell::CertificateStatusClass, m_slots_CertificateStatusClass);
	static const uint16_t s_slotsOffsetCertificateStatusObject = offsetof(::avmshell::CertificateStatusObject,m_slots_CertificateStatusObject);
	static void doCertificateStatusClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetReferencesValidationSettingClass = offsetof(::avmshell::ReferencesValidationSettingClass, m_slots_ReferencesValidationSettingClass);
	static const uint16_t s_slotsOffsetReferencesValidationSettingObject = offsetof(::avmshell::ReferencesValidationSettingObject,m_slots_ReferencesValidationSettingObject);
	static void doReferencesValidationSettingClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetRevocationCheckSettingsClass = offsetof(::avmshell::RevocationCheckSettingsClass, m_slots_RevocationCheckSettingsClass);
	static const uint16_t s_slotsOffsetRevocationCheckSettingsObject = offsetof(::avmshell::RevocationCheckSettingsObject,m_slots_RevocationCheckSettingsObject);
	static void doRevocationCheckSettingsClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSignatureStatusClass = offsetof(::avmshell::SignatureStatusClass, m_slots_SignatureStatusClass);
	static const uint16_t s_slotsOffsetSignatureStatusObject = offsetof(::avmshell::SignatureStatusObject,m_slots_SignatureStatusObject);
	static void doSignatureStatusClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSignerTrustSettingsClass = offsetof(::avmshell::SignerTrustSettingsClass, m_slots_SignerTrustSettingsClass);
	static const uint16_t s_slotsOffsetSignerTrustSettingsObject = offsetof(::avmshell::SignerTrustSettingsObject,m_slots_SignerTrustSettingsObject);
	static void doSignerTrustSettingsClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetXMLSignatureValidatorClass = offsetof(::avmshell::XMLSignatureValidatorClass, m_slots_XMLSignatureValidatorClass);
	static const uint16_t s_slotsOffsetXMLSignatureValidatorObject = offsetof(::avmshell::XMLSignatureValidatorObject,m_slots_XMLSignatureValidatorObject);
	static void doXMLSignatureValidatorClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetHTMLHistoryItemClass = offsetof(::avmshell::HTMLHistoryItemClass, m_slots_HTMLHistoryItemClass);
	static const uint16_t s_slotsOffsetHTMLHistoryItemObject = offsetof(::avmshell::HTMLHistoryItemObject,m_slots_HTMLHistoryItemObject);
	static void doHTMLHistoryItemClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetHTMLHostClass = offsetof(::avmshell::HTMLHostClass, m_slots_HTMLHostClass);
	static const uint16_t s_slotsOffsetHTMLHostObject = offsetof(::avmshell::HTMLHostObject,m_slots_HTMLHostObject);
	static void doHTMLHostClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetHTMLLoaderClass = offsetof(::avmshell::HTMLLoaderClass, m_slots_HTMLLoaderClass);
	static const uint16_t s_slotsOffsetHTMLLoaderObject = offsetof(::avmshell::HTMLLoaderObject,m_slots_HTMLLoaderObject);
	static void doHTMLLoaderClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetHTMLPDFCapabilityClass = offsetof(::avmshell::HTMLPDFCapabilityClass, m_slots_HTMLPDFCapabilityClass);
	static const uint16_t s_slotsOffsetHTMLPDFCapabilityObject = offsetof(::avmshell::HTMLPDFCapabilityObject,m_slots_HTMLPDFCapabilityObject);
	static void doHTMLPDFCapabilityClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetHTMLSWFCapabilityClass = offsetof(::avmshell::HTMLSWFCapabilityClass, m_slots_HTMLSWFCapabilityClass);
	static const uint16_t s_slotsOffsetHTMLSWFCapabilityObject = offsetof(::avmshell::HTMLSWFCapabilityObject,m_slots_HTMLSWFCapabilityObject);
	static void doHTMLSWFCapabilityClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetHTMLWindowCreateOptionsClass = offsetof(::avmshell::HTMLWindowCreateOptionsClass, m_slots_HTMLWindowCreateOptionsClass);
	static const uint16_t s_slotsOffsetHTMLWindowCreateOptionsObject = offsetof(::avmshell::HTMLWindowCreateOptionsObject,m_slots_HTMLWindowCreateOptionsObject);
	static void doHTMLWindowCreateOptionsClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetAAAARecordClass = offsetof(::avmshell::AAAARecordClass, m_slots_AAAARecordClass);
	static const uint16_t s_slotsOffsetAAAARecordObject = offsetof(::avmshell::AAAARecordObject,m_slots_AAAARecordObject);
	static void doAAAARecordClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetARecordClass = offsetof(::avmshell::ARecordClass, m_slots_ARecordClass);
	static const uint16_t s_slotsOffsetARecordObject = offsetof(::avmshell::ARecordObject,m_slots_ARecordObject);
	static void doARecordClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDNSResolverEventClass = offsetof(::avmshell::DNSResolverEventClass, m_slots_DNSResolverEventClass);
	static const uint16_t s_slotsOffsetDNSResolverEventObject = offsetof(::avmshell::DNSResolverEventObject,m_slots_DNSResolverEventObject);
	static void doDNSResolverEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDNSResolverClass = offsetof(::avmshell::DNSResolverClass, m_slots_DNSResolverClass);
	static const uint16_t s_slotsOffsetDNSResolverObject = offsetof(::avmshell::DNSResolverObject,m_slots_DNSResolverObject);
	static void doDNSResolverClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetMXRecordClass = offsetof(::avmshell::MXRecordClass, m_slots_MXRecordClass);
	static const uint16_t s_slotsOffsetMXRecordObject = offsetof(::avmshell::MXRecordObject,m_slots_MXRecordObject);
	static void doMXRecordClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetPTRRecordClass = offsetof(::avmshell::PTRRecordClass, m_slots_PTRRecordClass);
	static const uint16_t s_slotsOffsetPTRRecordObject = offsetof(::avmshell::PTRRecordObject,m_slots_PTRRecordObject);
	static void doPTRRecordClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetResourceRecordClass = offsetof(::avmshell::ResourceRecordClass, m_slots_ResourceRecordClass);
	static const uint16_t s_slotsOffsetResourceRecordObject = offsetof(::avmshell::ResourceRecordObject,m_slots_ResourceRecordObject);
	static void doResourceRecordClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSRVRecordClass = offsetof(::avmshell::SRVRecordClass, m_slots_SRVRecordClass);
	static const uint16_t s_slotsOffsetSRVRecordObject = offsetof(::avmshell::SRVRecordObject,m_slots_SRVRecordObject);
	static void doSRVRecordClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetEncryptedLocalStoreClass = offsetof(::avmshell::EncryptedLocalStoreClass, m_slots_EncryptedLocalStoreClass);
	static const uint16_t s_slotsOffsetEncryptedLocalStoreObject = offsetof(::avmshell::EncryptedLocalStoreObject,m_slots_EncryptedLocalStoreObject);
	static void doEncryptedLocalStoreClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSQLCollationTypeClass = offsetof(::avmshell::SQLCollationTypeClass, m_slots_SQLCollationTypeClass);
	static const uint16_t s_slotsOffsetSQLCollationTypeObject = offsetof(::avmshell::SQLCollationTypeObject,m_slots_SQLCollationTypeObject);
	static void doSQLCollationTypeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSQLColumnNameStyleClass = offsetof(::avmshell::SQLColumnNameStyleClass, m_slots_SQLColumnNameStyleClass);
	static const uint16_t s_slotsOffsetSQLColumnNameStyleObject = offsetof(::avmshell::SQLColumnNameStyleObject,m_slots_SQLColumnNameStyleObject);
	static void doSQLColumnNameStyleClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSQLColumnSchemaClass = offsetof(::avmshell::SQLColumnSchemaClass, m_slots_SQLColumnSchemaClass);
	static const uint16_t s_slotsOffsetSQLColumnSchemaObject = offsetof(::avmshell::SQLColumnSchemaObject,m_slots_SQLColumnSchemaObject);
	static void doSQLColumnSchemaClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSQLConnectionClass = offsetof(::avmshell::SQLConnectionClass, m_slots_SQLConnectionClass);
	static const uint16_t s_slotsOffsetSQLConnectionObject = offsetof(::avmshell::SQLConnectionObject,m_slots_SQLConnectionObject);
	static void doSQLConnectionClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSQLIndexSchemaClass = offsetof(::avmshell::SQLIndexSchemaClass, m_slots_SQLIndexSchemaClass);
	static const uint16_t s_slotsOffsetSQLIndexSchemaObject = offsetof(::avmshell::SQLIndexSchemaObject,m_slots_SQLIndexSchemaObject);
	static void doSQLIndexSchemaClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSQLModeClass = offsetof(::avmshell::SQLModeClass, m_slots_SQLModeClass);
	static const uint16_t s_slotsOffsetSQLModeObject = offsetof(::avmshell::SQLModeObject,m_slots_SQLModeObject);
	static void doSQLModeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSQLResultClass = offsetof(::avmshell::SQLResultClass, m_slots_SQLResultClass);
	static const uint16_t s_slotsOffsetSQLResultObject = offsetof(::avmshell::SQLResultObject,m_slots_SQLResultObject);
	static void doSQLResultClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSQLSchemaClass = offsetof(::avmshell::SQLSchemaClass, m_slots_SQLSchemaClass);
	static const uint16_t s_slotsOffsetSQLSchemaObject = offsetof(::avmshell::SQLSchemaObject,m_slots_SQLSchemaObject);
	static void doSQLSchemaClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSQLSchemaResultClass = offsetof(::avmshell::SQLSchemaResultClass, m_slots_SQLSchemaResultClass);
	static const uint16_t s_slotsOffsetSQLSchemaResultObject = offsetof(::avmshell::SQLSchemaResultObject,m_slots_SQLSchemaResultObject);
	static void doSQLSchemaResultClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSQLStatementClass = offsetof(::avmshell::SQLStatementClass, m_slots_SQLStatementClass);
	static const uint16_t s_slotsOffsetSQLStatementObject = offsetof(::avmshell::SQLStatementObject,m_slots_SQLStatementObject);
	static void doSQLStatementClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSQLTableSchemaClass = offsetof(::avmshell::SQLTableSchemaClass, m_slots_SQLTableSchemaClass);
	static const uint16_t s_slotsOffsetSQLTableSchemaObject = offsetof(::avmshell::SQLTableSchemaObject,m_slots_SQLTableSchemaObject);
	static void doSQLTableSchemaClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSQLTransactionLockTypeClass = offsetof(::avmshell::SQLTransactionLockTypeClass, m_slots_SQLTransactionLockTypeClass);
	static const uint16_t s_slotsOffsetSQLTransactionLockTypeObject = offsetof(::avmshell::SQLTransactionLockTypeObject,m_slots_SQLTransactionLockTypeObject);
	static void doSQLTransactionLockTypeClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSQLTriggerSchemaClass = offsetof(::avmshell::SQLTriggerSchemaClass, m_slots_SQLTriggerSchemaClass);
	static const uint16_t s_slotsOffsetSQLTriggerSchemaObject = offsetof(::avmshell::SQLTriggerSchemaObject,m_slots_SQLTriggerSchemaObject);
	static void doSQLTriggerSchemaClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetSQLViewSchemaClass = offsetof(::avmshell::SQLViewSchemaClass, m_slots_SQLViewSchemaClass);
	static const uint16_t s_slotsOffsetSQLViewSchemaObject = offsetof(::avmshell::SQLViewSchemaObject,m_slots_SQLViewSchemaObject);
	static void doSQLViewSchemaClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}

	static const uint16_t s_slotsOffsetX500DistinguishedNameClass = offsetof(::avmshell::X500DistinguishedNameClass, m_slots_X500DistinguishedNameClass);
	static const uint16_t s_slotsOffsetX500DistinguishedNameObject = offsetof(::avmshell::X500DistinguishedNameObject,m_slots_X500DistinguishedNameObject);
	static void doX500DistinguishedNameClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}

	static const uint16_t s_slotsOffsetX509CertificateClass = offsetof(::avmshell::X509CertificateClass, m_slots_X509CertificateClass);
	static const uint16_t s_slotsOffsetX509CertificateObject = offsetof(::avmshell::X509CertificateObject,m_slots_X509CertificateObject);
	static void doX509CertificateClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDRMVoucherStoreContextClass = offsetof(::avmshell::DRMVoucherStoreContextClass, m_slots_DRMVoucherStoreContextClass);
	static const uint16_t s_slotsOffsetDRMVoucherStoreContextObject = offsetof(::avmshell::DRMVoucherStoreContextObject,m_slots_DRMVoucherStoreContextObject);
	static void doDRMVoucherStoreContextClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetDRMManagerSessionClass = offsetof(::avmshell::DRMManagerSessionClass, m_slots_DRMManagerSessionClass);
	static const uint16_t s_slotsOffsetDRMManagerSessionObject = offsetof(::avmshell::DRMManagerSessionObject,m_slots_DRMManagerSessionObject);
	static void doDRMManagerSessionClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	///////////////////////////////////////////////////////////////////////////////
	// specical API
	/*static const uint16_t s_slotsOffsetBXDeviceBitmapDataClass = offsetof(::avmshell::BXDeviceBitmapDataClass, m_slots_BXDeviceBitmapDataClass);
	static const uint16_t s_slotsOffsetBXDeviceBitmapDataObject = offsetof(::avmshell::BXDeviceBitmapDataObject,m_slots_BXDeviceBitmapDataObject);
	static void doBXDeviceBitmapDataClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}*/

	/*static const uint16_t s_slotsOffsetBXFileClass = offsetof(::avmshell::BXFileClass, m_slots_BXFileClass);
	static const uint16_t s_slotsOffsetBXFileObject = offsetof(::avmshell::BXFileObject,m_slots_BXFileObject);
	static void doBXFileClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}*/

	static const uint16_t s_slotsOffsetBXAccClass = offsetof(::avmshell::BXAccClass, m_slots_BXAccClass);
	static const uint16_t s_slotsOffsetBXAccObject = offsetof(::avmshell::BXAccObject,m_slots_BXAccObject);
	static void doBXAccClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}

	static const uint16_t s_slotsOffsetBXWaveStreamClass = offsetof(::avmshell::BXWaveStreamClass, m_slots_BXWaveStreamClass);
	static const uint16_t s_slotsOffsetBXWaveStreamObject = offsetof(::avmshell::BXWaveStreamObject,m_slots_BXWaveStreamObject);
	static void doBXWaveStreamClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}

	static const uint16_t s_slotsOffsetBXWaveEventClass = offsetof(::avmshell::BXWaveEventClass, m_slots_BXWaveEventClass);
	static const uint16_t s_slotsOffsetBXWaveEventObject = offsetof(::avmshell::BXWaveEventObject,m_slots_BXWaveEventObject);
	static void doBXWaveEventClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}

	// BwExternAPI
	static const uint16_t s_slotsOffsetBwExternAPIClass = offsetof( ::avmshell::BwExternAPIClass, m_slots_BwExternAPIClass );
	static const uint16_t s_slotsOffsetBwExternAPIObject = offsetof( ::avmshell::BwExternAPIObject, m_slots_BwExternAPIObject );
	static void doBwExternAPIClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}
	// WeiXinShareSession
	static const uint16_t s_slotsOffsetWeiXinShareSessionClass = offsetof( ::avmshell::WeiXinShareSessionClass, m_slots_WeiXinShareSessionClass );
	static const uint16_t s_slotsOffsetWeiXinShareSessionObject = offsetof( ::avmshell::WeiXinShareSessionObject, m_slots_WeiXinShareSessionObject );
	static void doWeiXinShareSessionClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}
	// DuoMengSDKInterface
	static const uint16_t s_slotsOffsetDuoMengSDKInterfaceClass = offsetof( ::avmshell::DuoMengSDKInterfaceClass, m_slots_DuoMengSDKInterfaceClass );
	static const uint16_t s_slotsOffsetDuoMengSDKInterfaceObject = offsetof( ::avmshell::DuoMengSDKInterfaceObject, m_slots_DuoMengSDKInterfaceObject );
	static void doDuoMengSDKInterfaceClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}

	static const uint16_t s_slotsOffsetBwPayAPIClass = offsetof( ::avmshell::BwPayAPIClass, m_slots_BwPayAPIClass );
	static const uint16_t s_slotsOffsetBwPayAPIObject = offsetof( ::avmshell::BwPayAPIObject, m_slots_BwPayAPIObject );
	static void doBwPayAPIClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}

	//add by xiepeifu
	/*static const uint16_t s_slotsOffsetBXBGLayerClass = offsetof(::avmshell::BXBGLayerClass, m_slots_BXBGLayerClass);
	static const uint16_t s_slotsOffsetBXBGLayerObject = offsetof(::avmshell::BXBGLayerObject,m_slots_BXBGLayerObject);
	static void doBXBGLayerClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}*/

	static const uint16_t s_slotsOffsetBXFileClass = offsetof(::avmshell::BXFileClass, m_slots_BXFileClass);
	static const uint16_t s_slotsOffsetBXFileObject = offsetof(::avmshell::BXFileObject,m_slots_BXFileObject);
	static void doBXFileClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	//new adds end

	//new adds 11 

	//  BitmapEncodingColorSpace
	//static const uint16_t s_slotsOffsetBitmapEncodingColorSpaceClass = offsetof( ::avmshell::BitmapEncodingColorSpaceClass, m_slots_BitmapEncodingColorSpaceClass );
	//static const uint16_t s_slotsOffsetBitmapEncodingColorSpaceObject = offsetof( ::avmshell::BitmapEncodingColorSpaceObject, m_slots_BitmapEncodingColorSpaceObject );
	//static void doBitmapEncodingColorSpaceClassAsserts( Traits *cTraits, Traits *iTraits )
	//{
	//	(void)cTraits; (void)iTraits;
	//}

	// Stage3D
	static const uint16_t s_slotsOffsetStage3DClass = offsetof( ::avmshell::Stage3DClass, m_slots_Stage3DClass );
	static const uint16_t s_slotsOffsetStage3DObject = offsetof( ::avmshell::Stage3DObject, m_slots_Stage3DObject );
	static void doStage3DClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}

	// AVDictionaryDataEvent
	static const uint16_t s_slotsOffsetAVDictionaryDataEventClass = offsetof( ::avmshell::AVDictionaryDataEventClass, m_slots_AVDictionaryDataEventClass );
	static const uint16_t s_slotsOffsetAVDictionaryDataEventObject = offsetof( ::avmshell::AVDictionaryDataEventObject, m_slots_AVDictionaryDataEventObject );
	static void doAVDictionaryDataEventClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}

	// DRMDeviceGroupErrorEvent
	static const uint16_t s_slotsOffsetDRMDeviceGroupErrorEventClass = offsetof( ::avmshell::DRMDeviceGroupErrorEventClass, m_slots_DRMDeviceGroupErrorEventClass );
	static const uint16_t s_slotsOffsetDRMDeviceGroupErrorEventObject = offsetof( ::avmshell::DRMDeviceGroupErrorEventObject, m_slots_DRMDeviceGroupErrorEventObject );
	static void doDRMDeviceGroupErrorEventClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}

	// DRMDeviceGroupEvent
	static const uint16_t s_slotsOffsetDRMDeviceGroupEventClass = offsetof( ::avmshell::DRMDeviceGroupEventClass, m_slots_DRMDeviceGroupEventClass );
	static const uint16_t s_slotsOffsetDRMDeviceGroupEventObject = offsetof( ::avmshell::DRMDeviceGroupEventObject, m_slots_DRMDeviceGroupEventObject );
	static void doDRMDeviceGroupEventClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}

	// DRMLicenseRequestEvent
	static const uint16_t s_slotsOffsetDRMLicenseRequestEventClass = offsetof( ::avmshell::DRMLicenseRequestEventClass, m_slots_DRMLicenseRequestEventClass );
	static const uint16_t s_slotsOffsetDRMLicenseRequestEventObject = offsetof( ::avmshell::DRMLicenseRequestEventObject, m_slots_DRMLicenseRequestEventObject );
	static void doDRMLicenseRequestEventClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}

	// DRMMetadataEvent
	static const uint16_t s_slotsOffsetDRMMetadataEventClass = offsetof( ::avmshell::DRMMetadataEventClass, m_slots_DRMMetadataEventClass );
	static const uint16_t s_slotsOffsetDRMMetadataEventObject = offsetof( ::avmshell::DRMMetadataEventObject, m_slots_DRMMetadataEventObject );
	static void doDRMMetadataEventClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}

	// DRMReturnVoucherCompleteEvent
	static const uint16_t s_slotsOffsetDRMReturnVoucherCompleteEventClass = offsetof( ::avmshell::DRMReturnVoucherCompleteEventClass, m_slots_DRMReturnVoucherCompleteEventClass );
	static const uint16_t s_slotsOffsetDRMReturnVoucherCompleteEventObject = offsetof( ::avmshell::DRMReturnVoucherCompleteEventObject, m_slots_DRMReturnVoucherCompleteEventObject );
	static void doDRMReturnVoucherCompleteEventClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}

	// DRMReturnVoucherErrorEvent
	static const uint16_t s_slotsOffsetDRMReturnVoucherErrorEventClass = offsetof( ::avmshell::DRMReturnVoucherErrorEventClass, m_slots_DRMReturnVoucherErrorEventClass );
	static const uint16_t s_slotsOffsetDRMReturnVoucherErrorEventObject = offsetof( ::avmshell::DRMReturnVoucherErrorEventObject, m_slots_DRMReturnVoucherErrorEventObject );
	static void doDRMReturnVoucherErrorEventClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}

	// GameInputEvent
	static const uint16_t s_slotsOffsetGameInputEventClass = offsetof( ::avmshell::GameInputEventClass, m_slots_GameInputEventClass );
	static const uint16_t s_slotsOffsetGameInputEventObject = offsetof( ::avmshell::GameInputEventObject, m_slots_GameInputEventObject );
	static void doGameInputEventClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}

	// RemoteNotificationEvent
	static const uint16_t s_slotsOffsetRemoteNotificationEventClass = offsetof( ::avmshell::RemoteNotificationEventClass, m_slots_RemoteNotificationEventClass );
	static const uint16_t s_slotsOffsetRemoteNotificationEventObject = offsetof( ::avmshell::RemoteNotificationEventObject, m_slots_RemoteNotificationEventObject );
	static void doRemoteNotificationEventClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}
	
	// ThrottleEvent
	static const uint16_t s_slotsOffsetThrottleEventClass = offsetof( ::avmshell::ThrottleEventClass, m_slots_ThrottleEventClass );
	static const uint16_t s_slotsOffsetThrottleEventObject = offsetof( ::avmshell::ThrottleEventObject, m_slots_ThrottleEventObject );
	static void doThrottleEventClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}

	// AVTagData
	static const uint16_t s_slotsOffsetAVTagDataClass = offsetof( ::avmshell::AVTagDataClass, m_slots_AVTagDataClass );
	static const uint16_t s_slotsOffsetAVTagDataObject = offsetof( ::avmshell::AVTagDataObject, m_slots_AVTagDataObject );
	static void doAVTagDataClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}

	// CameraRollBrowseOptions
	static const uint16_t s_slotsOffsetCameraRollBrowseOptionsClass = offsetof( ::avmshell::CameraRollBrowseOptionsClass, m_slots_CameraRollBrowseOptionsClass );
	static const uint16_t s_slotsOffsetCameraRollBrowseOptionsObject = offsetof( ::avmshell::CameraRollBrowseOptionsObject, m_slots_CameraRollBrowseOptionsObject );
	static void doCameraRollBrowseOptionsClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}

	// H264VideoStreamSettings
	static const uint16_t s_slotsOffsetH264VideoStreamSettingsClass = offsetof( ::avmshell::H264VideoStreamSettingsClass, m_slots_H264VideoStreamSettingsClass );
	static const uint16_t s_slotsOffsetH264VideoStreamSettingsObject = offsetof( ::avmshell::H264VideoStreamSettingsObject, m_slots_H264VideoStreamSettingsObject );
	static void doH264VideoStreamSettingsClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}

	// VideoStreamSettings
	static const uint16_t s_slotsOffsetVideoStreamSettingsClass = offsetof( ::avmshell::VideoStreamSettingsClass, m_slots_VideoStreamSettingsClass );
	static const uint16_t s_slotsOffsetVideoStreamSettingsObject = offsetof( ::avmshell::VideoStreamSettingsObject, m_slots_VideoStreamSettingsObject );
	static void doVideoStreamSettingsClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}

	// DRMDeviceGroup
	static const uint16_t s_slotsOffsetDRMDeviceGroupClass = offsetof( ::avmshell::DRMDeviceGroupClass, m_slots_DRMDeviceGroupClass );
	static const uint16_t s_slotsOffsetDRMDeviceGroupObject = offsetof( ::avmshell::DRMDeviceGroupObject, m_slots_DRMDeviceGroupObject );
	static void doDRMDeviceGroupClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}

	// MessageChannel
	static const uint16_t s_slotsOffsetMessageChannelClass = offsetof( ::avmshell::MessageChannelClass, m_slots_MessageChannelClass );
	static const uint16_t s_slotsOffsetMessageChannelObject = offsetof( ::avmshell::MessageChannelObject, m_slots_MessageChannelObject );
	static void doMessageChannelClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}

	// Worker
	static const uint16_t s_slotsOffsetWorkerClass = offsetof( ::avmshell::WorkerClass, m_slots_WorkerClass );
	static const uint16_t s_slotsOffsetWorkerObject = offsetof( ::avmshell::WorkerObject, m_slots_WorkerObject );
	static void doWorkerClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}
	
	// WorkerDomain
	static const uint16_t s_slotsOffsetWorkerDomainClass = offsetof( ::avmshell::WorkerDomainClass, m_slots_WorkerDomainClass );
	static const uint16_t s_slotsOffsetWorkerDomainObject = offsetof( ::avmshell::WorkerDomainObject, m_slots_WorkerDomainObject );
	static void doWorkerDomainClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}
	
	// StageText
	static const uint16_t s_slotsOffsetStageTextClass = offsetof( ::avmshell::StageTextClass, m_slots_StageTextClass );
	static const uint16_t s_slotsOffsetStageTextObject = offsetof( ::avmshell::StageTextObject, m_slots_StageTextObject );
	static void doStageTextClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}

	// StageTextInitOptions
	static const uint16_t s_slotsOffsetStageTextInitOptionsClass = offsetof( ::avmshell::StageTextInitOptionsClass, m_slots_StageTextInitOptionsClass );
	static const uint16_t s_slotsOffsetStageTextInitOptionsObject = offsetof( ::avmshell::StageTextInitOptionsObject, m_slots_StageTextInitOptionsObject );
	static void doStageTextInitOptionsClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}

	// GameInput
	static const uint16_t s_slotsOffsetGameInputClass = offsetof( ::avmshell::GameInputClass, m_slots_GameInputClass );
	static const uint16_t s_slotsOffsetGameInputObject = offsetof( ::avmshell::GameInputObject, m_slots_GameInputObject );
	static void doGameInputClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}

	// GameInputControl
	static const uint16_t s_slotsOffsetGameInputControlClass = offsetof( ::avmshell::GameInputControlClass, m_slots_GameInputControlClass );
	static const uint16_t s_slotsOffsetGameInputControlObject = offsetof( ::avmshell::GameInputControlObject, m_slots_GameInputControlObject );
	static void doGameInputControlClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}

	// GameInputDevice
	static const uint16_t s_slotsOffsetGameInputDeviceClass = offsetof( ::avmshell::GameInputDeviceClass, m_slots_GameInputDeviceClass );
	static const uint16_t s_slotsOffsetGameInputDeviceObject = offsetof( ::avmshell::GameInputDeviceObject, m_slots_GameInputDeviceObject );
	static void doGameInputDeviceClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}

	//// JSONParseError
	static const uint16_t s_slotsOffsetJSONParseErrorClass = offsetof( ::avmshell::JSONParseErrorClass, m_slots_JSONParseErrorClass );
	static const uint16_t s_slotsOffsetJSONParseErrorObject = offsetof( ::avmshell::JSONParseErrorObject, m_slots_JSONParseErrorObject );
	static void doJSONParseErrorClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}

	static const uint16_t s_slotsOffsetJSONClass = offsetof( ::avmshell::JSONClass, m_slots_JSONClass );
	static const uint16_t s_slotsOffsetJSONObject = offsetof( ::avmshell::JSONObject, m_slots_JSONObject );
	static void doJSONClassAsserts( Traits *cTraits, Traits *iTraits )
	{
		(void)cTraits; (void)iTraits;
	}
	//new adds 11 end
	////////////////////////////////////////////////////////////////
	// extend for OPT
//#if (__CORE_VERSION__>=0x02070200)
	static const uint16_t s_slotsOffsetInflaterClass = offsetof(::avmshell::InflaterClass, m_slots_InflaterClass);
	static const uint16_t s_slotsOffsetInflaterObject = offsetof(::avmshell::InflaterObject,m_slots_InflaterObject);
	static void doInflaterClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	static const uint16_t s_slotsOffsetHashAlgorithmsClass = offsetof(::avmshell::HashAlgorithmsClass, m_slots_HashAlgorithmsClass);
	static const uint16_t s_slotsOffsetHashAlgorithmsObject = offsetof(::avmshell::HashAlgorithmsObject,m_slots_HashAlgorithmsObject);
	static void doHashAlgorithmsClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
//#endif

	static const uint16_t s_slotsOffsetSwfEnDeUtilClass = offsetof(::avmshell::SwfEnDeUtilClass, m_slots_SwfEnDeUtilClass);
	static const uint16_t s_slotsOffsetSwfEnDeUtilObject = offsetof(::avmshell::SwfEnDeUtilObject,m_slots_SwfEnDeUtilObject);
	static void doSwfEnDeUtilClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}

	static const uint16_t s_slotsOffsetClassUtilClass = offsetof(::avmshell::ClassUtilClass, m_slots_ClassUtilClass);
	static const uint16_t s_slotsOffsetClassUtilObject = offsetof(::avmshell::ClassUtilObject,m_slots_ClassUtilObject);
	static void doClassUtilClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}

	static const uint16_t s_slotsOffsetMD5Class = offsetof(::avmshell::MD5Class, m_slots_MD5Class);
	static const uint16_t s_slotsOffsetMD5Object = offsetof(::avmshell::MD5Object,m_slots_MD5Object);
	static void doMD5ClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}
	
	/*static const uint16_t s_slotsOffsetSamePropertyObjectUtilClass = offsetof(::avmshell::SamePropertyObjectUtilClass, m_slots_SamePropertyObjectUtilClass);
	static const uint16_t s_slotsOffsetSamePropertyObjectUtilObject = offsetof(::avmshell::SamePropertyObjectUtilObject,m_slots_SamePropertyObjectUtilObject);
	static void doSamePropertyObjectUtilClassAsserts(Traits* cTraits, Traits* iTraits)
	{
		(void)cTraits; (void)iTraits;
	}*/
};

////////////////////////////////////////////////////////////////////////////////////////
// for normal thunk
AvmBox shell_toplevel_normal_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0, 
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject};
	(void)argc;
	typedef AvmBox (AvmObjectT::*FuncType)(AvmMethodEnv,uint32_t,AvmBox*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
}

#define AVMTHUNK_NATIVE_METHOD_EX( METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)shell_toplevel_normal_thunk, avmplus::NativeID::METHID },


/////////////////////////////////////////////////////////////////////////////////////////
// for double return
double shell_toplevel_double_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0, argoff1 = argoff0 + AvmThunkArgSize_AvmObject};
	(void)argc;
	typedef double (AvmObjectT::*FuncType)(AvmMethodEnv,uint32_t,AvmBox*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
}
#define AVMTHUNK_NATIVE_METHOD_DOUBLE( METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)shell_toplevel_double_thunk, avmplus::NativeID::METHID },
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for SET(bool) function
AvmBox void_b_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0, argoff1 = argoff0 + AvmThunkArgSize_AvmObject};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(argc?AvmThunkUnbox_AvmBool32(argv[argoff1])!=0:false);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_B(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_b_thunk, avmplus::NativeID::METHID },


/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for SET(bool) function
AvmBox void_bp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		  argoff2 = argoff1 + AvmThunkArgSize_AvmBool32
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(bool,ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		argc>0?AvmThunkUnbox_AvmBool32(argv[argoff1]):false,
		argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_BP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_bp_thunk, avmplus::NativeID::METHID },

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for SET(bool) function
AvmBox void_u_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0, argoff1 = argoff0 + AvmThunkArgSize_AvmObject};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(uint32);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(argc?AvmThunkUnbox_uint32_t(argv[argoff1]):0);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_U(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_u_thunk, avmplus::NativeID::METHID },
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//dushixiong 2011-3-30 --start
AvmBox void_s_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0, argoff1 = argoff0 + AvmThunkArgSize_AvmObject};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_S(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_s_thunk, avmplus::NativeID::METHID },

AvmBox void_ss_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(Stringp, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
			argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
			argc>1?AvmThunkUnbox_AvmString(argv[argoff2]):NULL
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_ss_thunk, avmplus::NativeID::METHID },

AvmBox void_puu_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum
	{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_uint32_t
	};
	typedef void (AvmObjectT::*FuncType)(ScriptObject*, uint32_t, uint32_t);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
			argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
			argc>1?AvmThunkUnbox_uint32_t(argv[argoff2]):0,
			argc>2?AvmThunkUnbox_uint32_t(argv[argoff3]):0
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PUU(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_puu_thunk, avmplus::NativeID::METHID },

AvmBox void_puub_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum
	{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_uint32_t,
		argoff4 = argoff3 + AvmThunkArgSize_uint32_t
	};
	typedef void (AvmObjectT::*FuncType)(ScriptObject*, uint32_t, uint32_t,bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
			argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
			argc>1?AvmThunkUnbox_uint32_t(argv[argoff2]):0,
			argc>2?AvmThunkUnbox_uint32_t(argv[argoff3]):0,
			argc>3?AvmThunkUnbox_AvmBool32(argv[argoff4]):false
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PUUB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_puub_thunk, avmplus::NativeID::METHID },

AvmBox p_dip_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum
	{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_double,
		argoff3 = argoff2 + AvmThunkArgSize_uint32_t
	};
	typedef Atom (AvmObjectT::*FuncType)(double,int,ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
			argc?AvmThunkUnbox_double(argv[argoff1]):0,
			argc>1?AvmThunkUnbox_int32_t(argv[argoff2]):0,
			argc>2?AvmThunkUnbox_AvmObject(argv[argoff3]):NULL
		);
}

#define AVMTHUNK_NATIVE_METHOD_P_DIP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_dip_thunk, avmplus::NativeID::METHID },

AvmBox p_u_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum
	{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
	};

	typedef AvmBox (AvmObjectT::*FuncType)(uint32_t);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
			(
				argc?AvmThunkUnbox_uint32_t(argv[argoff1]):0
			);

}

#define AVMTHUNK_NATIVE_METHOD_P_U(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_u_thunk, avmplus::NativeID::METHID },

AvmBox p_us_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum
	{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_uint32_t
	};

	typedef AvmBox (AvmObjectT::*FuncType)(uint32_t, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			argc?AvmThunkUnbox_uint32_t(argv[argoff1]):0,
			argc>1?AvmThunkUnbox_AvmString(argv[argoff2]):NULL
		);

}

#define AVMTHUNK_NATIVE_METHOD_P_US(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_us_thunk, avmplus::NativeID::METHID },
//dushixiong 2011-3-30 --end

//dushixiong 2011-4-12 --start
AvmBox void_si_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum
	{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
	};
	typedef void (AvmObjectT::*FuncType)(Stringp, int32_t);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_int32_t(argv[argoff2]):0
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SI(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_si_thunk, avmplus::NativeID::METHID },
//dushixiong 2011-4-12 -end

//dushixiong 2011-4-13 --start
AvmBox void_sss_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmString
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(Stringp, Stringp, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
		AvmThunkUnbox_AvmString(argv[argoff1]),
		AvmThunkUnbox_AvmString(argv[argoff2]),
		argc>2?AvmThunkUnbox_AvmString(argv[argoff3]):NULL
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SSS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sss_thunk, avmplus::NativeID::METHID },

AvmBox void_ps_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum
	{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject
	};
	typedef void (AvmObjectT::*FuncType)(ScriptObject*, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
			argc>1?AvmThunkUnbox_AvmString(argv[argoff2]):NULL
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_ps_thunk, avmplus::NativeID::METHID },

AvmBox void_psb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum
	{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_AvmString
	};
	typedef void (AvmObjectT::*FuncType)(ScriptObject*, Stringp, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
			argc>1?AvmThunkUnbox_AvmString(argv[argoff2]):NULL,
			argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PSB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_psb_thunk, avmplus::NativeID::METHID },
//dushixiong 2011-4-13 --end

// for SET(bool) function
AvmBox void_up_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		  argoff2 = argoff1 + AvmThunkArgSize_AvmObject
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(uint32,ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		argc?AvmThunkUnbox_uint32_t(argv[argoff1]):0,
		argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_UP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_up_thunk, avmplus::NativeID::METHID },
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (bool)GET function
AvmBox b_void_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0, argoff1 = argoff0 + AvmThunkArgSize_AvmObject};
	(void)argc;
	typedef bool (AvmObjectT::*FuncType)(void);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (AvmBox)(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))();

}

#define AVMTHUNK_NATIVE_METHOD_B_VOID(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)b_void_thunk, avmplus::NativeID::METHID },
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (double) GET function
double d_void_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0, argoff1 = argoff0 + AvmThunkArgSize_AvmObject};
	(void)argc;
	typedef double (AvmObjectT::*FuncType)(void);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))();

}

#define AVMTHUNK_NATIVE_METHOD_D_VOID(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)d_void_thunk, avmplus::NativeID::METHID },
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (double) GET function
double d_pp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject
	};
	(void)argc;
	typedef double (AvmObjectT::*FuncType)(ScriptObject*,ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
			argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
			argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL
		);

}

#define AVMTHUNK_NATIVE_METHOD_D_PP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)d_pp_thunk, avmplus::NativeID::METHID },


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (double) GET function
ScriptObject* p_pp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject
	};
	(void)argc;
	typedef ScriptObject* (AvmObjectT::*FuncType)(ScriptObject*,ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
			argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
			argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL
		);

}

#define AVMTHUNK_NATIVE_METHOD_P_PP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_pp_thunk, avmplus::NativeID::METHID },


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (double) GET function
ScriptObject* p_ii_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_int32_t
	};
	(void)argc;
	typedef ScriptObject* (AvmObjectT::*FuncType)(int,int);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
			argc?AvmThunkUnbox_int32_t(argv[argoff1]):-1,
			argc>1?AvmThunkUnbox_int32_t(argv[argoff2]):-1
		);

}

#define AVMTHUNK_NATIVE_METHOD_P_II(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_ii_thunk, avmplus::NativeID::METHID },

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (double) GET function
ScriptObject* p_ppb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_AvmObject
	};
	(void)argc;
	typedef ScriptObject* (AvmObjectT::*FuncType)(ScriptObject*,ScriptObject*,bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
			argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
			argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL,
			argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false
		);

}

#define AVMTHUNK_NATIVE_METHOD_P_PPB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_ppb_thunk, avmplus::NativeID::METHID },
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (double) GET function
Atom void_pbp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(ScriptObject*,bool,ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
			argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
			argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
			argc>2?AvmThunkUnbox_AvmObject(argv[argoff3]):false
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PBP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_pbp_thunk, avmplus::NativeID::METHID },
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (double) GET function
ScriptObject* p_pppb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
		argoff4 = argoff3 + AvmThunkArgSize_AvmObject,
	};
	(void)argc;
	typedef ScriptObject* (AvmObjectT::*FuncType)(ScriptObject*,ScriptObject*,ScriptObject*,bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
			argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
			argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL,
			argc>2?AvmThunkUnbox_AvmObject(argv[argoff3]):NULL,
			argc>3?AvmThunkUnbox_AvmBool32(argv[argoff4]):false
		);

}

#define AVMTHUNK_NATIVE_METHOD_P_PPPB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_pppb_thunk, avmplus::NativeID::METHID },

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (double) GET function
ScriptObject* p_uub_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_uint32_t,
		argoff3 = argoff2 + AvmThunkArgSize_uint32_t,
	};
	(void)argc;
	typedef ScriptObject* (AvmObjectT::*FuncType)(uint32_t,uint32_t,bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
			argc?AvmThunkUnbox_uint32_t(argv[argoff1]):0,
			argc>1?AvmThunkUnbox_uint32_t(argv[argoff2]):0,
			argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false
		);

}

#define AVMTHUNK_NATIVE_METHOD_P_UUB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_uub_thunk, avmplus::NativeID::METHID },

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (double) GET function
double p_ppd_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_AvmObject
	};
	(void)argc;
	typedef double (AvmObjectT::*FuncType)(ScriptObject*,ScriptObject*,double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
			argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
			argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL,
			argc>2?AvmThunkUnbox_double(argv[argoff3]):0
		);

}

#define AVMTHUNK_NATIVE_METHOD_P_PPD(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_ppd_thunk, avmplus::NativeID::METHID },


static void checkDouble(double v)
{
	if(v!=1.0)
		AvmAssert(false);
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (double) GET function
AvmBox p_pi_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
	};
	(void)argc;
	typedef AvmBox (AvmObjectT::*FuncType)(ScriptObject*,int32_t);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
			argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
			argc>1?AvmThunkUnbox_int32_t(argv[argoff2]):0
		);
	//checkDouble(1.0);
	//return r;
	//checkDouble(1.0);
	//return r;

}

#define AVMTHUNK_NATIVE_METHOD_P_PI(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_pi_thunk, avmplus::NativeID::METHID },
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (double) GET function
double b_i_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
	};
	(void)argc;
	typedef bool (AvmObjectT::*FuncType)(int32_t);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
		argc?AvmThunkUnbox_int32_t(argv[argoff1]):0
		);

}

#define AVMTHUNK_NATIVE_METHOD_B_I(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)b_i_thunk, avmplus::NativeID::METHID },
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (double) GET function
int i_p_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
	};
	(void)argc;
	typedef int (AvmObjectT::*FuncType)(ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
			argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL
		);

}

#define AVMTHUNK_NATIVE_METHOD_I_P(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)i_p_thunk, avmplus::NativeID::METHID },
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for void SET(double) function
AvmBox void_d_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0, argoff1 = argoff0 + AvmThunkArgSize_AvmObject};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	//double v=argc?AvmThunkUnbox_double(argv[argoff1]):0;
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(argc?AvmThunkUnbox_double(argv[argoff1]):0.0);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_D(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_d_thunk, avmplus::NativeID::METHID },
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for void SET(double) function
AvmBox void_di_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_double,
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(double,int);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	//double v=argc?AvmThunkUnbox_double(argv[argoff1]):0;
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		argc?AvmThunkUnbox_double(argv[argoff1]):0.0,
		argc>1?AvmThunkUnbox_int32_t(argv[argoff2]):0
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_DI(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_di_thunk, avmplus::NativeID::METHID },
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (Pointer)GET function
AvmBox p_void_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	typedef AvmBox (AvmObjectT::*FuncType)(void);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))();

}

#define AVMTHUNK_NATIVE_METHOD_P_VOID(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_void_thunk, avmplus::NativeID::METHID },
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for void SET(Pointer) Function
AvmBox void_p_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0, argoff1 = argoff0 + AvmThunkArgSize_AvmObject};
	typedef void (AvmObjectT::*FuncType)(ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))(argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL);
	return kAvmThunkUndefined;
}


#define AVMTHUNK_NATIVE_METHOD_VOID_P(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_p_thunk, avmplus::NativeID::METHID },
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for void SET(Pointer) Function
AvmBox void_pi_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum
	{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject
	};
	typedef void (AvmObjectT::*FuncType)(ScriptObject*,int);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
			argc>1?AvmThunkUnbox_int32_t(argv[argoff2]):0
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PI(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_pi_thunk, avmplus::NativeID::METHID },
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for void () Function
AvmBox void_spbib_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		  argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		  argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
		  argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
		  argoff5 = argoff4 + AvmThunkArgSize_int32_t
	};
	typedef void (AvmObjectT::*FuncType)(Stringp,ScriptObject*,bool,int,bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			AvmThunkUnbox_AvmString(argv[argoff1]),
			AvmThunkUnbox_AvmObject(argv[argoff2]),
			argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
			argc>3?AvmThunkUnbox_int32_t(argv[argoff4]):0,
			argc>4?AvmThunkUnbox_AvmBool32(argv[argoff5]):false
			//argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SPBIB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_spbib_thunk, avmplus::NativeID::METHID },

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for void () Function
AvmBox void_pppp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		  argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		  argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
		  argoff4 = argoff3 + AvmThunkArgSize_AvmObject,
	};
	typedef void (AvmObjectT::*FuncType)(ScriptObject*,ScriptObject*,ScriptObject*,ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
			argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL,
			argc>2?AvmThunkUnbox_AvmObject(argv[argoff3]):NULL,
			argc>3?AvmThunkUnbox_AvmObject(argv[argoff4]):NULL
			//argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PPPP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_pppp_thunk, avmplus::NativeID::METHID },

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for void () Function
AvmBox void_ppbb_thunk_graphics(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		  argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		  argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
		  argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
	};
	typedef void (AvmObjectT::*FuncType)(ScriptObject*,ScriptObject*,bool,bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
			argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL,
			argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):true,
			argc>3?AvmThunkUnbox_AvmBool32(argv[argoff4]):false
			//argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PPBB_GRAPHICS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_ppbb_thunk_graphics, avmplus::NativeID::METHID },

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for void () Function
AvmBox void_ppp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		  argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		  argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
		  //argoff4 = argoff3 + AvmThunkArgSize_AvmObject,
	};
	typedef void (AvmObjectT::*FuncType)(ScriptObject*,ScriptObject*,ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
			argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL,
			argc>2?AvmThunkUnbox_AvmObject(argv[argoff3]):NULL
			//argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PPP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_ppp_thunk, avmplus::NativeID::METHID },


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for void () Function
AvmBox void_ppppp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		  argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		  argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
		  argoff4 = argoff3 + AvmThunkArgSize_AvmObject,
		  argoff5 = argoff4 + AvmThunkArgSize_AvmObject,
	};
	typedef void (AvmObjectT::*FuncType)(ScriptObject*,ScriptObject*,ScriptObject*,ScriptObject*,ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			AvmThunkUnbox_AvmObject(argv[argoff1]),
			AvmThunkUnbox_AvmObject(argv[argoff2]),
			AvmThunkUnbox_AvmObject(argv[argoff3]),
			AvmThunkUnbox_AvmObject(argv[argoff4]),
			AvmThunkUnbox_AvmObject(argv[argoff5])
			//argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PPPPP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_ppppp_thunk, avmplus::NativeID::METHID },


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for void () Function
AvmBox void_ppppb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		  argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		  argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
		  argoff4 = argoff3 + AvmThunkArgSize_AvmObject,
		  argoff5 = argoff4 + AvmThunkArgSize_AvmObject,
	};
	typedef void (AvmObjectT::*FuncType)(ScriptObject*,ScriptObject*,ScriptObject*,ScriptObject*,bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			AvmThunkUnbox_AvmObject(argv[argoff1]),
			AvmThunkUnbox_AvmObject(argv[argoff2]),
			AvmThunkUnbox_AvmObject(argv[argoff3]),
			AvmThunkUnbox_AvmObject(argv[argoff4]),
			AvmThunkUnbox_AvmBool32(argv[argoff5])
			//argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PPPPB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_ppppb_thunk, avmplus::NativeID::METHID },

///////////////////////////////////////////////////////////////////////
// for void () Function
AvmBox void_ppppppp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		  argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		  argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
		  argoff4 = argoff3 + AvmThunkArgSize_AvmObject,
		  argoff5 = argoff4 + AvmThunkArgSize_AvmObject,
		  argoff6 = argoff5 + AvmThunkArgSize_AvmObject,
		  argoff7 = argoff6 + AvmThunkArgSize_AvmObject,
	};
	typedef void (AvmObjectT::*FuncType)(ScriptObject*,ScriptObject*,ScriptObject*,ScriptObject*,ScriptObject*,ScriptObject*,ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL,
		argc>2?AvmThunkUnbox_AvmObject(argv[argoff3]):NULL,
		argc>3?AvmThunkUnbox_AvmObject(argv[argoff4]):NULL,
		argc>4?AvmThunkUnbox_AvmObject(argv[argoff5]):NULL,
		argc>5?AvmThunkUnbox_AvmObject(argv[argoff6]):NULL,
		argc>6?AvmThunkUnbox_AvmObject(argv[argoff7]):NULL
			//argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PPPPPPP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_ppppppp_thunk, avmplus::NativeID::METHID },


///////////////////////////////////////////////////////////////////////
// for void () Function
AvmBox void_pppppppd_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		  argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		  argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
		  argoff4 = argoff3 + AvmThunkArgSize_AvmObject,
		  argoff5 = argoff4 + AvmThunkArgSize_AvmObject,
		  argoff6 = argoff5 + AvmThunkArgSize_AvmObject,
		  argoff7 = argoff6 + AvmThunkArgSize_AvmObject,
		  argoff8 = argoff7 + AvmThunkArgSize_AvmObject,
	};
	typedef void (AvmObjectT::*FuncType)(ScriptObject*,ScriptObject*,ScriptObject*,ScriptObject*,ScriptObject*,ScriptObject*,ScriptObject*,double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			AvmThunkUnbox_AvmObject(argv[argoff1]),
			AvmThunkUnbox_AvmObject(argv[argoff2]),
			AvmThunkUnbox_AvmObject(argv[argoff3]),
			AvmThunkUnbox_AvmObject(argv[argoff4]),
			argc>4?AvmThunkUnbox_AvmObject(argv[argoff5]):NULL,
			argc>5?AvmThunkUnbox_AvmObject(argv[argoff6]):NULL,
			argc>6?AvmThunkUnbox_AvmObject(argv[argoff7]):NULL,
			argc>7?AvmThunkUnbox_double(argv[argoff8]):0
			//argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PPPPPPPD(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_pppppppd_thunk, avmplus::NativeID::METHID },

///////////////////////////////////////////////////////////////////////
// for void () Function
AvmBox u_pppppppb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		  argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		  argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
		  argoff4 = argoff3 + AvmThunkArgSize_AvmObject,
		  argoff5 = argoff4 + AvmThunkArgSize_AvmObject,
		  argoff6 = argoff5 + AvmThunkArgSize_AvmObject,
		  argoff7 = argoff6 + AvmThunkArgSize_AvmObject,
		  argoff8 = argoff7 + AvmThunkArgSize_AvmObject,
	};
	typedef uint32_t (AvmObjectT::*FuncType)(ScriptObject*,ScriptObject*,ScriptObject*,ScriptObject*,ScriptObject*,ScriptObject*,ScriptObject*,bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			AvmThunkUnbox_AvmObject(argv[argoff1]),
			AvmThunkUnbox_AvmObject(argv[argoff2]),
			AvmThunkUnbox_AvmObject(argv[argoff3]),
			AvmThunkUnbox_AvmObject(argv[argoff4]),
			AvmThunkUnbox_AvmObject(argv[argoff5]),
			AvmThunkUnbox_AvmObject(argv[argoff6]),
			AvmThunkUnbox_AvmObject(argv[argoff7]),
			argc>7?AvmThunkUnbox_AvmBool32(argv[argoff8]):false
			//argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL
		);
}

#define AVMTHUNK_NATIVE_METHOD_U_PPPPPPPB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)u_pppppppb_thunk, avmplus::NativeID::METHID },


///////////////////////////////////////////////////////////////////////
// for void () Function
AvmBox i_pppppp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		  argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		  argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
		  argoff4 = argoff3 + AvmThunkArgSize_AvmObject,
		  argoff5 = argoff4 + AvmThunkArgSize_AvmObject,
		  argoff6 = argoff5 + AvmThunkArgSize_AvmObject,
	};
	typedef AvmBox (AvmObjectT::*FuncType)(ScriptObject*,ScriptObject*,ScriptObject*,ScriptObject*,ScriptObject*,ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			AvmThunkUnbox_AvmObject(argv[argoff1]),
			AvmThunkUnbox_AvmObject(argv[argoff2]),
			AvmThunkUnbox_AvmObject(argv[argoff3]),
			AvmThunkUnbox_AvmObject(argv[argoff4]),
			AvmThunkUnbox_AvmObject(argv[argoff5]),
			AvmThunkUnbox_AvmObject(argv[argoff6])			//argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_I_PPPPPP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)i_pppppp_thunk, avmplus::NativeID::METHID },

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for void () Function
AvmBox p_ppppp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		  argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		  argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
		  argoff4 = argoff3 + AvmThunkArgSize_AvmObject,
		  argoff5 = argoff4 + AvmThunkArgSize_AvmObject,
	};
	typedef AvmBox (AvmObjectT::*FuncType)(ScriptObject*,ScriptObject*,ScriptObject*,ScriptObject*,ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			AvmThunkUnbox_AvmObject(argv[argoff1]),
			AvmThunkUnbox_AvmObject(argv[argoff2]),
			AvmThunkUnbox_AvmObject(argv[argoff3]),
			argc>=4?AvmThunkUnbox_AvmObject(argv[argoff4]):NULL,
			argc>=5?AvmThunkUnbox_AvmObject(argv[argoff5]):NULL
			//argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL
		);
}

#define AVMTHUNK_NATIVE_METHOD_P_PPPPP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_ppppp_thunk, avmplus::NativeID::METHID },

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for void () Function
AvmBox void_pppppb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		  argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		  argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
		  argoff4 = argoff3 + AvmThunkArgSize_AvmObject,
		  argoff5 = argoff4 + AvmThunkArgSize_AvmObject,
		  argoff6 = argoff5 + AvmThunkArgSize_AvmObject,
	};
	typedef void (AvmObjectT::*FuncType)(ScriptObject*,ScriptObject*,ScriptObject*,ScriptObject*,ScriptObject*,bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			AvmThunkUnbox_AvmObject(argv[argoff1]),
			argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL,
			argc>2?AvmThunkUnbox_AvmObject(argv[argoff3]):NULL,
			argc>3?AvmThunkUnbox_AvmObject(argv[argoff4]):NULL,
			argc>4?AvmThunkUnbox_AvmObject(argv[argoff5]):NULL,
			argc>5?AvmThunkUnbox_AvmBool32(argv[argoff6]):false
			//argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PPPPPB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_pppppb_thunk, avmplus::NativeID::METHID },


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for void () Function
AvmBox void_pp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		  argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
	};
	typedef void (AvmObjectT::*FuncType)(ScriptObject*,ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
			argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL
			//argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_pp_thunk, avmplus::NativeID::METHID },

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for void () Function
AvmBox void_ppb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		  argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		  argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
	};
	typedef void (AvmObjectT::*FuncType)(Stringp,ScriptObject*,bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
			argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):(ScriptObject*)NULL,
			argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false
			//argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PPB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_ppb_thunk, avmplus::NativeID::METHID },
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for void SET(Pointer) Function
AvmBox bool_p_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0, argoff1 = argoff0 + AvmThunkArgSize_AvmObject};
	typedef bool (AvmObjectT::*FuncType)(ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (AvmBox)(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))(AvmThunkUnbox_AvmObject(argv[argoff1]));
	//return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_BOOL_P(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)bool_p_thunk, avmplus::NativeID::METHID },
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for uint32 GET function

AvmBox u_void_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	typedef uint32 (AvmObjectT::*FuncType)(void);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (AvmBox)(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))();

}

#define AVMTHUNK_NATIVE_METHOD_U_VOID(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)u_void_thunk, avmplus::NativeID::METHID },
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for int GET function
AvmBox i_void_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	typedef int (AvmObjectT::*FuncType)(void);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (AvmBox)(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))();

}

#define AVMTHUNK_NATIVE_METHOD_I_VOID(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)i_void_thunk, avmplus::NativeID::METHID },
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for int GET function
AvmBox void_i_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0, argoff1 = argoff0 + AvmThunkArgSize_AvmObject};
	typedef void (AvmObjectT::*FuncType)(int);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			argc?AvmThunkUnbox_int32_t(argv[1]):0
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_I(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_i_thunk, avmplus::NativeID::METHID },

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for int GET function
AvmBox void_iibu_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum
	{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_int32_t,
		argoff3 = argoff2 + AvmThunkArgSize_int32_t,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
	};
	typedef void (AvmObjectT::*FuncType)(int,int,bool,uint32_t);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(AvmThunkUnbox_int32_t(argv[argoff1]),
		AvmThunkUnbox_int32_t(argv[argoff2]),
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):true,
		argc>3?AvmThunkUnbox_uint32_t(argv[argoff4]):0xffffffff
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_IIBU(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_iibu_thunk, avmplus::NativeID::METHID },



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for int GET function
AvmBox void_iidb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum
	{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_int32_t,
		argoff3 = argoff2 + AvmThunkArgSize_int32_t,
		argoff4 = argoff3 + AvmThunkArgSize_double,
	};
	typedef void (AvmObjectT::*FuncType)(int,int,double,bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(AvmThunkUnbox_int32_t(argv[argoff1]),
		AvmThunkUnbox_int32_t(argv[argoff2]),
		AvmThunkUnbox_double(argv[argoff3]),
		argc>3?AvmThunkUnbox_AvmBool32(argv[argoff4]):true
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_IIDB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_iidb_thunk, avmplus::NativeID::METHID },




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for int GET function
AvmBox void_iii_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum
	{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_int32_t,
		argoff3 = argoff2 + AvmThunkArgSize_int32_t,
	};
	typedef void (AvmObjectT::*FuncType)(int,int,int);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(AvmThunkUnbox_int32_t(argv[argoff1]),
		AvmThunkUnbox_int32_t(argv[argoff2]),
		AvmThunkUnbox_int32_t(argv[argoff3])
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_III(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_iii_thunk, avmplus::NativeID::METHID },


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for int GET function
AvmBox p_iiii_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum
	{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_int32_t,
		argoff3 = argoff2 + AvmThunkArgSize_int32_t,
		argoff4 = argoff3 + AvmThunkArgSize_int32_t,
	};
	typedef AvmBox (AvmObjectT::*FuncType)(int,int,int,int);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(AvmThunkUnbox_int32_t(argv[argoff1]),
		AvmThunkUnbox_int32_t(argv[argoff2]),
		AvmThunkUnbox_int32_t(argv[argoff3]),
		AvmThunkUnbox_int32_t(argv[argoff4])
		);
	//return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_P_IIII(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_iiii_thunk, avmplus::NativeID::METHID },

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for int GET function
AvmBox void_pii_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum
	{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_int32_t,
	};
	typedef void (AvmObjectT::*FuncType)(ScriptObject*,int,int);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(AvmThunkUnbox_AvmObject(argv[argoff1]),
		argc>1?AvmThunkUnbox_int32_t(argv[argoff2]):-1,
		argc>2?AvmThunkUnbox_int32_t(argv[argoff3]):-1
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PII(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_pii_thunk, avmplus::NativeID::METHID },

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for int GET function
int i_ii_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum
	{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_int32_t,
	};
	typedef int (AvmObjectT::*FuncType)(int,int);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		AvmThunkUnbox_int32_t(argv[argoff1]),
		AvmThunkUnbox_int32_t(argv[argoff2])
		);
}

#define AVMTHUNK_NATIVE_METHOD_I_II(METHID, IMPL)\
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)i_ii_thunk, avmplus::NativeID::METHID },

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for int GET function
int i_pii_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum
	{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_int32_t,
		argoff3 = argoff2 + AvmThunkArgSize_int32_t
	};
	typedef int (AvmObjectT::*FuncType)(ScriptObject*,int,int);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		AvmThunkUnbox_AvmObject(argv[argoff1]),
		AvmThunkUnbox_int32_t(argv[argoff2]),
		AvmThunkUnbox_int32_t(argv[argoff3])
		);
}

#define AVMTHUNK_NATIVE_METHOD_I_PII(METHID, IMPL)\
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)i_pii_thunk, avmplus::NativeID::METHID },
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for int GET function
int void_ii_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum
	{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_int32_t,
	};
	typedef void (AvmObjectT::*FuncType)(int,int);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		AvmThunkUnbox_int32_t(argv[argoff1]),
		AvmThunkUnbox_int32_t(argv[argoff2])
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_II(METHID, IMPL)\
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_ii_thunk, avmplus::NativeID::METHID },

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (void)(void) function
AvmBox void_void_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0, argoff1 = argoff0 + AvmThunkArgSize_AvmObject};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(void);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))();
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_VOID(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_void_thunk, avmplus::NativeID::METHID },
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (void)(void) function
AvmBox p_p_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject};
	(void)argc;
	typedef AvmBox (AvmObjectT::*FuncType)(ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL);
	//return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_P_P(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_p_thunk, avmplus::NativeID::METHID },
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (void)(void) function
AvmBox p_i_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject};
	(void)argc;
	typedef AvmBox (AvmObjectT::*FuncType)(int32_t);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_int32_t(argv[argoff1]));
	//return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_P_I(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_i_thunk, avmplus::NativeID::METHID },
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (void)(void) function
AvmBox b_p_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject};
	(void)argc;
	typedef bool (AvmObjectT::*FuncType)(ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_AvmObject(argv[argoff1]));
	//return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_B_P(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)b_p_thunk, avmplus::NativeID::METHID },
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for bool(p,p) function
AvmBox b_pp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		 argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		 argoff2 = argoff1 + AvmThunkArgSize_AvmObject
		};
	(void)argc;
	typedef bool (AvmObjectT::*FuncType)(ScriptObject*,ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_AvmObject(argv[argoff1]),
		AvmThunkUnbox_AvmObject(argv[argoff2])
		);
	//return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_B_PP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)b_pp_thunk, avmplus::NativeID::METHID },
////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for bool(p,p,p) function
AvmBox b_ppp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		 argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		 argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		 argoff3 = argoff2 + AvmThunkArgSize_AvmObject
		};
	(void)argc;
	typedef bool (AvmObjectT::*FuncType)(ScriptObject*,ScriptObject*,ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_AvmObject(argv[argoff1]),
		AvmThunkUnbox_AvmObject(argv[argoff2]),
		AvmThunkUnbox_AvmObject(argv[argoff3])
		);
	//return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_B_PPP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)b_ppp_thunk, avmplus::NativeID::METHID },
////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for bool(p,i) function
AvmBox b_pi_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		 argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		 argoff2 = argoff1 + AvmThunkArgSize_AvmObject
		};
	(void)argc;
	typedef bool (AvmObjectT::*FuncType)(ScriptObject*,int);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_AvmObject(argv[argoff1]),
		AvmThunkUnbox_int32_t(argv[argoff2])
		);
	//return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_B_PI(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)b_pi_thunk, avmplus::NativeID::METHID },
////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (void)(void) function
AvmBox b_ddb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_double,
		argoff3 = argoff2 + AvmThunkArgSize_double,
	};
	(void)argc;
	typedef bool (AvmObjectT::*FuncType)(double,double,bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_double(argv[argoff1]),
		AvmThunkUnbox_double(argv[argoff2]),
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false
		);
	//return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_B_DDB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)b_ddb_thunk, avmplus::NativeID::METHID },

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (void)(void) function
AvmBox i_dd_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_double,
	};
	(void)argc;
	typedef int (AvmObjectT::*FuncType)(double,double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_double(argv[argoff1]),
		AvmThunkUnbox_double(argv[argoff2])
		);
	//return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_I_DD(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)i_dd_thunk, avmplus::NativeID::METHID },

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (void)(void) function
AvmBox p_dd_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_double,
	};
	(void)argc;
	typedef AvmBox (AvmObjectT::*FuncType)(double,double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_double(argv[argoff1]),
		AvmThunkUnbox_double(argv[argoff2])
		);
	//return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_P_DD(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_dd_thunk, avmplus::NativeID::METHID },
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (void)(void) function
AvmBox void_dd_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_double,
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(double,double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		argc?AvmThunkUnbox_double(argv[argoff1]):1,
		argc>1?AvmThunkUnbox_double(argv[argoff2]):0
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_DD(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_dd_thunk, avmplus::NativeID::METHID },

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (void)(void) function
AvmBox void_dudbpppd_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_double,
		argoff3 = argoff2 + AvmThunkArgSize_uint32_t,
		argoff4 = argoff3 + AvmThunkArgSize_double,
		argoff5 = argoff4 + AvmThunkArgSize_AvmBool32,
		argoff6 = argoff5 + AvmThunkArgSize_AvmObject,
		argoff7 = argoff6 + AvmThunkArgSize_AvmObject,
		argoff8 = argoff7 + AvmThunkArgSize_AvmObject,

	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(double,uint32_t,double,bool,ScriptObject*,ScriptObject*,ScriptObject*,double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		argc?AvmThunkUnbox_double(argv[argoff1]):0,
		argc>1?AvmThunkUnbox_uint32_t(argv[argoff2]):0,
		argc>2?AvmThunkUnbox_double(argv[argoff3]):1,
		argc>3?AvmThunkUnbox_AvmBool32(argv[argoff4]):false,
		argc>4?AvmThunkUnbox_AvmObject(argv[argoff5]):NULL,
		argc>5?AvmThunkUnbox_AvmObject(argv[argoff6]):NULL,
		argc>6?AvmThunkUnbox_AvmObject(argv[argoff7]):NULL,
		argc>7?AvmThunkUnbox_double(argv[argoff8]):3
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_DUDBPPPD(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_dudbpppd_thunk, avmplus::NativeID::METHID },



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (void)(void) function
AvmBox void_ud_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_uint32_t,
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(uint32_t,double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_uint32_t(argv[argoff1]),
		argc>1?AvmThunkUnbox_double(argv[argoff2]):1
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_UD(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_ud_thunk, avmplus::NativeID::METHID },



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (void)(void) function
AvmBox void_dduibbubp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_double,
		argoff3 = argoff2 + AvmThunkArgSize_double,
		argoff4 = argoff3 + AvmThunkArgSize_uint32_t,
		argoff5 = argoff4 + AvmThunkArgSize_int32_t,
		argoff6 = argoff5 + AvmThunkArgSize_AvmBool32,
		argoff7 = argoff6 + AvmThunkArgSize_AvmBool32,
		argoff8 = argoff7 + AvmThunkArgSize_uint32_t,
		argoff9 = argoff8 + AvmThunkArgSize_AvmBool32,
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(double,double,uint32_t,int32_t,bool,bool,uint32_t,bool,ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_double(argv[argoff1]),
		AvmThunkUnbox_double(argv[argoff2]),
		AvmThunkUnbox_uint32_t(argv[argoff3]),
		AvmThunkUnbox_int32_t(argv[argoff4]),
		AvmThunkUnbox_AvmBool32(argv[argoff5]),
		AvmThunkUnbox_AvmBool32(argv[argoff6]),
		AvmThunkUnbox_uint32_t(argv[argoff7]),
		AvmThunkUnbox_AvmBool32(argv[argoff8]),
		AvmThunkUnbox_AvmObject(argv[argoff9])
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_DDUIBBUBP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_dduibbubp_thunk, avmplus::NativeID::METHID },

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (void)(doub,edoub,e...) function
AvmBox void_ddddd_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_double,
		argoff3 = argoff2 + AvmThunkArgSize_double,
		argoff4 = argoff3 + AvmThunkArgSize_double,
		argoff5 = argoff4 + AvmThunkArgSize_double,
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(double,double,double,double,double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_double(argv[argoff1]),
		AvmThunkUnbox_double(argv[argoff2]),
		AvmThunkUnbox_double(argv[argoff3]),
		AvmThunkUnbox_double(argv[argoff4]),
		AvmThunkUnbox_double(argv[argoff5])
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_DDDDD(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_ddddd_thunk, avmplus::NativeID::METHID },


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (void)(doub,edoub,e...) function
AvmBox void_dddd_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_double,
		argoff3 = argoff2 + AvmThunkArgSize_double,
		argoff4 = argoff3 + AvmThunkArgSize_double,
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(double,double,double,double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_double(argv[argoff1]),
		AvmThunkUnbox_double(argv[argoff2]),
		AvmThunkUnbox_double(argv[argoff3]),
		AvmThunkUnbox_double(argv[argoff4])
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_DDDD(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_dddd_thunk, avmplus::NativeID::METHID },
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (void)(doub,edoub,e...) function
AvmBox void_ddd_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_double,
		argoff3 = argoff2 + AvmThunkArgSize_double,
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(double,double,double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_double(argv[argoff1]),
		AvmThunkUnbox_double(argv[argoff2]),
		AvmThunkUnbox_double(argv[argoff3])
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_DDD(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_ddd_thunk, avmplus::NativeID::METHID },
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (void)(doub,edoub,e...) function
AvmBox void_dddddddd_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_double,
		argoff3 = argoff2 + AvmThunkArgSize_double,
		argoff4 = argoff3 + AvmThunkArgSize_double,
		argoff5 = argoff4 + AvmThunkArgSize_double,
		argoff6 = argoff5 + AvmThunkArgSize_double,
		argoff7 = argoff6 + AvmThunkArgSize_double,
		argoff8 = argoff7 + AvmThunkArgSize_double,
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(double,double,double,double,double,double,double,double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_double(argv[argoff1]),
		AvmThunkUnbox_double(argv[argoff2]),
		AvmThunkUnbox_double(argv[argoff3]),
		AvmThunkUnbox_double(argv[argoff4]),
		AvmThunkUnbox_double(argv[argoff5]),
		AvmThunkUnbox_double(argv[argoff6]),
		AvmThunkUnbox_double(argv[argoff7]),
		AvmThunkUnbox_double(argv[argoff8])
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_DDDDDDDD(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_dddddddd_thunk, avmplus::NativeID::METHID },
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// for (void)(doub,edoub,e...) function
AvmBox void_dddddd_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_double,
		argoff3 = argoff2 + AvmThunkArgSize_double,
		argoff4 = argoff3 + AvmThunkArgSize_double,
		argoff5 = argoff4 + AvmThunkArgSize_double,
		argoff6 = argoff5 + AvmThunkArgSize_double,
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(double,double,double,double,double,double);
	double rx=AvmThunkUnbox_double(argv[argoff5]);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_double(argv[argoff1]),
		AvmThunkUnbox_double(argv[argoff2]),
		AvmThunkUnbox_double(argv[argoff3]),
		AvmThunkUnbox_double(argv[argoff4]),
		argc>4?AvmThunkUnbox_double(argv[argoff5]):rx,
		argc>5?AvmThunkUnbox_double(argv[argoff6]):rx
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_DDDDDD(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_dddddd_thunk, avmplus::NativeID::METHID },
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AvmBox( String,args)
AvmBox p_sa_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0, argoff1 = argoff0 + AvmThunkArgSize_AvmObject,argoff2=argoff1+AvmThunkArgSize_AvmString};
	(void)argc;
	typedef AvmBox (AvmObjectT::*FuncType)(Stringp,ArrayObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(AvmThunkUnbox_AvmString(argv[argoff1]),(ArrayObject*)AvmThunkUnbox_AvmObject(argv[argoff2]));
	//return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_P_SA(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_sa_thunk, avmplus::NativeID::METHID },
////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// void(String,bool,bool)
AvmBox void_sbb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		  argoff2=argoff1+AvmThunkArgSize_AvmString,
		  argoff3 = argoff2+AvmThunkArgSize_AvmBool32
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(Stringp,bool,bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_AvmString(argv[argoff1]),
		argc>=2?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>=3?AvmThunkUnbox_AvmBool32(argv[argoff3]):false
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbb_thunk, avmplus::NativeID::METHID },
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// void(String,bool,bool)
AvmBox void_sbbb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0+AvmThunkArgSize_AvmObject,
		  argoff2 = argoff1+AvmThunkArgSize_AvmString,
		  argoff3 = argoff2+AvmThunkArgSize_AvmBool32,
		  argoff4 = argoff3+AvmThunkArgSize_AvmBool32
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(Stringp,bool,bool,bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_AvmString(argv[argoff1]),
		argc>=2?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>=3?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>=4?AvmThunkUnbox_AvmBool32(argv[argoff4]):false
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbb_thunk, avmplus::NativeID::METHID },
/////////////////////////////////////////////////////////////////////////////////////////////////
AvmBox void_sbbbb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		  argoff2 = argoff1+AvmThunkArgSize_AvmString,
		  argoff3 = argoff2+AvmThunkArgSize_AvmBool32,
		  argoff4 = argoff3+AvmThunkArgSize_AvmBool32,
		  argoff5 = argoff4+AvmThunkArgSize_AvmBool32
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(Stringp,bool,bool,bool,bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_AvmString(argv[argoff1]),
		argc>=2?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>=3?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>=4?AvmThunkUnbox_AvmBool32(argv[argoff4]):false,
		argc>=5?AvmThunkUnbox_AvmBool32(argv[argoff5]):false
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBBB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbbb_thunk, avmplus::NativeID::METHID },
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//dushixiong 2011-3-26	--start
//for ContextMenuEvent::AS3_constructor
AvmBox void_sbbpp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1+AvmThunkArgSize_AvmString,
		argoff3 = argoff2+AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3+AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_AvmObject
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(Stringp,bool,bool,ScriptObject*, ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_AvmString(argv[argoff1]),
		argc>=2?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>=3?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>=4?AvmThunkUnbox_AvmObject(argv[argoff4]):NULL,
		argc>=5?AvmThunkUnbox_AvmObject(argv[argoff5]):NULL
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBPP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbpp_thunk, avmplus::NativeID::METHID },
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//for StatusEvent::AS3_constructor
AvmBox void_sbbs_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1+AvmThunkArgSize_AvmString,
		argoff3 = argoff2+AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3+AvmThunkArgSize_AvmBool32,
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(Stringp,bool,bool,Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_AvmString(argv[argoff1]),
		argc>=2?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>=3?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>=4?AvmThunkUnbox_AvmString(argv[argoff4]):NULL
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbs_thunk, avmplus::NativeID::METHID },
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//for StatusEvent::AS3_constructor
AvmBox void_sbbss_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1+AvmThunkArgSize_AvmString,
		argoff3 = argoff2+AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3+AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4+AvmThunkArgSize_AvmString
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(Stringp,bool,bool,Stringp, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_AvmString(argv[argoff1]),
		argc>=2?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>=3?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>=4?AvmThunkUnbox_AvmString(argv[argoff4]):(Stringp)env->core()->kEmptyString,
		argc>=5?AvmThunkUnbox_AvmString(argv[argoff5]):(Stringp)env->core()->kEmptyString
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBSS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbss_thunk, avmplus::NativeID::METHID },
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//for AsyncErrorEvent::AS3_constructor
AvmBox void_sbbsp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1+AvmThunkArgSize_AvmString,
		argoff3 = argoff2+AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3+AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_AvmString
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(Stringp,bool,bool,Stringp, ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_AvmString(argv[argoff1]),
		argc>=2?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>=3?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>=4?AvmThunkUnbox_AvmString(argv[argoff4]):(Stringp)env->core()->kEmptyString,
		argc>=5?AvmThunkUnbox_AvmObject(argv[argoff5]):NULL
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBSP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbsp_thunk, avmplus::NativeID::METHID },
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//for FocusEvent::AS3_constructor
AvmBox void_sbbpbu_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2=argoff1+AvmThunkArgSize_AvmString,
		argoff3 = argoff2+AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3+AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_AvmObject,
		argoff6 = argoff5 + AvmThunkArgSize_AvmBool32
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(Stringp,bool,bool,ScriptObject*,bool,uint32_t);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_AvmString(argv[argoff1]),
		argc>=2?AvmThunkUnbox_AvmBool32(argv[argoff2]):true,
		argc>=3?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>=4?AvmThunkUnbox_AvmObject(argv[argoff4]):NULL,
		argc>=5?AvmThunkUnbox_AvmBool32(argv[argoff5]):false,
		argc>=6?AvmThunkUnbox_uint32_t(argv[argoff6]):0
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBPBU(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbpbu_thunk, avmplus::NativeID::METHID },
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//for HTTPStatusEvent::AS3_constructor
AvmBox void_sbbi_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2=argoff1+AvmThunkArgSize_AvmString,
		argoff3 = argoff2+AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(Stringp,bool,bool,int32_t);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_AvmString(argv[argoff1]),
		argc>=2?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>=3?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>=4?AvmThunkUnbox_int32_t(argv[argoff4]):0
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBI(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbi_thunk, avmplus::NativeID::METHID },

/////////////////////////////////////////////////////////
AvmBox void_sbbib_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2=argoff1+AvmThunkArgSize_AvmString,
		argoff3 = argoff2+AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_int32_t
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(Stringp,bool,bool,int32_t,bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_AvmString(argv[argoff1]),
		argc>=2?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>=3?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>=4?AvmThunkUnbox_int32_t(argv[argoff4]):0,
		argc>=5?AvmThunkUnbox_AvmBool32(argv[argoff5]):false
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBIB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbib_thunk, avmplus::NativeID::METHID },
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//for KeyboardEvent::AS3_constructor
AvmBox void_sbbuuubbb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2=  argoff1+AvmThunkArgSize_AvmString,
		argoff3 = argoff2+AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3+AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_uint32_t,
		argoff6 = argoff5 + AvmThunkArgSize_uint32_t,
		argoff7 = argoff6 + AvmThunkArgSize_uint32_t,
		argoff8 = argoff7 + AvmThunkArgSize_AvmBool32,
		argoff9 = argoff8 + AvmThunkArgSize_AvmBool32,
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(Stringp,bool,bool,uint32_t,uint32_t,uint32_t,bool,bool,bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_AvmString(argv[argoff1]),
		argc>=2?AvmThunkUnbox_AvmBool32(argv[argoff2]):true,
		argc>=3?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>=4?AvmThunkUnbox_uint32_t(argv[argoff4]):0,
		argc>=5?AvmThunkUnbox_uint32_t(argv[argoff5]):0,
		argc>=6?AvmThunkUnbox_uint32_t(argv[argoff6]):0,
		argc>=7?AvmThunkUnbox_AvmBool32(argv[argoff7]):false,
		argc>=8?AvmThunkUnbox_AvmBool32(argv[argoff8]):false,
		argc>=9?AvmThunkUnbox_AvmBool32(argv[argoff9]):false
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBUUUBBB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbuuubbb_thunk, avmplus::NativeID::METHID },
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//for MouseEvent::AS3_constructor
AvmBox void_sbbddpbbbbi_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2=  argoff1+AvmThunkArgSize_AvmString,
		argoff3 = argoff2+AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3+AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_double,
		argoff6 = argoff5 + AvmThunkArgSize_double,
		argoff7 = argoff6 + AvmThunkArgSize_AvmObject,
		argoff8 = argoff7 + AvmThunkArgSize_AvmBool32,
		argoff9 = argoff8 + AvmThunkArgSize_AvmBool32,
		argoff10 = argoff9 + AvmThunkArgSize_AvmBool32,
		argoff11 = argoff10 + AvmThunkArgSize_AvmBool32
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(Stringp,bool,bool,double,double,ScriptObject*,bool,bool,bool,bool,int32_t);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_AvmString(argv[argoff1]),
		argc>=2?AvmThunkUnbox_AvmBool32(argv[argoff2]):true,
		argc>=3?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>=4?AvmThunkUnbox_double(argv[argoff4]):MathUtils::kNaN,
		argc>=5?AvmThunkUnbox_double(argv[argoff5]):MathUtils::kNaN,
		argc>=6?AvmThunkUnbox_AvmObject(argv[argoff6]):NULL,
		argc>=7?AvmThunkUnbox_AvmBool32(argv[argoff7]):false,
		argc>=8?AvmThunkUnbox_AvmBool32(argv[argoff8]):false,
		argc>=9?AvmThunkUnbox_AvmBool32(argv[argoff9]):false,
		argc>=10?AvmThunkUnbox_AvmBool32(argv[argoff10]):false,
		argc>=11?AvmThunkUnbox_int32_t(argv[argoff11]):0
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBDDPBBBBI(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbddpbbbbi_thunk, avmplus::NativeID::METHID },
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//for ProgressEvent::AS3_constructor
AvmBox void_sbbuu_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1+AvmThunkArgSize_AvmString,
		argoff3 = argoff2+AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_uint32_t
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(Stringp,bool,bool,uint32_t,uint32_t);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		AvmThunkUnbox_AvmString(argv[argoff1]),
		argc>=2?AvmThunkUnbox_AvmBool32(argv[argoff2]):XFALSE,
		argc>=3?AvmThunkUnbox_AvmBool32(argv[argoff3]):XFALSE,
		argc>=4?AvmThunkUnbox_uint32_t(argv[argoff4]):0,
		argc>=5?AvmThunkUnbox_uint32_t(argv[argoff5]):0
		);
	return kAvmThunkUndefined;
}
#define AVMTHUNK_NATIVE_METHOD_VOID_SBBUU(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbuu_thunk, avmplus::NativeID::METHID },
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//for NetStatusEvent::AS3_constructor
AvmBox void_sbbp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2=argoff1+AvmThunkArgSize_AvmString,
		argoff3 = argoff2+AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3+AvmThunkArgSize_AvmBool32
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(Stringp,bool,bool,ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>3?AvmThunkUnbox_AvmObject(argv[argoff4]):NULL
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbp_thunk, avmplus::NativeID::METHID },
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//dushixiong 2011-3-26 --end

AvmBox nativetrace_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0, argoff1 = argoff0 + AvmThunkArgSize_AvmObject};
	(void)argc;
     typedef void (*FuncType)(AvmMethodEnv,ScriptObject*);
    const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
    (*func)(env,AvmThunkUnbox_AvmObject(argv[argoff1]));


	return kAvmThunkUndefined;
      //  , env,argc,argv)
    //);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AvmBox flash_utils_clearInterval_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject
		};
	(void)argc;
     typedef void (*FuncType)(AvmMethodEnv,uint32);
    const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
    (*func)(env,AvmThunkUnbox_uint32_t(argv[argoff1]));
	return kAvmThunkUndefined;
      //  , env,argc,argv)
    //);
}
#define flash_utils_clearTimeout_thunk flash_utils_clearInterval_thunk

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AvmBox flash_utils_describeType_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject
		};
	(void)argc;
     typedef AvmBox (*FuncType)(AvmMethodEnv,ScriptObject*,Atom);
    const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
    return (*func)(env,
				   AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0]),
				   argv[argoff1]);
      //  , env,argc,argv)
    //);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AvmBox flash_utils_describeTypeJSON_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		  argoff2 = argoff1 + AvmThunkArgSize_AvmObject
		};
	(void)argc;
     typedef AvmBox (*FuncType)(AvmMethodEnv,Atom,uint32);
    const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
    return (*func)(env,
				   argv[argoff1],
				   AvmThunkUnbox_uint32_t(argv[argoff2]));
      //  , env,argc,argv)
    //);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AvmBox flash_utils_escapeMultiByte_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject
		};
	(void)argc;
     typedef AvmBox (*FuncType)(AvmMethodEnv,ScriptObject*,Stringp);
    const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
    return (*func)
		(
			env,
			AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0]),
			AvmThunkUnbox_AvmString(argv[argoff1])
		);
      //  , env,argc,argv)
    //);
}
#define flash_utils_getDefinitionByName_thunk flash_utils_escapeMultiByte_thunk
#define flash_utils_getQualifiedClassName_thunk flash_utils_describeType_thunk
#define flash_utils_getQualifiedSuperclassName_thunk flash_utils_describeType_thunk
#define flash_utils_unescapeMultiByte_thunk flash_utils_escapeMultiByte_thunk

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AvmBox flash_utils_getTimer_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject
		};
	(void)argc;
     typedef AvmBox (*FuncType)(AvmMethodEnv);
    const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
    return (*func)(env);
      //  , env,argc,argv)
    //);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AvmBox flash_utils_nativeSetInterval_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		  argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		  argoff3 = argoff2 + AvmThunkArgSize_double,
		};
	(void)argc;
     typedef AvmBox (*FuncType)(AvmMethodEnv,ScriptObject*,double,ScriptObject*);
    const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
    return (*func)(env,AvmThunkUnbox_AvmObject(argv[argoff1]),
					   AvmThunkUnbox_double(argv[argoff2]),
					   AvmThunkUnbox_AvmObject(argv[argoff3])
		);
      //  , env,argc,argv)
    //);
}
#define flash_utils_nativeSetTimeout_thunk flash_utils_nativeSetInterval_thunk

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AvmBox flash_system_fscommand_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		  argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		};
	(void)argc;
     typedef AvmBox (*FuncType)(AvmMethodEnv,Stringp,Stringp);
    const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	Stringp s=env->core()->kEmptyString;
	if(argc>1)
		s=AvmThunkUnbox_AvmString(argv[argoff2]);
	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
    (*func)(env,AvmThunkUnbox_AvmString(argv[argoff1]),s);
    return kAvmThunkUndefined;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AvmBox flash_profiler_showRedrawRegions_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		  argoff2 = argoff1 + AvmThunkArgSize_AvmBool32,
		};
	(void)argc;
     typedef AvmBox (*FuncType)(AvmMethodEnv,bool,uint32_t);
    const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	//Stringp s=env->core()->kEmptyString;
	uint32_t color=0xff000000;
	if(argc>1)
		color=AvmThunkUnbox_uint32_t(argv[argoff2]);
	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
    (*func)(env,AvmThunkUnbox_AvmBool32(argv[argoff1]),color);
    return kAvmThunkUndefined;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AvmBox flash_net_getClassByAlias_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		};
	(void)argc;
     typedef AvmBox (*FuncType)(AvmMethodEnv,Stringp);
    const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
    return (*func)(env,AvmThunkUnbox_AvmString(argv[argoff1]));
}

#define adobe_utils_MMExecute_thunk flash_net_getClassByAlias_thunk

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AvmBox flash_net_navigateToURL_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		  argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		};
	(void)argc;
     typedef void (*FuncType)(AvmMethodEnv,ScriptObject*,Stringp);
    const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
	(*func)(env,AvmThunkUnbox_AvmObject(argv[argoff1]),argc>=2?AvmThunkUnbox_AvmString(argv[argoff2]):NULL);
	return kAvmThunkUndefined;
}

#define flash_net_registerClassAlias_thunk flash_net_navigateToURL_thunk

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AvmBox flash_net_sendToURL_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		};
	(void)argc;
     typedef void (*FuncType)(AvmMethodEnv,ScriptObject*);
    const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
    (*func)(env,AvmThunkUnbox_AvmObject(argv[argoff1]));
	return kAvmThunkUndefined;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
AvmBox window_get_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		};
	(void)argc;
     typedef Atom (*FuncType)(AvmMethodEnv);
    const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
    return (*func)(env);
	//return kAvmThunkUndefined;
}


//new adds
#define flash_sampler_setSamplerCallback_thunk flash_net_sendToURL_thunk
//new adds end

//new adds
AvmBox flash_media_scanHardware_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum 
	{
		argoff0 = 0
	};
	(void)argc;
	typedef void (*FuncType)(AvmMethodEnv);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
	(*func)(env);
	return kAvmThunkUndefined;
}
#define flash_sampler_stopSampling_thunk flash_media_scanHardware_thunk
#define flash_sampler_startSampling_thunk flash_media_scanHardware_thunk
#define flash_sampler_pauseSampling_thunk flash_media_scanHardware_thunk
#define flash_sampler_clearSamples_thunk flash_media_scanHardware_thunk


AvmBox adobe_utils_MMEndCommand_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum 
	{
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmBool32,
	};
	(void)argc;
	typedef void (*FuncType)(AvmMethodEnv,bool,Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
	(*func)(env,AvmThunkUnbox_AvmBool32(argv[argoff1]),AvmThunkUnbox_AvmString(argv[argoff2]));
	return kAvmThunkUndefined;
}

AvmBox flash_sampler_sampleInternalAllocs_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
	};
	(void)argc;
	typedef void (*FuncType)(AvmMethodEnv,bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
	(*func)(env,AvmThunkUnbox_AvmBool32(argv[argoff1]));
	return kAvmThunkUndefined;
}

AvmBox flash_sampler_isGetterSetter_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum 
	{
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
	};
	(void)argc;
	typedef bool (*FuncType)(AvmMethodEnv,Atom,ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
	return (*func)(env,argv[argoff1],AvmThunkUnbox_AvmObject(argv[argoff2]));
}
double flash_sampler_getSize_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum 
	{
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
	};
	(void)argc;
	typedef double (*FuncType)(AvmMethodEnv,Atom);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
	return (*func)(env,argv[argoff1]);
}

double flash_sampler_getSetterInvocationCount_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum 
	{
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
	};
	(void)argc;
	typedef double (*FuncType)(AvmMethodEnv,Atom,ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
	return (*func)(env,argv[argoff1],AvmThunkUnbox_AvmObject(argv[argoff2]));
}
#define flash_sampler_getInvocationCount_thunk flash_sampler_getSetterInvocationCount_thunk
#define flash_sampler_getGetterInvocationCount_thunk flash_sampler_getSetterInvocationCount_thunk

AvmBox flash_sampler_getSavedThis_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum 
	{
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject
	};
	(void)argc;
	typedef Atom (*FuncType)(AvmMethodEnv, ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
	return (*func)(env, AvmThunkUnbox_AvmObject(argv[argoff1]));
}
AvmBox flash_sampler_getSamples_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum 
	{
		argoff0 = 0, 
	};
	(void)argc;
	typedef Atom (*FuncType)(AvmMethodEnv);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
	return (*func)(env);
}
double flash_sampler_getSampleCount_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum 
	{
		argoff0 = 0, 
	};
	(void)argc;
	typedef double (*FuncType)(AvmMethodEnv);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
	return (*func)(env);
}
AvmBox flash_sampler_getMemberNames_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum 
	{
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject
	};
	(void)argc;
	typedef Atom (*FuncType)(AvmMethodEnv, Atom, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
	return (*func)(env, argv[argoff1], AvmThunkUnbox_AvmBool32(argv[argoff2]));
}
AvmBox flash_sampler_getMasterString_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum 
	{
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject
	};
	(void)argc;
	typedef AvmBox (*FuncType)(AvmMethodEnv,Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
	return (*func)(env, AvmThunkUnbox_AvmString(argv[argoff1]));
}
AvmBox flash_sampler_getLexicalScopes_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum 
	{
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject
	};
	(void)argc;
	typedef AvmBox (*FuncType)(AvmMethodEnv, ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_FUNCTION_HANDLER(env));

	//return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(env,argc,argv);
	return (*func)(env, AvmThunkUnbox_AvmObject(argv[argoff1]));
}

AvmBox u_p_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum 
	{
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject
	};
	typedef uint32 (AvmObjectT::*FuncType)(ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			AvmThunkUnbox_AvmObject(argv[argoff1])
		);

}

#define AVMTHUNK_NATIVE_METHOD_U_P(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)u_p_thunk, avmplus::NativeID::METHID },

AvmBox void_sppb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
		argoff4 = argoff3 + AvmThunkArgSize_AvmObject
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, ScriptObject*, ScriptObject*, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		AvmThunkUnbox_AvmString(argv[argoff1]),
		AvmThunkUnbox_AvmObject(argv[argoff2]),
		AvmThunkUnbox_AvmObject(argv[argoff3]),
		AvmThunkUnbox_AvmBool32(argv[argoff4])
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SPPB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sppb_thunk, avmplus::NativeID::METHID },

AvmBox void_piis_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_int32_t,
		argoff4 = argoff3 + AvmThunkArgSize_int32_t
	};

	typedef void (AvmObjectT::*FuncType)(ScriptObject*, int32_t, int32_t, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		AvmThunkUnbox_AvmObject(argv[argoff1]),
		AvmThunkUnbox_int32_t(argv[argoff2]),
		AvmThunkUnbox_int32_t(argv[argoff3]),
		argc>3?AvmThunkUnbox_AvmString(argv[argoff4]):NULL
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PIIS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_piis_thunk, avmplus::NativeID::METHID },

AvmBox u_ssp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum 
	{
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmString
	};
	typedef uint32 (AvmObjectT::*FuncType)(Stringp, Stringp, ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		AvmThunkUnbox_AvmString(argv[argoff1]),
		AvmThunkUnbox_AvmString(argv[argoff2]),
		AvmThunkUnbox_AvmObject(argv[argoff3])
		);
}

#define AVMTHUNK_NATIVE_METHOD_U_SSP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)u_ssp_thunk, avmplus::NativeID::METHID },

AvmBox p_ddd_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum 
	{
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_double,
		argoff3 = argoff2 + AvmThunkArgSize_double
	};
	typedef AvmBox (AvmObjectT::*FuncType)(double, double, double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		AvmThunkUnbox_double(argv[argoff1]),
		AvmThunkUnbox_double(argv[argoff2]),
		AvmThunkUnbox_double(argv[argoff3])
		);
}

#define AVMTHUNK_NATIVE_METHOD_P_DDD(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_ddd_thunk, avmplus::NativeID::METHID },

AvmBox b_sss_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmString
	};

	typedef bool (AvmObjectT::*FuncType)(Stringp, Stringp, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		AvmThunkUnbox_AvmString(argv[argoff1]),
		AvmThunkUnbox_AvmString(argv[argoff2]),
		AvmThunkUnbox_AvmString(argv[argoff3])
		);
}

#define AVMTHUNK_NATIVE_METHOD_B_SSS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)b_sss_thunk, avmplus::NativeID::METHID },

AvmBox p_pddbp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_double,
		argoff4 = argoff3 + AvmThunkArgSize_double,
		argoff5 = argoff4 + AvmThunkArgSize_AvmBool32
	};

	typedef AvmBox (AvmObjectT::*FuncType)(ScriptObject*, double, double, bool, ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		AvmThunkUnbox_AvmObject(argv[argoff1]),
		AvmThunkUnbox_double(argv[argoff2]),
		argc>2?AvmThunkUnbox_double(argv[argoff3]):0,
		argc>3?AvmThunkUnbox_AvmBool32(argv[argoff4]):false,
		argc>4?AvmThunkUnbox_AvmObject(argv[argoff5]):NULL
		);

}

#define AVMTHUNK_NATIVE_METHOD_P_PDDBP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_pddbp_thunk, avmplus::NativeID::METHID },

AvmBox i_isb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_int32_t,
		argoff3 = argoff2 + AvmThunkArgSize_AvmString,
	};

	typedef int (AvmObjectT::*FuncType)(int, Stringp, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (AvmBox)(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			AvmThunkUnbox_int32_t(argv[argoff1]),
			AvmThunkUnbox_AvmString(argv[argoff2]),
			AvmThunkUnbox_AvmBool32(argv[argoff3])
		);

}

#define AVMTHUNK_NATIVE_METHOD_I_ISB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)i_isb_thunk, avmplus::NativeID::METHID },


AvmBox i_is_thunk( AvmMethodEnv env, uint32_t argc, AvmBox *argv )
{
	enum 
	{
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_int32_t,
	};

	typedef int (AvmObjectT::*FuncType)(int, Stringp );
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (AvmBox)(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func)) 
		( 
			AvmThunkUnbox_int32_t(argv[argoff1]), 
			AvmThunkUnbox_AvmString(argv[argoff2])
		);
}
#define AVMTHUNK_NATIVE_METHOD_I_IS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)i_is_thunk, avmplus::NativeID::METHID },
    
    
    AvmBox i_ip_thunk( AvmMethodEnv env, uint32_t argc, AvmBox *argv )
    {
        enum
        {
            argoff0 = 0,
            argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
            argoff2 = argoff1 + AvmThunkArgSize_int32_t,
        };
        
        typedef int (AvmObjectT::*FuncType)(int, ScriptObject* );
        const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
        return (AvmBox)(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
         AvmThunkUnbox_int32_t(argv[argoff1]),
         AvmThunkUnbox_AvmObject(argv[argoff2])
         );
    }
#define AVMTHUNK_NATIVE_METHOD_I_IP(METHID, IMPL) \
    { { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)i_ip_thunk, avmplus::NativeID::METHID },
    
    
AvmBox i_iss_thunk( AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_int32_t,
		argoff3 = argoff2 + AvmThunkArgSize_AvmString,
	};

	typedef int (AvmObjectT::*FuncType)(int, Stringp, Stringp );
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (AvmBox)(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		AvmThunkUnbox_int32_t(argv[argoff1]),
		AvmThunkUnbox_AvmString(argv[argoff2]),
		AvmThunkUnbox_AvmString(argv[argoff3])
		);
}
#define AVMTHUNK_NATIVE_METHOD_I_ISS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)i_iss_thunk, avmplus::NativeID::METHID },

AvmBox i_issi_thunk( AvmMethodEnv env, uint32_t argc, AvmBox *argv )
{
	enum{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_int32_t,
		argoff3 = argoff2 + AvmThunkArgSize_AvmString,
		argoff4 = argoff3 + AvmThunkArgSize_AvmString,
	};
	typedef int ( AvmObjectT::*FuncType)(int, Stringp, Stringp, int );
	const FuncType func = reinterpret_cast<FuncType>( AVMTHUNK_GET_METHOD_HANDLER( env ));
	return ( AvmBox)(*(AvmThunkUnbox_AvmReceiver( AvmObject, argv[0])).*(func))
		(
			AvmThunkUnbox_int32_t( argv[argoff1] ),
			AvmThunkUnbox_AvmString( argv[ argoff2 ] ),
			AvmThunkUnbox_AvmString( argv[ argoff3 ] ),
			AvmThunkUnbox_int32_t( argv[ argoff4 ] )
		);
}
#define AVMTHUNK_NATIVE_METHOD_I_ISSI( METHID, IMPL ) \
{{ _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, ( AvmThunkNativeThunker)i_issi_thunk, avmplus::NativeID::METHID },

AvmBox i_sp_thunk( AvmMethodEnv env, uint32_t argc, AvmBox *argv )
{
	enum{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
	};
	typedef int (AvmObjectT::*FuncType)(Stringp, ScriptObject* );
	const FuncType func = reinterpret_cast< FuncType>( AVMTHUNK_GET_METHOD_HANDLER( env ) );
	return ( AvmBox)( *(AvmThunkUnbox_AvmReceiver( AvmObject, argv[0])).*(func))
		(
			AvmThunkUnbox_AvmString( argv[argoff1 ] ),
			AvmThunkUnbox_AvmObject( argv[argoff2] )
		);
	
}
#define AVMTHUNK_NATIVE_METHOD_I_SP( METHID, IMPL ) \
{{ _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, ( AvmThunkNativeThunker)i_sp_thunk, avmplus::NativeID::METHID },

AvmBox s_void_thunk( AvmMethodEnv env, uint32_t argc, AvmBox *argv )
{
	typedef Stringp (AvmObjectT::*FuncType)( );
	const FuncType func = reinterpret_cast< FuncType>( AVMTHUNK_GET_METHOD_HANDLER( env ) );
	return ( AvmBox)( *(AvmThunkUnbox_AvmReceiver( AvmObject, argv[0])).*(func))();

}
#define AVMTHUNK_NATIVE_METHOD_S_VOID( METHID, IMPL ) \
{{ _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, ( AvmThunkNativeThunker)s_void_thunk, avmplus::NativeID::METHID },



AvmBox b_ii_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_int32_t,
	};

	typedef bool (AvmObjectT::*FuncType)(int, int);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (AvmBox)(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			AvmThunkUnbox_int32_t(argv[argoff1]),
			AvmThunkUnbox_int32_t(argv[argoff2])
		);

}

#define AVMTHUNK_NATIVE_METHOD_B_II(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)b_ii_thunk, avmplus::NativeID::METHID },

ScriptObject* p_iib_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_int32_t,
		argoff3 = argoff2 + AvmThunkArgSize_int32_t
	};

	typedef ScriptObject* (AvmObjectT::*FuncType)(int,int, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
			AvmThunkUnbox_int32_t(argv[argoff1]),
			AvmThunkUnbox_int32_t(argv[argoff2]),
			argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false
		);

}

#define AVMTHUNK_NATIVE_METHOD_P_IIB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_iib_thunk, avmplus::NativeID::METHID },

AvmBox void_iib_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_int32_t,
		argoff3 = argoff2 + AvmThunkArgSize_int32_t
	};

	typedef void (AvmObjectT::*FuncType)(int,int, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
			AvmThunkUnbox_int32_t(argv[argoff1]),
			AvmThunkUnbox_int32_t(argv[argoff2]),
			AvmThunkUnbox_AvmBool32(argv[argoff3])
		);
	
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_IIB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_iib_thunk, avmplus::NativeID::METHID },

ScriptObject* p_b_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
	};

	typedef ScriptObject* (AvmObjectT::*FuncType)(bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
			argc?AvmThunkUnbox_AvmBool32(argv[argoff1]):false
		);

}

#define AVMTHUNK_NATIVE_METHOD_P_B(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_b_thunk, avmplus::NativeID::METHID },

double d_ddd_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_double,
		argoff3 = argoff2 + AvmThunkArgSize_double
	};

	typedef double (AvmObjectT::*FuncType)(double, double, double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
		AvmThunkUnbox_double(argv[argoff1]),
		AvmThunkUnbox_double(argv[argoff2]),
		argc>2?AvmThunkUnbox_double(argv[argoff3]):0.0
		);

}

#define AVMTHUNK_NATIVE_METHOD_D_DDD(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)d_ddd_thunk, avmplus::NativeID::METHID },

//for method GraphicsObject::AS3_drawPath
AvmBox void_pps_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_AvmObject
	};
	typedef void (AvmObjectT::*FuncType)(ScriptObject*,ScriptObject*, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		AvmThunkUnbox_AvmObject(argv[argoff1]),
		AvmThunkUnbox_AvmObject(argv[argoff2]),
		argc>2?(Stringp)AvmThunkUnbox_AvmString(argv[argoff3]):(Stringp)((avmshell::ShellCore*)env->core())->kEvenOddStr
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PPS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_pps_thunk, avmplus::NativeID::METHID },

//for method GraphicsObject::AS3_drawTriangles
AvmBox void_ppps_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
		argoff4 = argoff3 + AvmThunkArgSize_AvmObject
	};
	typedef void (AvmObjectT::*FuncType)(ScriptObject*,ScriptObject*, ScriptObject*, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		AvmThunkUnbox_AvmObject(argv[argoff1]),
		argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL,
		argc>2?AvmThunkUnbox_AvmObject(argv[argoff3]):NULL,
		argc>3?(Stringp)AvmThunkUnbox_AvmString(argv[argoff4]):(Stringp)((avmshell::ShellCore*)env->core())->kNoneStr
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PPPS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_ppps_thunk, avmplus::NativeID::METHID },

AvmBox void_dpp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_double,
		argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(double,ScriptObject*,ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
			argc?AvmThunkUnbox_double(argv[argoff1]):0.0,
			argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL,
			argc>2?AvmThunkUnbox_AvmObject(argv[argoff3]):NULL
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_DPP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_dpp_thunk, avmplus::NativeID::METHID },

AvmBox void_pd_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(ScriptObject*, double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
			argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
			argc>1?AvmThunkUnbox_double(argv[argoff2]):0.0
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PD(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_pd_thunk, avmplus::NativeID::METHID },

//Especially for method Matrix3DObject::AS3_recompose 
AvmBox b_ps_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
	};
	(void)argc;
	typedef bool (AvmObjectT::*FuncType)(ScriptObject*, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
			argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
			argc>1?(Stringp)AvmThunkUnbox_AvmString(argv[argoff2]):(Stringp)((avmshell::ShellCore*)env->core())->kEulerAnglesStr
		);
}

#define AVMTHUNK_NATIVE_METHOD_B_PS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)b_ps_thunk, avmplus::NativeID::METHID },


//Especially for method Matrix3DObject::AS3_decompose 
ScriptObject* p_s_thunk_matrix(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
	};
	(void)argc;
	typedef ScriptObject* (AvmObjectT::*FuncType)(Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
			argc?(Stringp)AvmThunkUnbox_AvmString(argv[argoff1]):(Stringp)((avmshell::ShellCore*)env->core())->kEulerAnglesStr
		);
}

#define AVMTHUNK_NATIVE_METHOD_P_S_MATRIX(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_s_thunk_matrix, avmplus::NativeID::METHID },

ScriptObject* p_dpppp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_double,
		argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
		argoff4 = argoff3 + AvmThunkArgSize_AvmObject,
		argoff5 = argoff4 + AvmThunkArgSize_AvmObject
	};
	typedef ScriptObject* (AvmObjectT::*FuncType)(double,ScriptObject*,ScriptObject*,ScriptObject*,ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			argc?AvmThunkUnbox_double(argv[argoff1]):0.0,
			argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL,
			argc>2?AvmThunkUnbox_AvmObject(argv[argoff3]):NULL,
			argc>3?AvmThunkUnbox_AvmObject(argv[argoff4]):NULL,
			argc>4?AvmThunkUnbox_AvmObject(argv[argoff5]):NULL
		);
}

#define AVMTHUNK_NATIVE_METHOD_P_DPPPP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_dpppp_thunk, avmplus::NativeID::METHID },

AvmBox void_ss_thunk_collator(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
	};
	typedef void (AvmObjectT::*FuncType)(Stringp,Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
			argc>1?(Stringp)AvmThunkUnbox_AvmString(argv[argoff2]):(Stringp)((avmshell::ShellCore*)env->core())->kSortingStr
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SS_COLLATOR(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_ss_thunk_collator, avmplus::NativeID::METHID },

AvmBox i_ss_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
	};
	typedef int (AvmObjectT::*FuncType)(Stringp,Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
			argc>1?AvmThunkUnbox_AvmString(argv[argoff2]):NULL
		);
}

#define AVMTHUNK_NATIVE_METHOD_I_SS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)i_ss_thunk, avmplus::NativeID::METHID },

AvmBox p_db_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_double,
	};

	typedef AvmBox (AvmObjectT::*FuncType)(double, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_double(argv[argoff1]):0.0,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false
		);
}

#define AVMTHUNK_NATIVE_METHOD_P_DB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_db_thunk, avmplus::NativeID::METHID },

AvmBox void_ds_thunk_currencyparseresult(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_double,
	};

	typedef void (AvmObjectT::*FuncType)(double, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
//			argc?AvmThunkUnbox_double(argv[argoff1]):env->core()->kNaN->atomToDouble(),
			argc?AvmThunkUnbox_double(argv[argoff1]):MathUtils::kNaN,
			argc>1?(Stringp)AvmThunkUnbox_AvmString(argv[argoff2]):(Stringp)env->core()->kEmptyString
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_DS_CURRENCYPARSERESULT(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_ds_thunk_currencyparseresult, avmplus::NativeID::METHID },

AvmBox void_sss_thunk_datetimeformatter(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmString
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, Stringp, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		//			argc?AvmThunkUnbox_double(argv[argoff1]):env->core()->kNaN->atomToDouble(),
		AvmThunkUnbox_AvmString(argv[argoff1]),
		argc>1?(Stringp)AvmThunkUnbox_AvmString(argv[argoff2]):(Stringp)((avmshell::ShellCore*)env->core())->kLongStr,
		argc>2?(Stringp)AvmThunkUnbox_AvmString(argv[argoff3]):(Stringp)((avmshell::ShellCore*)env->core())->kLongStr
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SSS_DATETIMEFORMATTER(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sss_thunk_datetimeformatter, avmplus::NativeID::METHID },

AvmBox p_ss_thunk_datetimeformatter(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
	};

	typedef AvmBox (AvmObjectT::*FuncType)(Stringp, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			argc?(Stringp)AvmThunkUnbox_AvmString(argv[argoff1]):(Stringp)((avmshell::ShellCore*)env->core())->kFullStr,
			argc>1?(Stringp)AvmThunkUnbox_AvmString(argv[argoff2]):(Stringp)((avmshell::ShellCore*)env->core())->kStandaloneStr
		);
}

#define AVMTHUNK_NATIVE_METHOD_P_SS_DATETIMEFORMATTER(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_ss_thunk_datetimeformatter, avmplus::NativeID::METHID },

AvmBox p_pps_thunk_localeid(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
	};

	typedef AvmBox (AvmObjectT::*FuncType)(ScriptObject*, ScriptObject*, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		AvmThunkUnbox_AvmObject(argv[argoff1]),
		AvmThunkUnbox_AvmObject(argv[argoff2]),
		argc>2?(Stringp)AvmThunkUnbox_AvmString(argv[argoff3]):(Stringp)((avmshell::ShellCore*)env->core())->kUserinterfaceStr
		);
}

#define AVMTHUNK_NATIVE_METHOD_P_PPS_LOCALEID(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_pps_thunk_localeid, avmplus::NativeID::METHID },

AvmBox p_d_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
	};

	typedef AvmBox (AvmObjectT::*FuncType)(double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_double(argv[argoff1]):0.0
		);
}

#define AVMTHUNK_NATIVE_METHOD_P_D(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_d_thunk, avmplus::NativeID::METHID },

double d_s_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
	};

	typedef double (AvmObjectT::*FuncType)(Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL
		);
}

#define AVMTHUNK_NATIVE_METHOD_D_S(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)d_s_thunk, avmplus::NativeID::METHID },

AvmBox void_dii_thunk_numberparseresult(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_double,
		argoff3 = argoff2 + AvmThunkArgSize_int32_t
	};

	typedef void (AvmObjectT::*FuncType)(double, int, int);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_double(argv[argoff1]):MathUtils::kNaN,
		argc>1?AvmThunkUnbox_int32_t(argv[argoff2]):0x7fffffff,
		argc>2?AvmThunkUnbox_int32_t(argv[argoff3]):0x7fffffff
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_DII_NUMBERPARSERESULT(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_dii_thunk_numberparseresult, avmplus::NativeID::METHID },

AvmBox p_iip_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_int32_t,
		argoff3 = argoff2 + AvmThunkArgSize_int32_t
	};

	typedef AvmBox (AvmObjectT::*FuncType)(int, int, ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_int32_t(argv[argoff1]):0,
		argc>1?AvmThunkUnbox_int32_t(argv[argoff2]):0,
		argc>2?AvmThunkUnbox_AvmObject(argv[argoff3]):NULL
		);
}

#define AVMTHUNK_NATIVE_METHOD_P_IIP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_iip_thunk, avmplus::NativeID::METHID },

AvmBox i_i_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
	};

	typedef int (AvmObjectT::*FuncType)(int);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_int32_t(argv[argoff1]):0
		);
}

#define AVMTHUNK_NATIVE_METHOD_I_I(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)i_i_thunk, avmplus::NativeID::METHID },

AvmBox void_iis_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_int32_t,
		argoff3 = argoff2 + AvmThunkArgSize_int32_t
	};

	typedef void (AvmObjectT::*FuncType)(int, int, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_int32_t(argv[argoff1]):0,
		argc>1?AvmThunkUnbox_int32_t(argv[argoff2]):0,
		argc>2?AvmThunkUnbox_AvmString(argv[argoff3]):NULL
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_IIS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_iis_thunk, avmplus::NativeID::METHID },

double d_i_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
	};

	typedef double (AvmObjectT::*FuncType)(int);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			argc?AvmThunkUnbox_int32_t(argv[argoff1]):0
		);
}

#define AVMTHUNK_NATIVE_METHOD_D_I(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)d_i_thunk, avmplus::NativeID::METHID },

AvmBox p_i_thunk_microphone(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject};
	(void)argc;
	typedef AvmBox (AvmObjectT::*FuncType)(int32_t);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		argc?AvmThunkUnbox_int32_t(argv[argoff1]):-1);
	//return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_P_I_MICROPHONE(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_i_thunk_microphone, avmplus::NativeID::METHID },
//new adds end

//dushixiong 2011-9-26 --start
AvmBox void_sp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
			argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sp_thunk, avmplus::NativeID::METHID },

AvmBox void_pdd_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_double,
	};

	typedef void (AvmObjectT::*FuncType)(ScriptObject*, double, double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_double(argv[argoff2]):0.0,
		argc>2?AvmThunkUnbox_double(argv[argoff3]):0.0
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PDD(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_pdd_thunk, avmplus::NativeID::METHID },

AvmBox b_pb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject
	};

	typedef  bool (AvmObjectT::*FuncType)(ScriptObject*, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false
		);
}

#define AVMTHUNK_NATIVE_METHOD_B_PB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)b_pb_thunk, avmplus::NativeID::METHID },

AvmBox d_pdd_thunk_sound(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_double,
	};

	typedef double (AvmObjectT::*FuncType)(ScriptObject*, double, double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		AvmThunkUnbox_AvmObject(argv[argoff1]),
		AvmThunkUnbox_double(argv[argoff2]),
		argc>2?AvmThunkUnbox_double(argv[argoff3]):-1
		);
}

#define AVMTHUNK_NATIVE_METHOD_D_PDD_SOUND(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)d_pdd_thunk_sound, avmplus::NativeID::METHID },

AvmBox b_ss_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString
	};

	typedef bool (AvmObjectT::*FuncType)(Stringp, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmString(argv[argoff2]):NULL
		);
}

#define AVMTHUNK_NATIVE_METHOD_B_SS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)b_ss_thunk, avmplus::NativeID::METHID },

AvmBox void_ibp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_int32_t,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
	};

	typedef void (AvmObjectT::*FuncType)(int, bool, ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_int32_t(argv[argoff1]):0,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmObject(argv[argoff3]):NULL
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_IBP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_ibp_thunk, avmplus::NativeID::METHID },


AvmBox void_spppppsd_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
		argoff4 = argoff3 + AvmThunkArgSize_AvmObject,
		argoff5 = argoff4 + AvmThunkArgSize_AvmObject,
		argoff6 = argoff5 + AvmThunkArgSize_AvmObject,
		argoff7 = argoff6 + AvmThunkArgSize_AvmObject,
		argoff8 = argoff7 + AvmThunkArgSize_AvmString
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, ScriptObject*, ScriptObject*, ScriptObject*, ScriptObject*, ScriptObject*, Stringp, double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL,
		argc>2?AvmThunkUnbox_AvmObject(argv[argoff3]):NULL,
		argc>3?AvmThunkUnbox_AvmObject(argv[argoff4]):NULL,
		argc>4?AvmThunkUnbox_AvmObject(argv[argoff5]):NULL,
		argc>5?AvmThunkUnbox_AvmObject(argv[argoff6]):NULL,
		argc>6?AvmThunkUnbox_AvmString(argv[argoff7]):NULL,
		argc>7?AvmThunkUnbox_double(argv[argoff8]):0.0
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SPPPPPSD(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_spppppsd_thunk, avmplus::NativeID::METHID },

AvmBox p_ps_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject
	};

	typedef AvmBox (AvmObjectT::*FuncType)(ScriptObject*, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmString(argv[argoff2]):NULL
		);
}

#define AVMTHUNK_NATIVE_METHOD_P_PS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_ps_thunk, avmplus::NativeID::METHID },

AvmBox p_pis_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_int32_t
	};

	typedef AvmBox (AvmObjectT::*FuncType)(ScriptObject*, int, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_int32_t(argv[argoff2]):0,
		argc>2?AvmThunkUnbox_AvmString(argv[argoff3]):NULL
		);
}

#define AVMTHUNK_NATIVE_METHOD_P_PIS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_pis_thunk, avmplus::NativeID::METHID },

AvmBox void_sd_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_double(argv[argoff2]):0.0
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SD(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sd_thunk, avmplus::NativeID::METHID },

AvmBox p_s_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject
	};

	typedef AvmBox (AvmObjectT::*FuncType)(Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL
		);
}

#define AVMTHUNK_NATIVE_METHOD_P_S(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_s_thunk, avmplus::NativeID::METHID },

AvmBox void_sb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sb_thunk, avmplus::NativeID::METHID },

AvmBox b_s_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject
	};

	typedef bool (AvmObjectT::*FuncType)(Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL
		);
}

#define AVMTHUNK_NATIVE_METHOD_B_S(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)b_s_thunk, avmplus::NativeID::METHID },

AvmBox void_ppii_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
		argoff4 = argoff3 + AvmThunkArgSize_int32_t
	};

	typedef void (AvmObjectT::*FuncType)(ScriptObject*, ScriptObject*, int, int);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL,
		argc>2?AvmThunkUnbox_int32_t(argv[argoff3]):0,
		argc>3?AvmThunkUnbox_int32_t(argv[argoff4]):0
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PPII(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_ppii_thunk, avmplus::NativeID::METHID },

AvmBox void_sii_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_int32_t
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, int, int);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_int32_t(argv[argoff2]):0,
		argc>2?AvmThunkUnbox_int32_t(argv[argoff3]):0
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SII(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sii_thunk, avmplus::NativeID::METHID },

AvmBox void_sssiip_thunk_sqlerror(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmString,
		argoff4 = argoff3 + AvmThunkArgSize_AvmString,
		argoff5 = argoff4 + AvmThunkArgSize_int32_t,
		argoff6 = argoff5 + AvmThunkArgSize_int32_t
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, Stringp, Stringp, int, int, ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmString(argv[argoff2]):(Stringp)env->core()->kEmptyString,
		argc>2?AvmThunkUnbox_AvmString(argv[argoff3]):(Stringp)env->core()->kEmptyString,
		argc>3?AvmThunkUnbox_int32_t(argv[argoff4]):0,
		argc>4?AvmThunkUnbox_int32_t(argv[argoff5]):-1,
		argc>5?AvmThunkUnbox_AvmObject(argv[argoff6]):NULL
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SSSIIP_SQLERROR(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sssiip_thunk_sqlerror, avmplus::NativeID::METHID },

AvmBox void_sbbdddd_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString, 
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_double,
		argoff6 = argoff5 + AvmThunkArgSize_double,
		argoff7 = argoff6 + AvmThunkArgSize_double
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, bool, bool, double, double, double, double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>3?AvmThunkUnbox_double(argv[argoff4]):0.0,
		argc>4?AvmThunkUnbox_double(argv[argoff5]):0.0,
		argc>5?AvmThunkUnbox_double(argv[argoff6]):0.0,
		argc>6?AvmThunkUnbox_double(argv[argoff7]):0.0
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBDDDD(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbdddd_thunk, avmplus::NativeID::METHID },

AvmBox void_sbbpssbb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_AvmObject,
		argoff6 = argoff5 + AvmThunkArgSize_AvmString,
		argoff7 = argoff6 + AvmThunkArgSize_AvmString,
		argoff8 = argoff7 + AvmThunkArgSize_AvmBool32
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, bool, bool, ScriptObject*, Stringp, Stringp, bool, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>3?AvmThunkUnbox_AvmObject(argv[argoff4]):NULL,
		argc>4?AvmThunkUnbox_AvmString(argv[argoff5]):NULL,
		argc>5?AvmThunkUnbox_AvmString(argv[argoff6]):NULL,
		argc>6?AvmThunkUnbox_AvmBool32(argv[argoff7]):false,
		argc>7?AvmThunkUnbox_AvmBool32(argv[argoff8]):false
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBPSSBB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbpssbb_thunk, avmplus::NativeID::METHID },

AvmBox void_sbbsisip_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_AvmString,
		argoff6 = argoff5 + AvmThunkArgSize_int32_t,
		argoff7 = argoff6 + AvmThunkArgSize_AvmString,
		argoff8 = argoff7 + AvmThunkArgSize_int32_t
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, bool, bool, Stringp, int, Stringp, int, ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>3?AvmThunkUnbox_AvmString(argv[argoff4]):NULL,
		argc>4?AvmThunkUnbox_int32_t(argv[argoff5]):0,
		argc>5?AvmThunkUnbox_AvmString(argv[argoff6]):NULL,
		argc>6?AvmThunkUnbox_int32_t(argv[argoff7]):0,
		argc>7?AvmThunkUnbox_AvmObject(argv[argoff8]):NULL
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBSISIP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbsisip_thunk, avmplus::NativeID::METHID },

AvmBox void_sbbsssssp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_AvmString,
		argoff6 = argoff5 + AvmThunkArgSize_AvmString,
		argoff7 = argoff6 + AvmThunkArgSize_AvmString,
		argoff8 = argoff7 + AvmThunkArgSize_AvmString,
		argoff9 = argoff8 + AvmThunkArgSize_AvmString
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, bool, bool, Stringp, Stringp, Stringp, Stringp, Stringp, ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>3?AvmThunkUnbox_AvmString(argv[argoff4]):NULL,
		argc>4?AvmThunkUnbox_AvmString(argv[argoff5]):NULL,
		argc>5?AvmThunkUnbox_AvmString(argv[argoff6]):NULL,
		argc>6?AvmThunkUnbox_AvmString(argv[argoff7]):NULL,
		argc>7?AvmThunkUnbox_AvmString(argv[argoff8]):NULL,
		argc>8?AvmThunkUnbox_AvmObject(argv[argoff9]):NULL
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBSSSSSP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbsssssp_thunk, avmplus::NativeID::METHID },

AvmBox void_sbbssp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_AvmString,
		argoff6 = argoff5 + AvmThunkArgSize_AvmString
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, bool, bool, Stringp, Stringp, ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>3?AvmThunkUnbox_AvmString(argv[argoff4]):NULL,
		argc>4?AvmThunkUnbox_AvmString(argv[argoff5]):NULL,
		argc>5?AvmThunkUnbox_AvmObject(argv[argoff6]):NULL
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBSSP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbssp_thunk, avmplus::NativeID::METHID },

AvmBox void_sbbsiiss_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_AvmString,
		argoff6 = argoff5 + AvmThunkArgSize_int32_t,
		argoff7 = argoff6 + AvmThunkArgSize_int32_t,
		argoff8 = argoff7 + AvmThunkArgSize_AvmString
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, bool, bool, Stringp, int, int, Stringp, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>3?AvmThunkUnbox_AvmString(argv[argoff4]):NULL,
		argc>4?AvmThunkUnbox_int32_t(argv[argoff5]):0,
		argc>5?AvmThunkUnbox_int32_t(argv[argoff6]):0,
		argc>6?AvmThunkUnbox_AvmString(argv[argoff7]):NULL,
		argc>7?AvmThunkUnbox_AvmString(argv[argoff8]):NULL
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBSIISS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbsiiss_thunk, avmplus::NativeID::METHID },

AvmBox void_sbbsiipbb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_AvmString,
		argoff6 = argoff5 + AvmThunkArgSize_int32_t,
		argoff7 = argoff6 + AvmThunkArgSize_int32_t,
		argoff8 = argoff7 + AvmThunkArgSize_AvmObject,
		argoff9 = argoff8 + AvmThunkArgSize_AvmBool32
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, bool, bool, Stringp, int, int, ScriptObject*, bool, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>3?AvmThunkUnbox_AvmString(argv[argoff4]):NULL,
		argc>4?AvmThunkUnbox_int32_t(argv[argoff5]):0,
		argc>5?AvmThunkUnbox_int32_t(argv[argoff6]):0,
		argc>6?AvmThunkUnbox_AvmObject(argv[argoff7]):NULL,
		argc>7?AvmThunkUnbox_AvmBool32(argv[argoff8]):false,
		argc>8?AvmThunkUnbox_AvmBool32(argv[argoff9]):false
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBSIIPBB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbsiipbb_thunk, avmplus::NativeID::METHID },

AvmBox void_sbbppb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_AvmString,
		argoff6 = argoff5 + AvmThunkArgSize_AvmString
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, bool, bool, ScriptObject*, ScriptObject*, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>3?AvmThunkUnbox_AvmObject(argv[argoff4]):NULL,
		argc>4?AvmThunkUnbox_AvmObject(argv[argoff5]):NULL,
		argc>5?AvmThunkUnbox_AvmBool32(argv[argoff6]):false
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBPPB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbppb_thunk, avmplus::NativeID::METHID },

AvmBox void_sbbdddddddd_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_double,
		argoff6 = argoff5 + AvmThunkArgSize_double,
		argoff7 = argoff6 + AvmThunkArgSize_double,
		argoff8 = argoff7 + AvmThunkArgSize_double,
		argoff9 = argoff8 + AvmThunkArgSize_double,
		argoff10 = argoff9 + AvmThunkArgSize_double,
		argoff11 = argoff10 + AvmThunkArgSize_double
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, bool, bool, double, double, double, double, double, double, double, double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>3?AvmThunkUnbox_double(argv[argoff4]):0.0,
		argc>4?AvmThunkUnbox_double(argv[argoff5]):0.0,
		argc>5?AvmThunkUnbox_double(argv[argoff6]):0.0,
		argc>6?AvmThunkUnbox_double(argv[argoff7]):0.0,
		argc>7?AvmThunkUnbox_double(argv[argoff8]):0.0,
		argc>8?AvmThunkUnbox_double(argv[argoff9]):0.0,
		argc>9?AvmThunkUnbox_double(argv[argoff10]):0.0,
		argc>10?AvmThunkUnbox_double(argv[argoff11]):0.0
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBDDDDDDDD(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbdddddddd_thunk, avmplus::NativeID::METHID },

AvmBox void_sbbsddbbbbb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_AvmString,
		argoff6 = argoff5 + AvmThunkArgSize_double,
		argoff7 = argoff6 + AvmThunkArgSize_double,
		argoff8 = argoff7 + AvmThunkArgSize_AvmBool32,
		argoff9 = argoff8 + AvmThunkArgSize_AvmBool32,
		argoff10 = argoff9 + AvmThunkArgSize_AvmBool32,
		argoff11 = argoff10 + AvmThunkArgSize_AvmBool32
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, bool, bool, Stringp, double, double, bool, bool, bool, bool, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>3?AvmThunkUnbox_AvmString(argv[argoff4]):NULL,
		argc>4?AvmThunkUnbox_double(argv[argoff5]):0.0,
		argc>5?AvmThunkUnbox_double(argv[argoff6]):0.0,
		argc>6?AvmThunkUnbox_AvmBool32(argv[argoff7]):false,
		argc>7?AvmThunkUnbox_AvmBool32(argv[argoff8]):false,
		argc>8?AvmThunkUnbox_AvmBool32(argv[argoff9]):false,
		argc>9?AvmThunkUnbox_AvmBool32(argv[argoff10]):false,
		argc>10?AvmThunkUnbox_AvmBool32(argv[argoff11]):false
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBSDDBBBBB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbsddbbbbb_thunk, avmplus::NativeID::METHID },

AvmBox void_sbbpps_thunk_invokeevent(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_AvmObject,
		argoff6 = argoff5 + AvmThunkArgSize_AvmObject
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, bool, bool, ScriptObject*, ScriptObject*, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>3?AvmThunkUnbox_AvmObject(argv[argoff4]):NULL,
		argc>4?AvmThunkUnbox_AvmObject(argv[argoff5]):NULL,
		argc>5?AvmThunkUnbox_AvmString(argv[argoff6]):(Stringp)((avmshell::ShellCore*)env->core())->kStandardStr
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBPPS_INVOKEEVENT(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbpps_thunk_invokeevent, avmplus::NativeID::METHID },

AvmBox void_sbbddpppsbbbb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_double,
		argoff6 = argoff5 + AvmThunkArgSize_double,
		argoff7 = argoff6 + AvmThunkArgSize_AvmObject,
		argoff8 = argoff7 + AvmThunkArgSize_AvmObject,
		argoff9 = argoff8 + AvmThunkArgSize_AvmObject,
		argoff10 = argoff9 + AvmThunkArgSize_AvmString,
		argoff11 = argoff10 + AvmThunkArgSize_AvmBool32,
		argoff12 = argoff11 + AvmThunkArgSize_AvmBool32,
		argoff13 = argoff12 + AvmThunkArgSize_AvmBool32
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, bool, bool, double, double, ScriptObject*, ScriptObject*, ScriptObject*, Stringp, bool, bool, bool, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>3?AvmThunkUnbox_double(argv[argoff4]):0.0,
		argc>4?AvmThunkUnbox_double(argv[argoff5]):0.0,
		argc>5?AvmThunkUnbox_AvmObject(argv[argoff6]):NULL,
		argc>6?AvmThunkUnbox_AvmObject(argv[argoff7]):NULL,
		argc>7?AvmThunkUnbox_AvmObject(argv[argoff8]):NULL,
		argc>8?AvmThunkUnbox_AvmString(argv[argoff9]):NULL,
		argc>9?AvmThunkUnbox_AvmBool32(argv[argoff10]):false,
		argc>10?AvmThunkUnbox_AvmBool32(argv[argoff11]):false,
		argc>11?AvmThunkUnbox_AvmBool32(argv[argoff12]):false,
		argc>12?AvmThunkUnbox_AvmBool32(argv[argoff13]):false
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBDDPPPSBBBB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbddpppsbbbb_thunk, avmplus::NativeID::METHID },

AvmBox void_sbbd_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, bool, bool, double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>3?AvmThunkUnbox_double(argv[argoff4]):0.0
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBD(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbd_thunk, avmplus::NativeID::METHID },

AvmBox void_sbbdp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_double
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, bool, bool, double, ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>3?AvmThunkUnbox_double(argv[argoff4]):0.0,
		argc>4?AvmThunkUnbox_AvmObject(argv[argoff5]):NULL
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBDP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbdp_thunk, avmplus::NativeID::METHID },

AvmBox void_sbbdd_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_double
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, bool, bool, double, double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>3?AvmThunkUnbox_double(argv[argoff4]):0.0,
		argc>4?AvmThunkUnbox_double(argv[argoff5]):0.0
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBDD(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbdd_thunk, avmplus::NativeID::METHID },

AvmBox void_sbbsddddbbbbb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_AvmString,
		argoff6 = argoff5 + AvmThunkArgSize_double,
		argoff7 = argoff6 + AvmThunkArgSize_double,
		argoff8 = argoff7 + AvmThunkArgSize_double,
		argoff9 = argoff8 + AvmThunkArgSize_double,
		argoff10 = argoff9 + AvmThunkArgSize_AvmBool32,
		argoff11 = argoff10 + AvmThunkArgSize_AvmBool32,
		argoff12 = argoff11 + AvmThunkArgSize_AvmBool32,
		argoff13 = argoff12 + AvmThunkArgSize_AvmBool32
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, bool, bool, Stringp, double, double, double, double, bool, bool, bool, bool, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>3?AvmThunkUnbox_AvmString(argv[argoff4]):NULL,
		argc>4?AvmThunkUnbox_double(argv[argoff5]):0.0,
		argc>5?AvmThunkUnbox_double(argv[argoff6]):0.0,
		argc>6?AvmThunkUnbox_double(argv[argoff7]):0.0,
		argc>7?AvmThunkUnbox_double(argv[argoff8]):0.0,
		argc>8?AvmThunkUnbox_AvmBool32(argv[argoff9]):false,
		argc>9?AvmThunkUnbox_AvmBool32(argv[argoff10]):false,
		argc>10?AvmThunkUnbox_AvmBool32(argv[argoff11]):false,
		argc>11?AvmThunkUnbox_AvmBool32(argv[argoff12]):false,
		argc>12?AvmThunkUnbox_AvmBool32(argv[argoff13]):false
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBSDDDDBBBBB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbsddddbbbbb_thunk, avmplus::NativeID::METHID },

AvmBox void_sbbddbbbbbb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_double,
		argoff6 = argoff5 + AvmThunkArgSize_double,
		argoff7 = argoff6 + AvmThunkArgSize_AvmBool32,
		argoff8 = argoff7 + AvmThunkArgSize_AvmBool32,
		argoff9 = argoff8 + AvmThunkArgSize_AvmBool32,
		argoff10 = argoff9 + AvmThunkArgSize_AvmBool32,
		argoff11 = argoff10 + AvmThunkArgSize_AvmBool32
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, bool, bool, double, double, bool, bool, bool, bool, bool, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>3?AvmThunkUnbox_double(argv[argoff4]):0.0,
		argc>4?AvmThunkUnbox_double(argv[argoff5]):0.0,
		argc>5?AvmThunkUnbox_AvmBool32(argv[argoff6]):false,
		argc>6?AvmThunkUnbox_AvmBool32(argv[argoff7]):false,
		argc>7?AvmThunkUnbox_AvmBool32(argv[argoff8]):false,
		argc>8?AvmThunkUnbox_AvmBool32(argv[argoff9]):false,
		argc>9?AvmThunkUnbox_AvmBool32(argv[argoff10]):false,
		argc>10?AvmThunkUnbox_AvmBool32(argv[argoff11]):false
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBDDBBBBBB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbddbbbbbb_thunk, avmplus::NativeID::METHID },

AvmBox void_sbbps_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_AvmObject,
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, bool, bool, ScriptObject*, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>3?AvmThunkUnbox_AvmObject(argv[argoff4]):NULL,
		argc>4?AvmThunkUnbox_AvmString(argv[argoff5]):NULL
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBPS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbps_thunk, avmplus::NativeID::METHID },

AvmBox void_sbbsd_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_AvmString
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, bool, bool, Stringp, double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>3?AvmThunkUnbox_AvmString(argv[argoff4]):NULL,
		argc>4?AvmThunkUnbox_double(argv[argoff5]):0.0
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBSD(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbsd_thunk, avmplus::NativeID::METHID },

AvmBox void_sbbibdddddpbbbbbdsb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_int32_t,
		argoff6 = argoff5 + AvmThunkArgSize_AvmBool32,
		argoff7 = argoff6 + AvmThunkArgSize_double,
		argoff8 = argoff7 + AvmThunkArgSize_double,
		argoff9 = argoff8 + AvmThunkArgSize_double,
		argoff10 = argoff9 + AvmThunkArgSize_double,
		argoff11 = argoff10 + AvmThunkArgSize_double,
		argoff12 = argoff11 + AvmThunkArgSize_AvmObject,
		argoff13 = argoff12 + AvmThunkArgSize_AvmBool32,
		argoff14 = argoff13 + AvmThunkArgSize_AvmBool32,
		argoff15 = argoff14 + AvmThunkArgSize_AvmBool32,
		argoff16 = argoff15 + AvmThunkArgSize_AvmBool32,
		argoff17 = argoff16 + AvmThunkArgSize_double,
		argoff18 = argoff17 + AvmThunkArgSize_AvmString,
		argoff19 = argoff18 + AvmThunkArgSize_AvmBool32
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, bool, bool, int, bool, double, double, double, double, double, ScriptObject*, bool, bool, bool, bool, bool, double, Stringp, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>3?AvmThunkUnbox_int32_t(argv[argoff4]):0,
		argc>4?AvmThunkUnbox_AvmBool32(argv[argoff5]):false,
		argc>5?AvmThunkUnbox_double(argv[argoff6]):0.0,
		argc>6?AvmThunkUnbox_double(argv[argoff7]):0.0,
		argc>7?AvmThunkUnbox_double(argv[argoff8]):0.0,
		argc>8?AvmThunkUnbox_double(argv[argoff9]):0.0,
		argc>9?AvmThunkUnbox_double(argv[argoff10]):0.0,
		argc>10?AvmThunkUnbox_AvmObject(argv[argoff11]):NULL,
		argc>11?AvmThunkUnbox_AvmBool32(argv[argoff12]):false,
		argc>12?AvmThunkUnbox_AvmBool32(argv[argoff13]):false,
		argc>13?AvmThunkUnbox_AvmBool32(argv[argoff14]):false,
		argc>14?AvmThunkUnbox_AvmBool32(argv[argoff15]):false,
		argc>15?AvmThunkUnbox_AvmBool32(argv[argoff16]):false,
		argc>16?AvmThunkUnbox_double(argv[argoff17]):0.0,
		argc>17?AvmThunkUnbox_AvmString(argv[argoff18]):NULL,
		argc>18?AvmThunkUnbox_AvmBool32(argv[argoff19]):false

		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBIBDDDDDPBBBBBDSB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbibdddddpbbbbbdsb_thunk, avmplus::NativeID::METHID },

AvmBox void_sbbsdddddddbbbbb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmBool32,
		argoff5 = argoff4 + AvmThunkArgSize_AvmString,
		argoff6 = argoff5 + AvmThunkArgSize_double,
		argoff7 = argoff6 + AvmThunkArgSize_double,
		argoff8 = argoff7 + AvmThunkArgSize_double,
		argoff9 = argoff8 + AvmThunkArgSize_double,
		argoff10 = argoff9 + AvmThunkArgSize_double,
		argoff11 = argoff10 + AvmThunkArgSize_double,
		argoff12 = argoff11 + AvmThunkArgSize_double,
		argoff13 = argoff12 + AvmThunkArgSize_AvmBool32,
		argoff14 = argoff13 + AvmThunkArgSize_AvmBool32,
		argoff15 = argoff14 + AvmThunkArgSize_AvmBool32,
		argoff16 = argoff15 + AvmThunkArgSize_AvmBool32
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, bool, bool, Stringp, double, double, double, double, double, double, double, bool, bool, bool, bool, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false,
		argc>3?AvmThunkUnbox_AvmString(argv[argoff4]):0,
		argc>4?AvmThunkUnbox_double(argv[argoff5]):false,
		argc>5?AvmThunkUnbox_double(argv[argoff6]):0.0,
		argc>6?AvmThunkUnbox_double(argv[argoff7]):0.0,
		argc>7?AvmThunkUnbox_double(argv[argoff8]):0.0,
		argc>8?AvmThunkUnbox_double(argv[argoff9]):0.0,
		argc>9?AvmThunkUnbox_double(argv[argoff10]):0.0,
		argc>10?AvmThunkUnbox_double(argv[argoff11]):NULL,
		argc>11?AvmThunkUnbox_AvmBool32(argv[argoff12]):false,
		argc>12?AvmThunkUnbox_AvmBool32(argv[argoff13]):false,
		argc>13?AvmThunkUnbox_AvmBool32(argv[argoff14]):false,
		argc>14?AvmThunkUnbox_AvmBool32(argv[argoff15]):false,
		argc>15?AvmThunkUnbox_AvmBool32(argv[argoff16]):false
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBBSDDDDDDDBBBBB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbbibdddddpbbbbb_thunk, avmplus::NativeID::METHID },

AvmBox p_ss_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString
	};

	typedef AvmBox (AvmObjectT::*FuncType)(Stringp, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmString(argv[argoff2]):NULL
		);
}

#define AVMTHUNK_NATIVE_METHOD_P_SS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_ss_thunk, avmplus::NativeID::METHID },

AvmBox p_sp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString
	};

	typedef AvmBox (AvmObjectT::*FuncType)(Stringp, ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL
		);
}

#define AVMTHUNK_NATIVE_METHOD_P_SP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_sp_thunk, avmplus::NativeID::METHID },



AvmBox s_ppp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_AvmObject 
	};

	typedef AvmBox (AvmObjectT::*FuncType)(ScriptObject*, ScriptObject*, ScriptObject* );
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL,
		argc>2?AvmThunkUnbox_AvmObject(argv[argoff3]):NULL
		);
}


#define AVMTHUNK_NATIVE_METHOD_S_PPP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)s_ppp_thunk, avmplus::NativeID::METHID },



AvmBox void_is_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_int32_t
	};

	typedef void (AvmObjectT::*FuncType)(int, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_int32_t(argv[argoff1]):0,
		argc>1?AvmThunkUnbox_AvmString(argv[argoff2]):NULL
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_IS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_is_thunk, avmplus::NativeID::METHID },

AvmBox void_puusi_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_uint32_t,
		argoff4 = argoff3 + AvmThunkArgSize_uint32_t,
		argoff5 = argoff4 + AvmThunkArgSize_AvmString
	};

	typedef void (AvmObjectT::*FuncType)(ScriptObject*, uint32_t, uint32_t, Stringp, int);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_uint32_t(argv[argoff2]):0,
		argc>2?AvmThunkUnbox_uint32_t(argv[argoff3]):0,
		argc>3?AvmThunkUnbox_AvmString(argv[argoff4]):NULL,
		argc>4?AvmThunkUnbox_int32_t(argv[argoff5]):0
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PUUSI(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_puusi_thunk, avmplus::NativeID::METHID },

AvmBox p_sps_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmObject
	};

	typedef AvmBox (AvmObjectT::*FuncType)(Stringp, ScriptObject*, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL,
		argc>2?AvmThunkUnbox_AvmString(argv[argoff3]):NULL
		);
}

#define AVMTHUNK_NATIVE_METHOD_P_SPS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_sps_thunk, avmplus::NativeID::METHID },

AvmBox void_sps_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmObject
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, ScriptObject*, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL,
		argc>2?AvmThunkUnbox_AvmString(argv[argoff3]):NULL
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SPS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sps_thunk, avmplus::NativeID::METHID },

AvmBox void_ip_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_int32_t
	};

	typedef void (AvmObjectT::*FuncType)(int, ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_int32_t(argv[argoff1]):0,
		argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_IP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_ip_thunk, avmplus::NativeID::METHID },

AvmBox p_sss_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmString
	};

	typedef AvmBox (AvmObjectT::*FuncType)(Stringp, Stringp, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmString(argv[argoff2]):NULL,
		argc>2?AvmThunkUnbox_AvmString(argv[argoff3]):NULL
		);
}

#define AVMTHUNK_NATIVE_METHOD_P_SSS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_sss_thunk, avmplus::NativeID::METHID },

AvmBox void_dbpp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_double,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmObject
	};

	typedef void (AvmObjectT::*FuncType)(double, bool, ScriptObject*, ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_double(argv[argoff1]):0.0,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmObject(argv[argoff3]):NULL,
		argc>3?AvmThunkUnbox_AvmObject(argv[argoff4]):NULL
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_DBPP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_dbpp_thunk, avmplus::NativeID::METHID },


AvmBox b_up_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)	//û��Ĭ��ֵ
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_uint32_t
	};

	typedef  bool (AvmObjectT::*FuncType)(uint32_t, ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		AvmThunkUnbox_uint32_t(argv[argoff1]),
		AvmThunkUnbox_AvmObject(argv[argoff2])
		);
}

#define AVMTHUNK_NATIVE_METHOD_B_UP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)b_up_thunk, avmplus::NativeID::METHID },

AvmBox b_ap_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)	//û��Ĭ��ֵ
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject
	};

	typedef  bool (AvmObjectT::*FuncType)(Atom, ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argv[argoff1],
		AvmThunkUnbox_AvmObject(argv[argoff2])
		);
}

#define AVMTHUNK_NATIVE_METHOD_B_AP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)b_ap_thunk, avmplus::NativeID::METHID },
//dushixiong 2011-9-26 --end

//Check adds
AvmBox void_pps_thunk_graphics(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_AvmObject
	};
	typedef void (AvmObjectT::*FuncType)(ScriptObject*,ScriptObject*, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		AvmThunkUnbox_AvmObject(argv[argoff1]),
		AvmThunkUnbox_AvmObject(argv[argoff2]),
		argc>2?AvmThunkUnbox_AvmString(argv[argoff3]):(Stringp)((avmshell::ShellCore*)env->core())->kEvenOddStr
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PPS_GRAPHICS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_pps_thunk_graphics, avmplus::NativeID::METHID },

//for method GraphicsObject::AS3_drawTriangles
AvmBox void_ppps_thunk_graphics(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
		argoff4 = argoff3 + AvmThunkArgSize_AvmObject
	};
	typedef void (AvmObjectT::*FuncType)(ScriptObject*,ScriptObject*, ScriptObject*, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		AvmThunkUnbox_AvmObject(argv[argoff1]),
		argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL,
		argc>2?AvmThunkUnbox_AvmObject(argv[argoff3]):NULL,
		argc>3?AvmThunkUnbox_AvmString(argv[argoff4]):(Stringp)((avmshell::ShellCore*)env->core())->kNoneStr
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PPPS_GRAPHICS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_ppps_thunk_graphics, avmplus::NativeID::METHID },

AvmBox void_s_thunk_security(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0, argoff1 = argoff0 + AvmThunkArgSize_AvmObject};
	typedef void (AvmObjectT::*FuncType)(Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):(Stringp)((avmshell::ShellCore*)env->core())->kDefaultStr
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_S_SECURITY(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_s_thunk_security, avmplus::NativeID::METHID },

AvmBox void_di_thunk_microphone(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_double,
	};
	(void)argc;
	typedef void (AvmObjectT::*FuncType)(double,int);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	//double v=argc?AvmThunkUnbox_double(argv[argoff1]):0;
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))(
		argc?AvmThunkUnbox_double(argv[argoff1]):0.0,
		argc>1?AvmThunkUnbox_int32_t(argv[argoff2]):-1
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_DI_MICROPHONE(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_di_thunk_microphone, avmplus::NativeID::METHID },

AvmBox void_as_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum 
	{
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject
	};
	typedef void (AvmObjectT::*FuncType)(Atom, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argv[argoff1],
		argc>1?AvmThunkUnbox_AvmString(argv[argoff2]):NULL
		);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_AS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_as_thunk, avmplus::NativeID::METHID },

AvmBox void_sb_thunk_nativemenuitem(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):(Stringp)env->core()->kEmptyString,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SB_NATIVEMENUITEM(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sb_thunk_nativemenuitem, avmplus::NativeID::METHID },

AvmBox b_s_thunk_nativewindow(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject
	};

	typedef bool (AvmObjectT::*FuncType)(Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):(Stringp)((avmshell::ShellCore*)env->core())->kBRStr
		);
}

#define AVMTHUNK_NATIVE_METHOD_B_S_NATIVEWINDOW(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)b_s_thunk_nativewindow, avmplus::NativeID::METHID },

AvmBox void_a_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum 
	{
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
	};
	typedef void (AvmObjectT::*FuncType)(Atom);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argv[argoff1]
	);
	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_A(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_a_thunk, avmplus::NativeID::METHID },

AvmBox b_ps_thunk_matrix3d(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
	};
	(void)argc;
	typedef bool (AvmObjectT::*FuncType)(ScriptObject*, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[argoff0])).*(func))
		(
		argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmString(argv[argoff2]):(Stringp)((avmshell::ShellCore*)env->core())->kEulerAnglesStr
		);
}

#define AVMTHUNK_NATIVE_METHOD_B_PS_MATRIX3D(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)b_ps_thunk_matrix3d, avmplus::NativeID::METHID },

AvmBox a_up_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum 
	{
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_uint32_t
	};
	typedef AvmBox (AvmObjectT::*FuncType)(uint32_t, ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			argc?AvmThunkUnbox_uint32_t(argv[argoff1]):0,
			argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL
		);
}

#define AVMTHUNK_NATIVE_METHOD_A_UP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)a_up_thunk, avmplus::NativeID::METHID },
AvmBox i_s_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum 
	{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject
	};
	typedef int (AvmObjectT::*FuncType)(Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL
		);
}
#define AVMTHUNK_NATIVE_METHOD_I_S(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)i_s_thunk, avmplus::NativeID::METHID },

AvmBox i_issps_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum 
	{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
        argoff2 = argoff1 + AvmThunkArgSize_int32_t,
		argoff3 = argoff2 + AvmThunkArgSize_AvmString,
		argoff4 = argoff3 + AvmThunkArgSize_AvmString,
		argoff5 = argoff4 + AvmThunkArgSize_AvmObject
	};
	typedef int (AvmObjectT::*FuncType)(int32_t, Stringp, Stringp, ScriptObject*, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			argc?AvmThunkUnbox_int32_t(argv[argoff1]):0,
            argc>1?AvmThunkUnbox_AvmString(argv[argoff2]):NULL,
			argc>2?AvmThunkUnbox_AvmString(argv[argoff3]):NULL,
			argc>3?AvmThunkUnbox_AvmObject(argv[argoff4]):NULL,
			argc>4?AvmThunkUnbox_AvmString(argv[argoff5]):NULL
		);
}
#define AVMTHUNK_NATIVE_METHOD_I_ISSPS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)i_issps_thunk, avmplus::NativeID::METHID },

AvmBox i_isspss_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum 
	{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
        argoff2 = argoff1 + AvmThunkArgSize_int32_t,
		argoff3 = argoff2 + AvmThunkArgSize_AvmString,
		argoff4 = argoff3 + AvmThunkArgSize_AvmString,
		argoff5 = argoff4 + AvmThunkArgSize_AvmObject,
		argoff6 = argoff5 + AvmThunkArgSize_AvmString
	};
	typedef int (AvmObjectT::*FuncType)(int32_t, Stringp, Stringp, ScriptObject*, Stringp, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
            argc?AvmThunkUnbox_int32_t(argv[argoff1]):0,
			argc>1?AvmThunkUnbox_AvmString(argv[argoff2]):NULL,
			argc>2?AvmThunkUnbox_AvmString(argv[argoff3]):NULL,
			argc>3?AvmThunkUnbox_AvmObject(argv[argoff4]):NULL,
			argc>4?AvmThunkUnbox_AvmString(argv[argoff5]):NULL,
			argc>5?AvmThunkUnbox_AvmString(argv[argoff6]):NULL
		);
}
#define AVMTHUNK_NATIVE_METHOD_I_ISSPSS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)i_isspss_thunk, avmplus::NativeID::METHID },

AvmBox i_isspssp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum 
	{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
        argoff2 = argoff1 + AvmThunkArgSize_int32_t,
		argoff3 = argoff2 + AvmThunkArgSize_AvmString,
		argoff4 = argoff3 + AvmThunkArgSize_AvmString,
		argoff5 = argoff4 + AvmThunkArgSize_AvmObject,
		argoff6 = argoff5 + AvmThunkArgSize_AvmString,
		argoff7 = argoff6 + AvmThunkArgSize_AvmString
	};
	typedef int (AvmObjectT::*FuncType)(int32_t, Stringp, Stringp, ScriptObject*, Stringp, Stringp, ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			argc?AvmThunkUnbox_int32_t(argv[argoff1]):0,
            argc>1?AvmThunkUnbox_AvmString(argv[argoff2]):NULL,
			argc>2?AvmThunkUnbox_AvmString(argv[argoff3]):NULL,
			argc>3?AvmThunkUnbox_AvmObject(argv[argoff4]):NULL,
			argc>4?AvmThunkUnbox_AvmString(argv[argoff5]):NULL,
			argc>5?AvmThunkUnbox_AvmString(argv[argoff6]):NULL,
			argc>6?AvmThunkUnbox_AvmObject(argv[argoff7]):NULL
		);
}
#define AVMTHUNK_NATIVE_METHOD_I_ISSPSSP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)i_isspssp_thunk, avmplus::NativeID::METHID },

AvmBox i_ipp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {argoff0 = 0,
		  argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
          argoff2 = argoff1 + AvmThunkArgSize_int32_t,
		  argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
	};
	typedef AvmBox (AvmObjectT::*FuncType)(int32_t, ScriptObject*,ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
         argc?AvmThunkUnbox_int32_t(argv[argoff1]):NULL,
			argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL,
			argc>2?AvmThunkUnbox_AvmObject(argv[argoff3]):NULL
		);
}

#define AVMTHUNK_NATIVE_METHOD_I_IPP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)i_ipp_thunk, avmplus::NativeID::METHID },

AvmBox i_isspps_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum 
	{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
        argoff2 = argoff1 + AvmThunkArgSize_int32_t,
		argoff3 = argoff2 + AvmThunkArgSize_AvmString,
		argoff4 = argoff3 + AvmThunkArgSize_AvmString,
		argoff5 = argoff4 + AvmThunkArgSize_AvmObject,
		argoff6 = argoff5 + AvmThunkArgSize_AvmObject
	};
	typedef int (AvmObjectT::*FuncType)(int32_t, Stringp, Stringp, ScriptObject*, ScriptObject*,Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
            argc?AvmThunkUnbox_int32_t(argv[argoff1]):0,
            argc>1?AvmThunkUnbox_AvmString(argv[argoff2]):NULL,
			argc>2?AvmThunkUnbox_AvmString(argv[argoff3]):NULL,
			argc>3?AvmThunkUnbox_AvmObject(argv[argoff4]):NULL,
			argc>4?AvmThunkUnbox_AvmObject(argv[argoff5]):NULL,
			argc>5?AvmThunkUnbox_AvmString(argv[argoff6]):NULL
		);
}
#define AVMTHUNK_NATIVE_METHOD_I_ISSPPS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)i_isspps_thunk, avmplus::NativeID::METHID },
//Check adds end

//new adds 11
AvmBox void_pppspbs_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
		argoff4 = argoff3 + AvmThunkArgSize_AvmObject,
		argoff5 = argoff4 + AvmThunkArgSize_AvmString,
		argoff6 = argoff5 + AvmThunkArgSize_AvmObject,
		argoff7 = argoff6 + AvmThunkArgSize_AvmBool32,
	};

	typedef void (AvmObjectT::*FuncType)(ScriptObject*, ScriptObject*, ScriptObject*, Stringp, ScriptObject*, bool, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL,
		argc>2?AvmThunkUnbox_AvmObject(argv[argoff3]):NULL,
		argc>3?AvmThunkUnbox_AvmString(argv[argoff4]):NULL,
		argc>4?AvmThunkUnbox_AvmObject(argv[argoff5]):NULL,
		argc>5?AvmThunkUnbox_AvmBool32(argv[argoff6]):false,
		argc>6?AvmThunkUnbox_AvmString(argv[argoff7]):NULL
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PPPSPBS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_pppspbs_thunk, avmplus::NativeID::METHID },
//////////////////////////////////////////////////////////////////////////////////////////

AvmBox void_pppspb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_AvmObject,
		argoff4 = argoff3 + AvmThunkArgSize_AvmObject,
		argoff5 = argoff4 + AvmThunkArgSize_AvmString,
		argoff6 = argoff5 + AvmThunkArgSize_AvmObject	
	};

	typedef void (AvmObjectT::*FuncType)(ScriptObject*, ScriptObject*, ScriptObject*, Stringp, ScriptObject*, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL,
		argc>2?AvmThunkUnbox_AvmObject(argv[argoff3]):NULL,
		argc>3?AvmThunkUnbox_AvmString(argv[argoff4]):NULL,
		argc>4?AvmThunkUnbox_AvmObject(argv[argoff5]):NULL,
		argc>5?AvmThunkUnbox_AvmBool32(argv[argoff6]):false
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PPPSPB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_pppspb_thunk, avmplus::NativeID::METHID },

AvmBox p_ppp_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_AvmObject
	};

	typedef Atom (AvmObjectT::*FuncType)(ScriptObject*, ScriptObject*, ScriptObject*);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL,
		argc>2?AvmThunkUnbox_AvmObject(argv[argoff3]):NULL
		);

	//return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_P_PPP(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_ppp_thunk, avmplus::NativeID::METHID },

AvmBox i_iii_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_int32_t,
		argoff3 = argoff2 + AvmThunkArgSize_int32_t
	};

	typedef int (AvmObjectT::*FuncType)(int, int, int);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	return (*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_int32_t(argv[argoff1]):-1,
		argc>1?AvmThunkUnbox_int32_t(argv[argoff2]):-1,
		argc>2?AvmThunkUnbox_int32_t(argv[argoff3]):-1
		);

	//return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_I_III(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)i_iii_thunk, avmplus::NativeID::METHID },


AvmBox void_pbps_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum 
	{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmObject
	};
	typedef void (AvmObjectT::*FuncType)(ScriptObject*, bool, ScriptObject*, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
			argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
			argc>2?AvmThunkUnbox_AvmObject(argv[argoff3]):NULL,
			argc>3?AvmThunkUnbox_AvmString(argv[argoff4]):NULL
		);

	return kAvmThunkUndefined;
}
#define AVMTHUNK_NATIVE_METHOD_VOID_PBPS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_pbps_thunk, avmplus::NativeID::METHID },

AvmBox void_pu_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum 
	{
		argoff0 = 0,
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject
	};
	typedef void (AvmObjectT::*FuncType)(ScriptObject*, uint32_t);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));
	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
			argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
			argc>1?AvmThunkUnbox_uint32_t(argv[argoff2]):0
		);

	return kAvmThunkUndefined;
}
#define AVMTHUNK_NATIVE_METHOD_VOID_PU(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_pu_thunk, avmplus::NativeID::METHID },

AvmBox void_pusbd_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_uint32_t,
		argoff4 = argoff3 + AvmThunkArgSize_AvmString,
		argoff5 = argoff4 + AvmThunkArgSize_AvmBool32
	};

	typedef void (AvmObjectT::*FuncType)(ScriptObject*, uint32_t, Stringp, bool, double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_uint32_t(argv[argoff2]):0,
		argc>2?AvmThunkUnbox_AvmString(argv[argoff3]):NULL,
		argc>3?AvmThunkUnbox_AvmBool32(argv[argoff4]):false,
		argc>4?AvmThunkUnbox_double(argv[argoff5]):0.0
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PUSBD(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_pusbd_thunk, avmplus::NativeID::METHID },

AvmBox u_pb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject
	};

	typedef uint32_t (AvmObjectT::*FuncType)(ScriptObject*, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_U_PB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)u_pb_thunk, avmplus::NativeID::METHID },

AvmBox void_pub_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject,
		argoff3 = argoff2 + AvmThunkArgSize_uint32_t
	};

	typedef void (AvmObjectT::*FuncType)(ScriptObject*, uint32_t, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_uint32_t(argv[argoff2]):0,
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PUB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_pub_thunk, avmplus::NativeID::METHID },

AvmBox void_pb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject
	};

	typedef void (AvmObjectT::*FuncType)(ScriptObject*, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_PB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_pb_thunk, avmplus::NativeID::METHID },

AvmBox void_sbss_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmBool32,
		argoff4 = argoff3 + AvmThunkArgSize_AvmString
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, bool, Stringp, Stringp);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false,
		argc>2?AvmThunkUnbox_AvmString(argv[argoff3]):NULL,
		argc>3?AvmThunkUnbox_AvmString(argv[argoff4]):NULL
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SBSS(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_sbss_thunk, avmplus::NativeID::METHID },

AvmBox void_iid_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_int32_t,
		argoff3 = argoff2 + AvmThunkArgSize_int32_t
	};

	typedef void (AvmObjectT::*FuncType)(int, int, double);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_int32_t(argv[argoff1]):-1,
		argc>1?AvmThunkUnbox_int32_t(argv[argoff2]):-1,
		argc>2?AvmThunkUnbox_double(argv[argoff3]):0.0
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_IID(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_iid_thunk, avmplus::NativeID::METHID },

AvmBox void_spb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmString,
		argoff3 = argoff2 + AvmThunkArgSize_AvmObject
	};

	typedef void (AvmObjectT::*FuncType)(Stringp, ScriptObject*, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmString(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmObject(argv[argoff2]):NULL,
		argc>2?AvmThunkUnbox_AvmBool32(argv[argoff3]):false
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_VOID_SPB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)void_spb_thunk, avmplus::NativeID::METHID },

AvmBox p_pb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject
	};

	typedef ScriptObject* (AvmObjectT::*FuncType)(ScriptObject*, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_P_PB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)p_pb_thunk, avmplus::NativeID::METHID },

AvmBox i_pb_thunk(AvmMethodEnv env, uint32_t argc, AvmBox* argv)
{
	enum {
		argoff0 = 0, 
		argoff1 = argoff0 + AvmThunkArgSize_AvmObject,
		argoff2 = argoff1 + AvmThunkArgSize_AvmObject
	};

	typedef int (AvmObjectT::*FuncType)(ScriptObject*, bool);
	const FuncType func = reinterpret_cast<FuncType>(AVMTHUNK_GET_METHOD_HANDLER(env));

	(*(AvmThunkUnbox_AvmReceiver(AvmObject, argv[0])).*(func))
		(
		argc?AvmThunkUnbox_AvmObject(argv[argoff1]):NULL,
		argc>1?AvmThunkUnbox_AvmBool32(argv[argoff2]):false
		);

	return kAvmThunkUndefined;
}

#define AVMTHUNK_NATIVE_METHOD_I_PB(METHID, IMPL) \
{ { _NATIVE_METHOD_CAST_PTR(ScriptObject, &IMPL) }, (AvmThunkNativeThunker)i_pb_thunk, avmplus::NativeID::METHID },


//new adds 11 end

//Map Class(ProtoType) Table
AVMTHUNK_NATIVE_CLASS_GLUE(ColorTransformClass,::avmshell::ColorTransformClass, SlotOffsetsAndAsserts::doColorTransformClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(PointClass,::avmshell::PointClass, SlotOffsetsAndAsserts::doPointClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(RectangleClass,::avmshell::RectangleClass, SlotOffsetsAndAsserts::doRectangleClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(MatrixClass,::avmshell::MatrixClass, SlotOffsetsAndAsserts::doMatrixClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(EventClass,::avmshell::EventClass, SlotOffsetsAndAsserts::doEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(BitmapDataClass,::avmshell::BitmapDataClass, SlotOffsetsAndAsserts::doBitmapDataClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ExternalInterfaceClass,::avmshell::ExternalInterfaceClass, SlotOffsetsAndAsserts::doExternalInterfaceClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ApplicationDomainClass,::avmshell::ApplicationDomainClass, SlotOffsetsAndAsserts::doApplicationDomainClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SecurityDomainClass,::avmshell::SecurityDomainClass, SlotOffsetsAndAsserts::doSecurityDomainClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ByteArrayClass,::avmshell::ByteArrayClass, SlotOffsetsAndAsserts::doByteArrayClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ContextMenuBuiltInItemsClass,::avmshell::ContextMenuBuiltInItemsClass, SlotOffsetsAndAsserts::doContextMenuBuiltInItemsClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(AccessibilityPropertiesClass,::avmshell::AccessibilityPropertiesClass, SlotOffsetsAndAsserts::doAccessibilityPropertiesClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TransformClass,::avmshell::TransformClass, SlotOffsetsAndAsserts::doTransformClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(EventDispatcherClass,::avmshell::EventDispatcherClass, SlotOffsetsAndAsserts::doEventDispatcherClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(URLRequestClass,::avmshell::URLRequestClass, SlotOffsetsAndAsserts::doURLRequestClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SoundTransformClass,::avmshell::SoundTransformClass, SlotOffsetsAndAsserts::doSoundTransformClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ResponderClass,::avmshell::ResponderClass, SlotOffsetsAndAsserts::doResponderClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ID3InfoClass,::avmshell::ID3InfoClass, SlotOffsetsAndAsserts::doID3InfoClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SoundLoaderContextClass,::avmshell::SoundLoaderContextClass, SlotOffsetsAndAsserts::doSoundLoaderContextClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TextFormatClass,::avmshell::TextFormatClass, SlotOffsetsAndAsserts::doTextFormatClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(LoaderContextClass,::avmshell::LoaderContextClass, SlotOffsetsAndAsserts::doLoaderContextClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(BitmapFilterClass,::avmshell::BitmapFilterClass, SlotOffsetsAndAsserts::doBitmapFilterClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TextSnapshotClass,::avmshell::TextSnapshotClass, SlotOffsetsAndAsserts::doTextSnapshotClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(GraphicsClass,::avmshell::GraphicsClass, SlotOffsetsAndAsserts::doGraphicsClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SceneClass,::avmshell::SceneClass, SlotOffsetsAndAsserts::doSceneClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(PrintJobOptionsClass,::avmshell::PrintJobOptionsClass, SlotOffsetsAndAsserts::doPrintJobOptionsClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(AccessibilityClass,::avmshell::AccessibilityClass, SlotOffsetsAndAsserts::doAccessibilityClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ActionScriptVersionClass,::avmshell::ActionScriptVersionClass, SlotOffsetsAndAsserts::doActionScriptVersionClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(AntiAliasTypeClass,::avmshell::AntiAliasTypeClass, SlotOffsetsAndAsserts::doAntiAliasTypeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(argumentsClass,::avmshell::argumentsClass, SlotOffsetsAndAsserts::doargumentsClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(BitmapDataChannelClass,::avmshell::BitmapDataChannelClass, SlotOffsetsAndAsserts::doBitmapDataChannelClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(BitmapFilterQualityClass,::avmshell::BitmapFilterQualityClass, SlotOffsetsAndAsserts::doBitmapFilterQualityClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(BitmapFilterTypeClass,::avmshell::BitmapFilterTypeClass, SlotOffsetsAndAsserts::doBitmapFilterTypeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(BlendModeClass,::avmshell::BlendModeClass, SlotOffsetsAndAsserts::doBlendModeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(CapabilitiesClass,::avmshell::CapabilitiesClass, SlotOffsetsAndAsserts::doCapabilitiesClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(CapsStyleClass,::avmshell::CapsStyleClass, SlotOffsetsAndAsserts::doCapsStyleClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(CSMSettingsClass,::avmshell::CSMSettingsClass, SlotOffsetsAndAsserts::doCSMSettingsClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(CustomActionsClass,::avmshell::CustomActionsClass, SlotOffsetsAndAsserts::doCustomActionsClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DictionaryClass,::avmshell::DictionaryClass, SlotOffsetsAndAsserts::doDictionaryClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DisplacementMapFilterModeClass,::avmshell::DisplacementMapFilterModeClass, SlotOffsetsAndAsserts::doDisplacementMapFilterModeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(EndianClass,::avmshell::EndianClass, SlotOffsetsAndAsserts::doEndianClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(EventPhaseClass,::avmshell::EventPhaseClass, SlotOffsetsAndAsserts::doEventPhaseClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(FileFilterClass,::avmshell::FileFilterClass, SlotOffsetsAndAsserts::doFileFilterClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(FontClass,::avmshell::FontClass, SlotOffsetsAndAsserts::doFontClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(FontStyleClass,::avmshell::FontStyleClass, SlotOffsetsAndAsserts::doFontStyleClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(FontTypeClass,::avmshell::FontTypeClass, SlotOffsetsAndAsserts::doFontTypeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(FrameLabelClass,::avmshell::FrameLabelClass, SlotOffsetsAndAsserts::doFrameLabelClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(GradientTypeClass,::avmshell::GradientTypeClass, SlotOffsetsAndAsserts::doGradientTypeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(GridFitTypeClass,::avmshell::GridFitTypeClass, SlotOffsetsAndAsserts::doGridFitTypeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(IMEConversionModeClass,::avmshell::IMEConversionModeClass, SlotOffsetsAndAsserts::doIMEConversionModeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(InterpolationMethodClass,::avmshell::InterpolationMethodClass, SlotOffsetsAndAsserts::doInterpolationMethodClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(JointStyleClass,::avmshell::JointStyleClass, SlotOffsetsAndAsserts::doJointStyleClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(KeyboardClass,::avmshell::KeyboardClass, SlotOffsetsAndAsserts::doKeyboardClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(KeyLocationClass,::avmshell::KeyLocationClass, SlotOffsetsAndAsserts::doKeyLocationClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(LineScaleModeClass,::avmshell::LineScaleModeClass, SlotOffsetsAndAsserts::doLineScaleModeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(MouseClass,::avmshell::MouseClass, SlotOffsetsAndAsserts::doMouseClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ObjectEncodingClass,::avmshell::ObjectEncodingClass, SlotOffsetsAndAsserts::doObjectEncodingClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(PixelSnappingClass,::avmshell::PixelSnappingClass, SlotOffsetsAndAsserts::doPixelSnappingClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(PrintJobOrientationClass,::avmshell::PrintJobOrientationClass, SlotOffsetsAndAsserts::doPrintJobOrientationClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ProxyClass,::avmshell::ProxyClass, SlotOffsetsAndAsserts::doProxyClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SecurityClass,::avmshell::SecurityClass, SlotOffsetsAndAsserts::doSecurityClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SecurityPanelClass,::avmshell::SecurityPanelClass, SlotOffsetsAndAsserts::doSecurityPanelClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SharedObjectFlushStatusClass,::avmshell::SharedObjectFlushStatusClass, SlotOffsetsAndAsserts::doSharedObjectFlushStatusClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SoundMixerClass,::avmshell::SoundMixerClass, SlotOffsetsAndAsserts::doSoundMixerClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SpreadMethodClass,::avmshell::SpreadMethodClass, SlotOffsetsAndAsserts::doSpreadMethodClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(StageAlignClass,::avmshell::StageAlignClass, SlotOffsetsAndAsserts::doStageAlignClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(StageDisplayStateClass,::avmshell::StageDisplayStateClass, SlotOffsetsAndAsserts::doStageDisplayStateClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(StageQualityClass,::avmshell::StageQualityClass, SlotOffsetsAndAsserts::doStageQualityClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(StageScaleModeClass,::avmshell::StageScaleModeClass, SlotOffsetsAndAsserts::doStageScaleModeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SWFVersionClass,::avmshell::SWFVersionClass, SlotOffsetsAndAsserts::doSWFVersionClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SystemClass,::avmshell::SystemClass, SlotOffsetsAndAsserts::doSystemClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TextColorTypeClass,::avmshell::TextColorTypeClass, SlotOffsetsAndAsserts::doTextColorTypeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TextDisplayModeClass,::avmshell::TextDisplayModeClass, SlotOffsetsAndAsserts::doTextDisplayModeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TextFieldAutoSizeClass,::avmshell::TextFieldAutoSizeClass, SlotOffsetsAndAsserts::doTextFieldAutoSizeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TextFieldTypeClass,::avmshell::TextFieldTypeClass, SlotOffsetsAndAsserts::doTextFieldTypeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TextFormatAlignClass,::avmshell::TextFormatAlignClass, SlotOffsetsAndAsserts::doTextFormatAlignClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TextLineMetricsClass,::avmshell::TextLineMetricsClass, SlotOffsetsAndAsserts::doTextLineMetricsClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TextRendererClass,::avmshell::TextRendererClass, SlotOffsetsAndAsserts::doTextRendererClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(URLLoaderDataFormatClass,::avmshell::URLLoaderDataFormatClass, SlotOffsetsAndAsserts::doURLLoaderDataFormatClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(URLRequestHeaderClass,::avmshell::URLRequestHeaderClass, SlotOffsetsAndAsserts::doURLRequestHeaderClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(URLRequestMethodClass,::avmshell::URLRequestMethodClass, SlotOffsetsAndAsserts::doURLRequestMethodClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(URLVariablesClass,::avmshell::URLVariablesClass, SlotOffsetsAndAsserts::doURLVariablesClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(XMLNodeClass,::avmshell::XMLNodeClass, SlotOffsetsAndAsserts::doXMLNodeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(XMLNodeTypeClass,::avmshell::XMLNodeTypeClass, SlotOffsetsAndAsserts::doXMLNodeTypeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(XMLUIClass,::avmshell::XMLUIClass, SlotOffsetsAndAsserts::doXMLUIClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(IllegalOperationErrorClass,::avmshell::IllegalOperationErrorClass, SlotOffsetsAndAsserts::doIllegalOperationErrorClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(IOErrorClass,::avmshell::IOErrorClass, SlotOffsetsAndAsserts::doIOErrorClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(MemoryErrorClass,::avmshell::MemoryErrorClass, SlotOffsetsAndAsserts::doMemoryErrorClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ScriptTimeoutErrorClass,::avmshell::ScriptTimeoutErrorClass, SlotOffsetsAndAsserts::doScriptTimeoutErrorClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(StackOverflowErrorClass,::avmshell::StackOverflowErrorClass, SlotOffsetsAndAsserts::doStackOverflowErrorClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ActivityEventClass,::avmshell::ActivityEventClass, SlotOffsetsAndAsserts::doActivityEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ContextMenuEventClass,::avmshell::ContextMenuEventClass, SlotOffsetsAndAsserts::doContextMenuEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(FocusEventClass,::avmshell::FocusEventClass, SlotOffsetsAndAsserts::doFocusEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(HTTPStatusEventClass,::avmshell::HTTPStatusEventClass, SlotOffsetsAndAsserts::doHTTPStatusEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(InvalidSWFErrorClass,::avmshell::InvalidSWFErrorClass, SlotOffsetsAndAsserts::doInvalidSWFErrorClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(KeyboardEventClass,::avmshell::KeyboardEventClass, SlotOffsetsAndAsserts::doKeyboardEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(MouseEventClass,::avmshell::MouseEventClass, SlotOffsetsAndAsserts::doMouseEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NetStatusEventClass,::avmshell::NetStatusEventClass, SlotOffsetsAndAsserts::doNetStatusEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ProgressEventClass,::avmshell::ProgressEventClass, SlotOffsetsAndAsserts::doProgressEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(StatusEventClass,::avmshell::StatusEventClass, SlotOffsetsAndAsserts::doStatusEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SyncEventClass,::avmshell::SyncEventClass, SlotOffsetsAndAsserts::doSyncEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TextEventClass,::avmshell::TextEventClass, SlotOffsetsAndAsserts::doTextEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TimerEventClass,::avmshell::TimerEventClass, SlotOffsetsAndAsserts::doTimerEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ContextMenuClass,::avmshell::ContextMenuClass, SlotOffsetsAndAsserts::doContextMenuClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DisplayObjectClass,::avmshell::DisplayObjectClass, SlotOffsetsAndAsserts::doDisplayObjectClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(IMEClass,::avmshell::IMEClass, SlotOffsetsAndAsserts::doIMEClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NetConnectionClass,::avmshell::NetConnectionClass, SlotOffsetsAndAsserts::doNetConnectionClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SoundChannelClass,::avmshell::SoundChannelClass, SlotOffsetsAndAsserts::doSoundChannelClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(StyleSheetClass,::avmshell::StyleSheetClass, SlotOffsetsAndAsserts::doStyleSheetClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(MicrophoneClass,::avmshell::MicrophoneClass, SlotOffsetsAndAsserts::doMicrophoneClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NetStreamClass,::avmshell::NetStreamClass, SlotOffsetsAndAsserts::doNetStreamClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(CameraClass,::avmshell::CameraClass, SlotOffsetsAndAsserts::doCameraClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ContextMenuItemClass,::avmshell::ContextMenuItemClass, SlotOffsetsAndAsserts::doContextMenuItemClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(FileReferenceClass,::avmshell::FileReferenceClass, SlotOffsetsAndAsserts::doFileReferenceClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(FileReferenceListClass,::avmshell::FileReferenceListClass, SlotOffsetsAndAsserts::doFileReferenceListClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(LoaderInfoClass,::avmshell::LoaderInfoClass, SlotOffsetsAndAsserts::doLoaderInfoClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(LocalConnectionClass,::avmshell::LocalConnectionClass, SlotOffsetsAndAsserts::doLocalConnectionClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(PrintJobClass,::avmshell::PrintJobClass, SlotOffsetsAndAsserts::doPrintJobClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SharedObjectClass,::avmshell::SharedObjectClass, SlotOffsetsAndAsserts::doSharedObjectClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SocketClass,::avmshell::SocketClass, SlotOffsetsAndAsserts::doSocketClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SoundClass,::avmshell::SoundClass, SlotOffsetsAndAsserts::doSoundClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TimerClass,::avmshell::TimerClass, SlotOffsetsAndAsserts::doTimerClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(URLLoaderClass,::avmshell::URLLoaderClass, SlotOffsetsAndAsserts::doURLLoaderClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(URLStreamClass,::avmshell::URLStreamClass, SlotOffsetsAndAsserts::doURLStreamClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(XMLSocketClass,::avmshell::XMLSocketClass, SlotOffsetsAndAsserts::doXMLSocketClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(BlurFilterClass,::avmshell::BlurFilterClass, SlotOffsetsAndAsserts::doBlurFilterClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(BevelFilterClass,::avmshell::BevelFilterClass, SlotOffsetsAndAsserts::doBevelFilterClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ColorMatrixFilterClass,::avmshell::ColorMatrixFilterClass, SlotOffsetsAndAsserts::doColorMatrixFilterClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ConvolutionFilterClass,::avmshell::ConvolutionFilterClass, SlotOffsetsAndAsserts::doConvolutionFilterClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DisplacementMapFilterClass,::avmshell::DisplacementMapFilterClass, SlotOffsetsAndAsserts::doDisplacementMapFilterClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DropShadowFilterClass,::avmshell::DropShadowFilterClass, SlotOffsetsAndAsserts::doDropShadowFilterClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(GlowFilterClass,::avmshell::GlowFilterClass, SlotOffsetsAndAsserts::doGlowFilterClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(GradientBevelFilterClass,::avmshell::GradientBevelFilterClass, SlotOffsetsAndAsserts::doGradientBevelFilterClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(GradientGlowFilterClass,::avmshell::GradientGlowFilterClass, SlotOffsetsAndAsserts::doGradientGlowFilterClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(XMLDocumentClass,::avmshell::XMLDocumentClass, SlotOffsetsAndAsserts::doXMLDocumentClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(EOFErrorClass,::avmshell::EOFErrorClass, SlotOffsetsAndAsserts::doEOFErrorClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(FullScreenEventClass,::avmshell::FullScreenEventClass, SlotOffsetsAndAsserts::doFullScreenEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DataEventClass,::avmshell::DataEventClass, SlotOffsetsAndAsserts::doDataEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ErrorEventClass,::avmshell::ErrorEventClass, SlotOffsetsAndAsserts::doErrorEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(IMEEventClass,::avmshell::IMEEventClass, SlotOffsetsAndAsserts::doIMEEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(InteractiveObjectClass,::avmshell::InteractiveObjectClass, SlotOffsetsAndAsserts::doInteractiveObjectClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(AVM1MovieClass,::avmshell::AVM1MovieClass, SlotOffsetsAndAsserts::doAVM1MovieClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(BitmapClass,::avmshell::BitmapClass, SlotOffsetsAndAsserts::doBitmapClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(MorphShapeClass,::avmshell::MorphShapeClass, SlotOffsetsAndAsserts::doMorphShapeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ShapeClass,::avmshell::ShapeClass, SlotOffsetsAndAsserts::doShapeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(StaticTextClass,::avmshell::StaticTextClass, SlotOffsetsAndAsserts::doStaticTextClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(VideoClass,::avmshell::VideoClass, SlotOffsetsAndAsserts::doVideoClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(AsyncErrorEventClass,::avmshell::AsyncErrorEventClass, SlotOffsetsAndAsserts::doAsyncErrorEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(IOErrorEventClass,::avmshell::IOErrorEventClass, SlotOffsetsAndAsserts::doIOErrorEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SecurityErrorEventClass,::avmshell::SecurityErrorEventClass, SlotOffsetsAndAsserts::doSecurityErrorEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DisplayObjectContainerClass,::avmshell::DisplayObjectContainerClass, SlotOffsetsAndAsserts::doDisplayObjectContainerClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SimpleButtonClass,::avmshell::SimpleButtonClass, SlotOffsetsAndAsserts::doSimpleButtonClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TextFieldClass,::avmshell::TextFieldClass, SlotOffsetsAndAsserts::doTextFieldClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(LoaderClass,::avmshell::LoaderClass, SlotOffsetsAndAsserts::doLoaderClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SpriteClass,::avmshell::SpriteClass, SlotOffsetsAndAsserts::doSpriteClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(StageClass,::avmshell::StageClass, SlotOffsetsAndAsserts::doStageClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(MovieClipClass,::avmshell::MovieClipClass, SlotOffsetsAndAsserts::doMovieClipClassAsserts)
//AVMTHUNK_NATIVE_CLASS_GLUE(DomainClass,::avmshell::DomainClass, SlotOffsetsAndAsserts::doDomainClassAsserts)
//AVMTHUNK_NATIVE_CLASS_GLUE(BXDeviceBitmapDataClass,::avmshell::BXDeviceBitmapDataClass, SlotOffsetsAndAsserts::doBXDeviceBitmapDataClassAsserts)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Private
AVMTHUNK_NATIVE_CLASS_GLUE(DomainClass,::avmshell::DomainClass, SlotOffsetsAndAsserts::doDomainClassAsserts)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Specical API

/*static ClassClosure* BXDeviceBitmapDataClass_createClassClosure(VTable* cvtable)
{ 
			FQCLS* cc = new (cvtable->gc(), cvtable->getExtraSize()) FQCLS(cvtable);
			ASSERT_FUNC(cc->traits(), cc->traits()->itraits);
			return cc;
}*/

//#define AVMTHUNK_NATIVE_CLASS_GLUE(CLS, FQCLS, ASSERT_FUNC) \
//		static ClassClosure* CLS##_createClassClosure(VTable* cvtable) \
//		{ \
//			FQCLS* cc = new (cvtable->gc(), cvtable->getExtraSize()) FQCLS(cvtable); \
//			ASSERT_FUNC(cc->traits(), cc->traits()->itraits); \
//			return cc; \
//		}
//AVMTHUNK_NATIVE_CLASS_GLUE(BXDeviceBitmapDataClass,::avmshell::BXDeviceBitmapDataClass, SlotOffsetsAndAsserts::doBXDeviceBitmapDataClassAsserts)
//AVMTHUNK_NATIVE_CLASS_GLUE(BXBGLayerClass,::avmshell::BXBGLayerClass, SlotOffsetsAndAsserts::doBXBGLayerClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(BXWaveStreamClass,::avmshell::BXWaveStreamClass, SlotOffsetsAndAsserts::doBXWaveStreamClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(BXAccClass,::avmshell::BXAccClass, SlotOffsetsAndAsserts::doBXAccClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(BXWaveEventClass,::avmshell::BXWaveEventClass, SlotOffsetsAndAsserts::doBXWaveEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE( BwExternAPIClass, ::avmshell::BwExternAPIClass, SlotOffsetsAndAsserts::doBwExternAPIClassAsserts )
AVMTHUNK_NATIVE_CLASS_GLUE( WeiXinShareSessionClass, ::avmshell::WeiXinShareSessionClass, SlotOffsetsAndAsserts::doWeiXinShareSessionClassAsserts )
AVMTHUNK_NATIVE_CLASS_GLUE( DuoMengSDKInterfaceClass, ::avmshell::DuoMengSDKInterfaceClass, SlotOffsetsAndAsserts::doDuoMengSDKInterfaceClassAsserts )
AVMTHUNK_NATIVE_CLASS_GLUE( BwPayAPIClass, ::avmshell::BwPayAPIClass, SlotOffsetsAndAsserts::doBwPayAPIClassAsserts )
AVMTHUNK_NATIVE_CLASS_GLUE(BXFileClass,::avmshell::BXFileClass, SlotOffsetsAndAsserts::doBXFileClassAsserts)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//AIR
//AVMTHUNK_NATIVE_CLASS_GLUE(AccessibilityImplementationClass,::avmshell::AccessibilityImplementationClass, SlotOffsetsAndAsserts::doAccessibilityImplementationClassAsserts)
//////////////////////////////////////////////////////////////
//JavaScript
//Delete JavaScript for BUGS
//AVMTHUNK_NATIVE_CLASS_GLUE(WindowClass,::avmshell::WindowClass, SlotOffsetsAndAsserts::doWindowClassAsserts)
//AVMTHUNK_NATIVE_CLASS_GLUE(NavigatorClass,::avmshell::NavigatorClass, SlotOffsetsAndAsserts::doNavigatorClassAsserts)
//AVMTHUNK_NATIVE_CLASS_GLUE(LocationClass,::avmshell::LocationClass, SlotOffsetsAndAsserts::doLocationClassAsserts)


//new adds
AVMTHUNK_NATIVE_CLASS_GLUE(AccessibilityImplementationClass,::avmshell::AccessibilityImplementationClass,SlotOffsetsAndAsserts::doAccessibilityImplementationClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ColorCorrectionClass,::avmshell::ColorCorrectionClass,SlotOffsetsAndAsserts::doColorCorrectionClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ColorCorrectionSupportClass,::avmshell::ColorCorrectionSupportClass,SlotOffsetsAndAsserts::doColorCorrectionSupportClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(FocusDirectionClass,::avmshell::FocusDirectionClass,SlotOffsetsAndAsserts::doFocusDirectionClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(GraphicsBitmapFillClass,::avmshell::GraphicsBitmapFillClass,SlotOffsetsAndAsserts::doGraphicsBitmapFillClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(GraphicsEndFillClass,::avmshell::GraphicsEndFillClass,SlotOffsetsAndAsserts::doGraphicsEndFillClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(GraphicsGradientFillClass,::avmshell::GraphicsGradientFillClass,SlotOffsetsAndAsserts::doGraphicsGradientFillClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(GraphicsPathClass,::avmshell::GraphicsPathClass,SlotOffsetsAndAsserts::doGraphicsPathClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(GraphicsPathCommandClass,::avmshell::GraphicsPathCommandClass,SlotOffsetsAndAsserts::doGraphicsPathCommandClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(GraphicsPathWindingClass,::avmshell::GraphicsPathWindingClass,SlotOffsetsAndAsserts::doGraphicsPathWindingClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(GraphicsShaderFillClass,::avmshell::GraphicsShaderFillClass,SlotOffsetsAndAsserts::doGraphicsShaderFillClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(GraphicsSolidFillClass,::avmshell::GraphicsSolidFillClass,SlotOffsetsAndAsserts::doGraphicsSolidFillClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(GraphicsStrokeClass,::avmshell::GraphicsStrokeClass,SlotOffsetsAndAsserts::doGraphicsStrokeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(GraphicsTrianglePathClass,::avmshell::GraphicsTrianglePathClass,SlotOffsetsAndAsserts::doGraphicsTrianglePathClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NativeMenuClass,::avmshell::NativeMenuClass,SlotOffsetsAndAsserts::doNativeMenuClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NativeMenuItemClass,::avmshell::NativeMenuItemClass,SlotOffsetsAndAsserts::doNativeMenuItemClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NativeWindowClass,::avmshell::NativeWindowClass,SlotOffsetsAndAsserts::doNativeWindowClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NativeWindowDisplayStateClass,::avmshell::NativeWindowDisplayStateClass,SlotOffsetsAndAsserts::doNativeWindowDisplayStateClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NativeWindowInitOptionsClass,::avmshell::NativeWindowInitOptionsClass,SlotOffsetsAndAsserts::doNativeWindowInitOptionsClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NativeWindowResizeClass,::avmshell::NativeWindowResizeClass,SlotOffsetsAndAsserts::doNativeWindowResizeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NativeWindowSystemChromeClass,::avmshell::NativeWindowSystemChromeClass,SlotOffsetsAndAsserts::doNativeWindowSystemChromeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NativeWindowTypeClass,::avmshell::NativeWindowTypeClass,SlotOffsetsAndAsserts::doNativeWindowTypeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ScreenClass,::avmshell::ScreenClass,SlotOffsetsAndAsserts::doScreenClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ShaderClass,::avmshell::ShaderClass,SlotOffsetsAndAsserts::doShaderClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ShaderDataClass,::avmshell::ShaderDataClass,SlotOffsetsAndAsserts::doShaderDataClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ShaderInputClass,::avmshell::ShaderInputClass,SlotOffsetsAndAsserts::doShaderInputClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ShaderJobClass,::avmshell::ShaderJobClass,SlotOffsetsAndAsserts::doShaderJobClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ShaderParameterClass,::avmshell::ShaderParameterClass,SlotOffsetsAndAsserts::doShaderParameterClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ShaderParameterTypeClass,::avmshell::ShaderParameterTypeClass,SlotOffsetsAndAsserts::doShaderParameterTypeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ShaderPrecisionClass,::avmshell::ShaderPrecisionClass,SlotOffsetsAndAsserts:: doShaderPrecisionClassAsserts) 
AVMTHUNK_NATIVE_CLASS_GLUE(StageAspectRatioClass,::avmshell::StageAspectRatioClass,SlotOffsetsAndAsserts::doStageAspectRatioClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(StageOrientationClass,::avmshell::StageOrientationClass,SlotOffsetsAndAsserts::doStageOrientationClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TriangleCullingClass,::avmshell::TriangleCullingClass,SlotOffsetsAndAsserts::doTriangleCullingClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DRMManagerErrorClass,::avmshell::DRMManagerErrorClass,SlotOffsetsAndAsserts::doDRMManagerErrorClassAsserts) 
AVMTHUNK_NATIVE_CLASS_GLUE(SQLErrorClass,::avmshell::SQLErrorClass,SlotOffsetsAndAsserts::doSQLErrorClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SQLErrorOperationClass,::avmshell::SQLErrorOperationClass,SlotOffsetsAndAsserts::doSQLErrorOperationClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(AccelerometerEventClass,::avmshell::AccelerometerEventClass,SlotOffsetsAndAsserts::doAccelerometerEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(BrowserInvokeEventClass,::avmshell::BrowserInvokeEventClass,SlotOffsetsAndAsserts::doBrowserInvokeEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DatagramSocketDataEventClass,::avmshell::DatagramSocketDataEventClass,SlotOffsetsAndAsserts::doDatagramSocketDataEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DNSResolverEventClass,::avmshell::DNSResolverEventClass,SlotOffsetsAndAsserts::doDNSResolverEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DRMAuthenticateEventClass,::avmshell::DRMAuthenticateEventClass,SlotOffsetsAndAsserts::doDRMAuthenticateEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DRMAuthenticationCompleteEventClass,::avmshell::DRMAuthenticationCompleteEventClass,SlotOffsetsAndAsserts::doDRMAuthenticationCompleteEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DRMAuthenticationErrorEventClass,::avmshell::DRMAuthenticationErrorEventClass,SlotOffsetsAndAsserts::doDRMAuthenticationErrorEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DRMErrorEventClass,::avmshell::DRMErrorEventClass,SlotOffsetsAndAsserts::doDRMErrorEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DRMStatusEventClass,::avmshell::DRMStatusEventClass,SlotOffsetsAndAsserts::doDRMStatusEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(FileListEventClass,::avmshell::FileListEventClass,SlotOffsetsAndAsserts::doFileListEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(GeolocationEventClass,::avmshell::GeolocationEventClass,SlotOffsetsAndAsserts::doGeolocationEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(GestureEventClass,::avmshell::GestureEventClass,SlotOffsetsAndAsserts::doGestureEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(GesturePhaseClass,::avmshell::GesturePhaseClass,SlotOffsetsAndAsserts::doGesturePhaseClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(HTMLUncaughtScriptExceptionEventClass,::avmshell::HTMLUncaughtScriptExceptionEventClass,SlotOffsetsAndAsserts::doHTMLUncaughtScriptExceptionEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(InvokeEventClass,::avmshell::InvokeEventClass,SlotOffsetsAndAsserts::doInvokeEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(LocationChangeEventClass,::avmshell::LocationChangeEventClass,SlotOffsetsAndAsserts::doLocationChangeEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(MediaEventClass,::avmshell::MediaEventClass,SlotOffsetsAndAsserts::doMediaEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NativeDragEventClass,::avmshell::NativeDragEventClass,SlotOffsetsAndAsserts::doNativeDragEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NativeProcessExitEventClass,::avmshell::NativeProcessExitEventClass,SlotOffsetsAndAsserts::doNativeProcessExitEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NativeWindowBoundsEventClass,::avmshell::NativeWindowBoundsEventClass,SlotOffsetsAndAsserts::doNativeWindowBoundsEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NativeWindowDisplayStateEventClass,::avmshell::NativeWindowDisplayStateEventClass,SlotOffsetsAndAsserts::doNativeWindowDisplayStateEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NetDataEventClass,::avmshell::NetDataEventClass,SlotOffsetsAndAsserts::doNetDataEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NetMonitorEventClass,::avmshell::NetMonitorEventClass,SlotOffsetsAndAsserts::doNetMonitorEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(OutputProgressEventClass,::avmshell::OutputProgressEventClass,SlotOffsetsAndAsserts::doOutputProgressEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(PressAndTapGestureEventClass,::avmshell::PressAndTapGestureEventClass,SlotOffsetsAndAsserts::doPressAndTapGestureEventClassAsserts)
//AVMTHUNK_NATIVE_CLASS_GLUE(SampleDataEventClass,::avmshell::SampleDataEventClass,SlotOffsetsAndAsserts::doSampleDataEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ScreenMouseEventClass,::avmshell::ScreenMouseEventClass,SlotOffsetsAndAsserts::doScreenMouseEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ServerSocketConnectEventClass,::avmshell::ServerSocketConnectEventClass,SlotOffsetsAndAsserts::doServerSocketConnectEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ShaderEventClass,::avmshell::ShaderEventClass,SlotOffsetsAndAsserts::doShaderEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SoftKeyboardEventClass,::avmshell::SoftKeyboardEventClass,SlotOffsetsAndAsserts::doSoftKeyboardEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SoftKeyboardTriggerClass,::avmshell::SoftKeyboardTriggerClass,SlotOffsetsAndAsserts::doSoftKeyboardTriggerClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SQLErrorEventClass,::avmshell::SQLErrorEventClass,SlotOffsetsAndAsserts::doSQLErrorEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SQLEventClass,::avmshell::SQLEventClass,SlotOffsetsAndAsserts::doSQLEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SQLUpdateEventClass,::avmshell::SQLUpdateEventClass,SlotOffsetsAndAsserts::doSQLUpdateEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(StageOrientationEventClass,::avmshell::StageOrientationEventClass,SlotOffsetsAndAsserts::doStageOrientationEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(StageVideoAvailabilityEventClass,::avmshell::StageVideoAvailabilityEventClass,SlotOffsetsAndAsserts::doStageVideoAvailabilityEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(StageVideoEventClass,::avmshell::StageVideoEventClass,SlotOffsetsAndAsserts::doStageVideoEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(StorageVolumeChangeEventClass,::avmshell::StorageVolumeChangeEventClass,SlotOffsetsAndAsserts::doStorageVolumeChangeEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TouchEventClass,::avmshell::TouchEventClass,SlotOffsetsAndAsserts::doTouchEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TransformGestureEventClass,::avmshell::TransformGestureEventClass,SlotOffsetsAndAsserts::doTransformGestureEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(UncaughtErrorEventClass,::avmshell::UncaughtErrorEventClass,SlotOffsetsAndAsserts::doUncaughtErrorEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(UncaughtErrorEventsClass,::avmshell::UncaughtErrorEventsClass,SlotOffsetsAndAsserts::doUncaughtErrorEventsClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(VideoEventClass,::avmshell::VideoEventClass,SlotOffsetsAndAsserts::doVideoEventClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ExtensionContextClass,::avmshell::ExtensionContextClass,SlotOffsetsAndAsserts::doExtensionContextClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ShaderFilterClass,::avmshell::ShaderFilterClass,SlotOffsetsAndAsserts::doShaderFilterClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(Matrix3DClass,::avmshell::Matrix3DClass,SlotOffsetsAndAsserts::doMatrix3DClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(Orientation3DClass,::avmshell::Orientation3DClass,SlotOffsetsAndAsserts::doOrientation3DClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(PerspectiveProjectionClass,::avmshell::PerspectiveProjectionClass,SlotOffsetsAndAsserts::doPerspectiveProjectionClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(Utils3DClass,::avmshell::Utils3DClass,SlotOffsetsAndAsserts::doUtils3DClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(Vector3DClass,::avmshell::Vector3DClass,SlotOffsetsAndAsserts::doVector3DClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(CameraRollClass,::avmshell::CameraRollClass,SlotOffsetsAndAsserts::doCameraRollClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(CameraUIClass,::avmshell::CameraUIClass,SlotOffsetsAndAsserts::doCameraUIClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(MediaPromiseClass,::avmshell::MediaPromiseClass,SlotOffsetsAndAsserts::doMediaPromiseClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(MediaTypeClass,::avmshell::MediaTypeClass,SlotOffsetsAndAsserts::doMediaTypeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(MicrophoneEnhancedModeClass,::avmshell::MicrophoneEnhancedModeClass,SlotOffsetsAndAsserts::doMicrophoneEnhancedModeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(MicrophoneEnhancedOptionsClass,::avmshell::MicrophoneEnhancedOptionsClass,SlotOffsetsAndAsserts::doMicrophoneEnhancedOptionsClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SoundCodecClass,::avmshell::SoundCodecClass,SlotOffsetsAndAsserts::doSoundCodecClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(StageVideoClass,::avmshell::StageVideoClass,SlotOffsetsAndAsserts::doStageVideoClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(StageVideoAvailabilityClass,::avmshell::StageVideoAvailabilityClass,SlotOffsetsAndAsserts::doStageVideoAvailabilityClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(StageWebViewClass,::avmshell::StageWebViewClass,SlotOffsetsAndAsserts::doStageWebViewClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(VideoStatusClass,::avmshell::VideoStatusClass,SlotOffsetsAndAsserts::doVideoStatusClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DatagramSocketClass,::avmshell::DatagramSocketClass,SlotOffsetsAndAsserts::doDatagramSocketClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(GroupSpecifierClass,::avmshell::GroupSpecifierClass,SlotOffsetsAndAsserts::doGroupSpecifierClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(InterfaceAddressClass,::avmshell::InterfaceAddressClass,SlotOffsetsAndAsserts::doInterfaceAddressClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(IPVersionClass,::avmshell::IPVersionClass,SlotOffsetsAndAsserts::doIPVersionClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NetGroupClass,::avmshell::NetGroupClass,SlotOffsetsAndAsserts::doNetGroupClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NetGroupInfoClass,::avmshell::NetGroupInfoClass,SlotOffsetsAndAsserts::doNetGroupInfoClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NetGroupReceiveModeClass,::avmshell::NetGroupReceiveModeClass,SlotOffsetsAndAsserts::doNetGroupReceiveModeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NetGroupReplicationStrategyClass,::avmshell::NetGroupReplicationStrategyClass,SlotOffsetsAndAsserts::doNetGroupReplicationStrategyClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NetGroupSendModeClass,::avmshell::NetGroupSendModeClass,SlotOffsetsAndAsserts::doNetGroupSendModeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NetGroupSendResultClass,::avmshell::NetGroupSendResultClass,SlotOffsetsAndAsserts::doNetGroupSendResultClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NetMonitorClass,::avmshell::NetMonitorClass,SlotOffsetsAndAsserts::doNetMonitorClassAsserts)
//AVMTHUNK_NATIVE_CLASS_GLUE(NetStreamClass,::avmshell::NetStreamClass,SlotOffsetsAndAsserts::doNetStreamClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NetStreamAppendBytesActionClass,::avmshell::NetStreamAppendBytesActionClass,SlotOffsetsAndAsserts::doNetStreamAppendBytesActionClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NetStreamInfoClass,::avmshell::NetStreamInfoClass,SlotOffsetsAndAsserts::doNetStreamInfoClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NetStreamMulticastInfoClass,::avmshell::NetStreamMulticastInfoClass,SlotOffsetsAndAsserts::doNetStreamMulticastInfoClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NetStreamPlayOptionsClass,::avmshell::NetStreamPlayOptionsClass,SlotOffsetsAndAsserts::doNetStreamPlayOptionsClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NetStreamPlayTransitionsClass,::avmshell::NetStreamPlayTransitionsClass,SlotOffsetsAndAsserts::doNetStreamPlayTransitionsClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NetworkInfoClass,::avmshell::NetworkInfoClass,SlotOffsetsAndAsserts::doNetworkInfoClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NetworkInterfaceClass,::avmshell::NetworkInterfaceClass,SlotOffsetsAndAsserts::doNetworkInterfaceClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SecureSocketClass,::avmshell::SecureSocketClass,SlotOffsetsAndAsserts::doSecureSocketClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ServerSocketClass,::avmshell::ServerSocketClass,SlotOffsetsAndAsserts::doServerSocketClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(URLRequestDefaultsClass,::avmshell::URLRequestDefaultsClass,SlotOffsetsAndAsserts::doURLRequestDefaultsClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(PaperSizeClass,::avmshell::PaperSizeClass,SlotOffsetsAndAsserts::doPaperSizeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(PrintMethodClass,::avmshell::PrintMethodClass,SlotOffsetsAndAsserts::doPrintMethodClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(PrintUIOptionsClass,::avmshell::PrintUIOptionsClass,SlotOffsetsAndAsserts::doPrintUIOptionsClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ImageDecodingPolicyClass,::avmshell::ImageDecodingPolicyClass,SlotOffsetsAndAsserts::doImageDecodingPolicyClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(JPEGLoaderContextClass,::avmshell::JPEGLoaderContextClass,SlotOffsetsAndAsserts::doJPEGLoaderContextClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SystemUpdaterClass,::avmshell::SystemUpdaterClass,SlotOffsetsAndAsserts::doSystemUpdaterClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SystemUpdaterTypeClass,::avmshell::SystemUpdaterTypeClass,SlotOffsetsAndAsserts::doSystemUpdaterTypeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TouchscreenTypeClass,::avmshell::TouchscreenTypeClass,SlotOffsetsAndAsserts::doTouchscreenTypeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TextExtentClass,::avmshell::TextExtentClass,SlotOffsetsAndAsserts::doTextExtentClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TextInteractionModeClass,::avmshell::TextInteractionModeClass,SlotOffsetsAndAsserts::doTextInteractionModeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ContextMenuClipboardItemsClass,::avmshell::ContextMenuClipboardItemsClass,SlotOffsetsAndAsserts::doContextMenuClipboardItemsClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(KeyboardTypeClass,::avmshell::KeyboardTypeClass,SlotOffsetsAndAsserts::doKeyboardTypeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(MouseCursorClass,::avmshell::MouseCursorClass,SlotOffsetsAndAsserts::doMouseCursorClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(MouseCursorDataClass,::avmshell::MouseCursorDataClass,SlotOffsetsAndAsserts::doMouseCursorDataClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(MultitouchClass,::avmshell::MultitouchClass,SlotOffsetsAndAsserts::doMultitouchClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(MultitouchInputModeClass,::avmshell::MultitouchInputModeClass,SlotOffsetsAndAsserts::doMultitouchInputModeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(CompressionAlgorithmClass,::avmshell::CompressionAlgorithmClass,SlotOffsetsAndAsserts::doCompressionAlgorithmClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ClipboardClass,::avmshell::ClipboardClass,SlotOffsetsAndAsserts::doClipboardClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ClipboardFormatsClass,::avmshell::ClipboardFormatsClass,SlotOffsetsAndAsserts::doClipboardFormatsClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ClipboardTransferModeClass,::avmshell::ClipboardTransferModeClass,SlotOffsetsAndAsserts::doClipboardTransferModeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DockIconClass,::avmshell::DockIconClass,SlotOffsetsAndAsserts::doDockIconClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(IconClass,::avmshell::IconClass,SlotOffsetsAndAsserts::doIconClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(InteractiveIconClass,::avmshell::InteractiveIconClass,SlotOffsetsAndAsserts::doInteractiveIconClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(InvokeEventReasonClass,::avmshell::InvokeEventReasonClass,SlotOffsetsAndAsserts::doInvokeEventReasonClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NativeApplicationClass,::avmshell::NativeApplicationClass,SlotOffsetsAndAsserts::doNativeApplicationClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NativeDragActionsClass,::avmshell::NativeDragActionsClass,SlotOffsetsAndAsserts::doNativeDragActionsClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NativeDragManagerClass,::avmshell::NativeDragManagerClass,SlotOffsetsAndAsserts::doNativeDragManagerClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NativeDragOptionsClass,::avmshell::NativeDragOptionsClass,SlotOffsetsAndAsserts::doNativeDragOptionsClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NativeProcessClass,::avmshell::NativeProcessClass,SlotOffsetsAndAsserts::doNativeProcessClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NativeProcessStartupInfoClass,::avmshell::NativeProcessStartupInfoClass,SlotOffsetsAndAsserts::doNativeProcessStartupInfoClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NotificationTypeClass,::avmshell::NotificationTypeClass,SlotOffsetsAndAsserts::doNotificationTypeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SystemIdleModeClass,::avmshell::SystemIdleModeClass,SlotOffsetsAndAsserts::doSystemIdleModeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SystemTrayIconClass,::avmshell::SystemTrayIconClass,SlotOffsetsAndAsserts::doSystemTrayIconClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(UpdaterClass,::avmshell::UpdaterClass,SlotOffsetsAndAsserts::doUpdaterClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(FileClass,::avmshell::FileClass,SlotOffsetsAndAsserts::doFileClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(FileModeClass,::avmshell::FileModeClass,SlotOffsetsAndAsserts::doFileModeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(FileStreamClass,::avmshell::FileStreamClass,SlotOffsetsAndAsserts::doFileStreamClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(StorageVolumeClass,::avmshell::StorageVolumeClass,SlotOffsetsAndAsserts::doStorageVolumeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(StorageVolumeInfoClass,::avmshell::StorageVolumeInfoClass,SlotOffsetsAndAsserts::doStorageVolumeInfoClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(CollatorClass,::avmshell::CollatorClass,SlotOffsetsAndAsserts::doCollatorClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(CollatorModeClass,::avmshell::CollatorModeClass,SlotOffsetsAndAsserts::doCollatorModeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(CurrencyFormatterClass,::avmshell::CurrencyFormatterClass,SlotOffsetsAndAsserts::doCurrencyFormatterClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(CurrencyParseResultClass,::avmshell::CurrencyParseResultClass,SlotOffsetsAndAsserts::doCurrencyParseResultClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DateTimeFormatterClass,::avmshell::DateTimeFormatterClass,SlotOffsetsAndAsserts::doDateTimeFormatterClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DateTimeNameContextClass,::avmshell::DateTimeNameContextClass,SlotOffsetsAndAsserts::doDateTimeNameContextClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DateTimeNameStyleClass,::avmshell::DateTimeNameStyleClass,SlotOffsetsAndAsserts::doDateTimeNameStyleClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DateTimeStyleClass,::avmshell::DateTimeStyleClass,SlotOffsetsAndAsserts::doDateTimeStyleClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(LastOperationStatusClass,::avmshell::LastOperationStatusClass,SlotOffsetsAndAsserts::doLastOperationStatusClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(LocaleIDClass,::avmshell::LocaleIDClass,SlotOffsetsAndAsserts::doLocaleIDClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NationalDigitsTypeClass,::avmshell::NationalDigitsTypeClass,SlotOffsetsAndAsserts::doNationalDigitsTypeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NumberFormatterClass,::avmshell::NumberFormatterClass,SlotOffsetsAndAsserts::doNumberFormatterClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NumberParseResultClass,::avmshell::NumberParseResultClass,SlotOffsetsAndAsserts::doNumberParseResultClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(StringToolsClass,::avmshell::StringToolsClass,SlotOffsetsAndAsserts::doStringToolsClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(AuthenticationMethodClass,::avmshell::AuthenticationMethodClass,SlotOffsetsAndAsserts::doAuthenticationMethodClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DRMContentDataClass,::avmshell::DRMContentDataClass,SlotOffsetsAndAsserts::doDRMContentDataClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DRMManagerClass,::avmshell::DRMManagerClass,SlotOffsetsAndAsserts::doDRMManagerClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DRMPlaybackTimeWindowClass,::avmshell::DRMPlaybackTimeWindowClass,SlotOffsetsAndAsserts::doDRMPlaybackTimeWindowClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DRMVoucherClass,::avmshell::DRMVoucherClass,SlotOffsetsAndAsserts::doDRMVoucherClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(LoadVoucherSettingClass,::avmshell::LoadVoucherSettingClass,SlotOffsetsAndAsserts::doLoadVoucherSettingClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(VoucherAccessInfoClass,::avmshell::VoucherAccessInfoClass,SlotOffsetsAndAsserts::doVoucherAccessInfoClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DeleteObjectSampleClass,::avmshell::DeleteObjectSampleClass,SlotOffsetsAndAsserts::doDeleteObjectSampleClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(NewObjectSampleClass,::avmshell::NewObjectSampleClass,SlotOffsetsAndAsserts::doNewObjectSampleClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SampleClass,::avmshell::SampleClass,SlotOffsetsAndAsserts::doSampleClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(StackFrameClass,::avmshell::StackFrameClass,SlotOffsetsAndAsserts::doStackFrameClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(AccelerometerClass,::avmshell::AccelerometerClass,SlotOffsetsAndAsserts::doAccelerometerClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(GeolocationClass,::avmshell::GeolocationClass,SlotOffsetsAndAsserts::doGeolocationClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(BreakOpportunityClass,::avmshell::BreakOpportunityClass,SlotOffsetsAndAsserts::doBreakOpportunityClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(CFFHintingClass,::avmshell::CFFHintingClass,SlotOffsetsAndAsserts::doCFFHintingClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ContentElementClass,::avmshell::ContentElementClass,SlotOffsetsAndAsserts::doContentElementClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DigitCaseClass,::avmshell::DigitCaseClass,SlotOffsetsAndAsserts::doDigitCaseClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DigitWidthClass,::avmshell::DigitWidthClass,SlotOffsetsAndAsserts::doDigitWidthClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(EastAsianJustifierClass,::avmshell::EastAsianJustifierClass,SlotOffsetsAndAsserts::doEastAsianJustifierClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ElementFormatClass,::avmshell::ElementFormatClass,SlotOffsetsAndAsserts::doElementFormatClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(FontDescriptionClass,::avmshell::FontDescriptionClass,SlotOffsetsAndAsserts::doFontDescriptionClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(FontLookupClass,::avmshell::FontLookupClass,SlotOffsetsAndAsserts::doFontLookupClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(FontMetricsClass,::avmshell::FontMetricsClass,SlotOffsetsAndAsserts::doFontMetricsClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(FontPostureClass,::avmshell::FontPostureClass,SlotOffsetsAndAsserts::doFontPostureClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(FontWeightClass,::avmshell::FontWeightClass,SlotOffsetsAndAsserts::doFontWeightClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(GraphicElementClass,::avmshell::GraphicElementClass,SlotOffsetsAndAsserts::doGraphicElementClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(GroupElementClass,::avmshell::GroupElementClass,SlotOffsetsAndAsserts::doGroupElementClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(JustificationStyleClass,::avmshell::JustificationStyleClass,SlotOffsetsAndAsserts::doJustificationStyleClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(KerningClass,::avmshell::KerningClass,SlotOffsetsAndAsserts::doKerningClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(LigatureLevelClass,::avmshell::LigatureLevelClass,SlotOffsetsAndAsserts::doLigatureLevelClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(LineJustificationClass,::avmshell::LineJustificationClass,SlotOffsetsAndAsserts::doLineJustificationClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(RenderingModeClass,::avmshell::RenderingModeClass,SlotOffsetsAndAsserts::doRenderingModeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SpaceJustifierClass,::avmshell::SpaceJustifierClass,SlotOffsetsAndAsserts::doSpaceJustifierClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TabAlignmentClass,::avmshell::TabAlignmentClass,SlotOffsetsAndAsserts::doTabAlignmentClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TabStopClass,::avmshell::TabStopClass,SlotOffsetsAndAsserts::doTabStopClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TextBaselineClass,::avmshell::TextBaselineClass,SlotOffsetsAndAsserts::doTextBaselineClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TextBlockClass,::avmshell::TextBlockClass,SlotOffsetsAndAsserts::doTextBlockClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TextElementClass,::avmshell::TextElementClass,SlotOffsetsAndAsserts::doTextElementClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TextJustifierClass,::avmshell::TextJustifierClass,SlotOffsetsAndAsserts::doTextJustifierClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TextLineClass,::avmshell::TextLineClass,SlotOffsetsAndAsserts::doTextLineClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TextLineCreationResultClass,::avmshell::TextLineCreationResultClass,SlotOffsetsAndAsserts::doTextLineCreationResultClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TextLineMirrorRegionClass,::avmshell::TextLineMirrorRegionClass,SlotOffsetsAndAsserts::doTextLineMirrorRegionClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TextLineValidityClass,::avmshell::TextLineValidityClass,SlotOffsetsAndAsserts::doTextLineValidityClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TextRotationClass,::avmshell::TextRotationClass,SlotOffsetsAndAsserts::doTextRotationClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(TypographicCaseClass,::avmshell::TypographicCaseClass,SlotOffsetsAndAsserts::doTypographicCaseClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(CompositionAttributeRangeClass,::avmshell::CompositionAttributeRangeClass,SlotOffsetsAndAsserts::doCompositionAttributeRangeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(CertificateStatusClass,::avmshell::CertificateStatusClass,SlotOffsetsAndAsserts::doCertificateStatusClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ReferencesValidationSettingClass,::avmshell::ReferencesValidationSettingClass,SlotOffsetsAndAsserts::doReferencesValidationSettingClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(RevocationCheckSettingsClass,::avmshell::RevocationCheckSettingsClass,SlotOffsetsAndAsserts::doRevocationCheckSettingsClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SignatureStatusClass,::avmshell::SignatureStatusClass,SlotOffsetsAndAsserts::doSignatureStatusClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SignerTrustSettingsClass,::avmshell::SignerTrustSettingsClass,SlotOffsetsAndAsserts::doSignerTrustSettingsClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(XMLSignatureValidatorClass,::avmshell::XMLSignatureValidatorClass,SlotOffsetsAndAsserts::doXMLSignatureValidatorClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(HTMLHistoryItemClass,::avmshell::HTMLHistoryItemClass,SlotOffsetsAndAsserts::doHTMLHistoryItemClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(HTMLHostClass,::avmshell::HTMLHostClass,SlotOffsetsAndAsserts::doHTMLHostClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(HTMLLoaderClass,::avmshell::HTMLLoaderClass,SlotOffsetsAndAsserts::doHTMLLoaderClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(HTMLPDFCapabilityClass,::avmshell::HTMLPDFCapabilityClass,SlotOffsetsAndAsserts::doHTMLPDFCapabilityClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(HTMLSWFCapabilityClass,::avmshell::HTMLSWFCapabilityClass,SlotOffsetsAndAsserts::doHTMLSWFCapabilityClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(HTMLWindowCreateOptionsClass,::avmshell::HTMLWindowCreateOptionsClass,SlotOffsetsAndAsserts::doHTMLWindowCreateOptionsClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(AAAARecordClass,::avmshell::AAAARecordClass,SlotOffsetsAndAsserts::doAAAARecordClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ARecordClass,::avmshell::ARecordClass,SlotOffsetsAndAsserts::doARecordClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DNSResolverClass,::avmshell::DNSResolverClass,SlotOffsetsAndAsserts::doDNSResolverClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(MXRecordClass,::avmshell::MXRecordClass,SlotOffsetsAndAsserts::doMXRecordClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(PTRRecordClass,::avmshell::PTRRecordClass,SlotOffsetsAndAsserts::doPTRRecordClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ResourceRecordClass,::avmshell::ResourceRecordClass,SlotOffsetsAndAsserts::doResourceRecordClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SRVRecordClass,::avmshell::SRVRecordClass,SlotOffsetsAndAsserts::doSRVRecordClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(EncryptedLocalStoreClass,::avmshell::EncryptedLocalStoreClass,SlotOffsetsAndAsserts::doEncryptedLocalStoreClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SQLCollationTypeClass,::avmshell::SQLCollationTypeClass,SlotOffsetsAndAsserts::doSQLCollationTypeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SQLColumnNameStyleClass,::avmshell::SQLColumnNameStyleClass,SlotOffsetsAndAsserts::doSQLColumnNameStyleClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SQLColumnSchemaClass,::avmshell::SQLColumnSchemaClass,SlotOffsetsAndAsserts::doSQLColumnSchemaClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SQLConnectionClass,::avmshell::SQLConnectionClass,SlotOffsetsAndAsserts::doSQLConnectionClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SQLIndexSchemaClass,::avmshell::SQLIndexSchemaClass,SlotOffsetsAndAsserts::doSQLIndexSchemaClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SQLModeClass,::avmshell::SQLModeClass,SlotOffsetsAndAsserts::doSQLModeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SQLResultClass,::avmshell::SQLResultClass,SlotOffsetsAndAsserts::doSQLResultClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SQLSchemaClass,::avmshell::SQLSchemaClass,SlotOffsetsAndAsserts::doSQLSchemaClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SQLSchemaResultClass,::avmshell::SQLSchemaResultClass,SlotOffsetsAndAsserts::doSQLSchemaResultClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SQLStatementClass,::avmshell::SQLStatementClass,SlotOffsetsAndAsserts::doSQLStatementClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SQLTableSchemaClass,::avmshell::SQLTableSchemaClass,SlotOffsetsAndAsserts::doSQLTableSchemaClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SQLTransactionLockTypeClass,::avmshell::SQLTransactionLockTypeClass,SlotOffsetsAndAsserts::doSQLTransactionLockTypeClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SQLTriggerSchemaClass,::avmshell::SQLTriggerSchemaClass,SlotOffsetsAndAsserts::doSQLTriggerSchemaClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(SQLViewSchemaClass,::avmshell::SQLViewSchemaClass,SlotOffsetsAndAsserts::doSQLViewSchemaClassAsserts)

AVMTHUNK_NATIVE_CLASS_GLUE(X500DistinguishedNameClass,::avmshell::X500DistinguishedNameClass, SlotOffsetsAndAsserts::doX500DistinguishedNameClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(X509CertificateClass,::avmshell::X509CertificateClass, SlotOffsetsAndAsserts::doX509CertificateClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DRMVoucherStoreContextClass,::avmshell::DRMVoucherStoreContextClass, SlotOffsetsAndAsserts::doDRMVoucherStoreContextClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(DRMManagerSessionClass,::avmshell::DRMManagerSessionClass, SlotOffsetsAndAsserts::doDRMManagerSessionClassAsserts)
//new adds end

//new adds 11

//  BitmapEncodingColorSpace
//AVMTHUNK_NATIVE_CLASS_GLUE( BitmapEncodingColorSpaceClass, ::avmshell::BitmapEncodingColorSpaceClass, SlotOffsetsAndAsserts::doBitmapEncodingColorSpaceClassAsserts )

// Stage3D
AVMTHUNK_NATIVE_CLASS_GLUE( Stage3DClass, ::avmshell::Stage3DClass, SlotOffsetsAndAsserts::doStage3DClassAsserts )
// AVDictionaryDataEvent
AVMTHUNK_NATIVE_CLASS_GLUE( AVDictionaryDataEventClass, ::avmshell::AVDictionaryDataEventClass, SlotOffsetsAndAsserts::doAVDictionaryDataEventClassAsserts )
// DRMDeviceGroupErrorEvent
AVMTHUNK_NATIVE_CLASS_GLUE( DRMDeviceGroupErrorEventClass, ::avmshell::DRMDeviceGroupErrorEventClass, SlotOffsetsAndAsserts::doDRMDeviceGroupErrorEventClassAsserts )
// DRMDeviceGroupEvent
AVMTHUNK_NATIVE_CLASS_GLUE( DRMDeviceGroupEventClass, ::avmshell::DRMDeviceGroupEventClass, SlotOffsetsAndAsserts::doDRMDeviceGroupEventClassAsserts )
// DRMLicenseRequestEvent
AVMTHUNK_NATIVE_CLASS_GLUE( DRMLicenseRequestEventClass, ::avmshell::DRMLicenseRequestEventClass, SlotOffsetsAndAsserts::doDRMLicenseRequestEventClassAsserts )
// DRMMetadataEvent
AVMTHUNK_NATIVE_CLASS_GLUE( DRMMetadataEventClass, ::avmshell::DRMMetadataEventClass, SlotOffsetsAndAsserts::doDRMMetadataEventClassAsserts )
// DRMReturnVoucherCompleteEvent
AVMTHUNK_NATIVE_CLASS_GLUE( DRMReturnVoucherCompleteEventClass, ::avmshell::DRMReturnVoucherCompleteEventClass, SlotOffsetsAndAsserts::doDRMReturnVoucherCompleteEventClassAsserts )
// DRMReturnVoucherErrorEvent
AVMTHUNK_NATIVE_CLASS_GLUE( DRMReturnVoucherErrorEventClass, ::avmshell::DRMReturnVoucherErrorEventClass, SlotOffsetsAndAsserts::doDRMReturnVoucherErrorEventClassAsserts )
// GameInputEvent
AVMTHUNK_NATIVE_CLASS_GLUE( GameInputEventClass, ::avmshell::GameInputEventClass, SlotOffsetsAndAsserts::doGameInputEventClassAsserts )
// RemoteNotificationEvent
AVMTHUNK_NATIVE_CLASS_GLUE( RemoteNotificationEventClass, ::avmshell::RemoteNotificationEventClass, SlotOffsetsAndAsserts::doRemoteNotificationEventClassAsserts )
// ThrottleEvent
AVMTHUNK_NATIVE_CLASS_GLUE( ThrottleEventClass, ::avmshell::ThrottleEventClass, SlotOffsetsAndAsserts::doThrottleEventClassAsserts )
// AVTagData
AVMTHUNK_NATIVE_CLASS_GLUE( AVTagDataClass, ::avmshell::AVTagDataClass, SlotOffsetsAndAsserts::doAVTagDataClassAsserts )
// CameraRollBrowseOptions
AVMTHUNK_NATIVE_CLASS_GLUE( CameraRollBrowseOptionsClass, ::avmshell::CameraRollBrowseOptionsClass, SlotOffsetsAndAsserts::doCameraRollBrowseOptionsClassAsserts )
// H264VideoStreamSettings
AVMTHUNK_NATIVE_CLASS_GLUE( H264VideoStreamSettingsClass, ::avmshell::H264VideoStreamSettingsClass, SlotOffsetsAndAsserts::doH264VideoStreamSettingsClassAsserts )
// VideoStreamSettings
AVMTHUNK_NATIVE_CLASS_GLUE( VideoStreamSettingsClass, ::avmshell::VideoStreamSettingsClass, SlotOffsetsAndAsserts::doVideoStreamSettingsClassAsserts )
// DRMDeviceGroup
AVMTHUNK_NATIVE_CLASS_GLUE( DRMDeviceGroupClass, ::avmshell::DRMDeviceGroupClass, SlotOffsetsAndAsserts::doDRMDeviceGroupClassAsserts )
// MessageChannel
AVMTHUNK_NATIVE_CLASS_GLUE( MessageChannelClass, ::avmshell::MessageChannelClass, SlotOffsetsAndAsserts::doMessageChannelClassAsserts )
// Worker
AVMTHUNK_NATIVE_CLASS_GLUE( WorkerClass, ::avmshell::WorkerClass, SlotOffsetsAndAsserts::doWorkerClassAsserts )
// WorkerDomain
AVMTHUNK_NATIVE_CLASS_GLUE( WorkerDomainClass, ::avmshell::WorkerDomainClass, SlotOffsetsAndAsserts::doWorkerDomainClassAsserts )
// StageText
AVMTHUNK_NATIVE_CLASS_GLUE( StageTextClass, ::avmshell::StageTextClass, SlotOffsetsAndAsserts::doStageTextClassAsserts )
// StageTextInitOptions
AVMTHUNK_NATIVE_CLASS_GLUE( StageTextInitOptionsClass, ::avmshell::StageTextInitOptionsClass, SlotOffsetsAndAsserts::doStageTextInitOptionsClassAsserts )
// GameInput
AVMTHUNK_NATIVE_CLASS_GLUE( GameInputClass, ::avmshell::GameInputClass, SlotOffsetsAndAsserts::doGameInputClassAsserts )
// GameInputControl
AVMTHUNK_NATIVE_CLASS_GLUE( GameInputControlClass, ::avmshell::GameInputControlClass, SlotOffsetsAndAsserts::doGameInputControlClassAsserts )
// GameInputDevice
AVMTHUNK_NATIVE_CLASS_GLUE( GameInputDeviceClass, ::avmshell::GameInputDeviceClass, SlotOffsetsAndAsserts::doGameInputDeviceClassAsserts )



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//for JiuYU
AVMTHUNK_NATIVE_CLASS_GLUE(SwfEnDeUtilClass,::avmshell::SwfEnDeUtilClass, SlotOffsetsAndAsserts::doSwfEnDeUtilClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(ClassUtilClass,::avmshell::ClassUtilClass, SlotOffsetsAndAsserts::doClassUtilClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(MD5Class,::avmshell::MD5Class, SlotOffsetsAndAsserts::doMD5ClassAsserts)
//AVMTHUNK_NATIVE_CLASS_GLUE(SamePropertyObjectUtilClass,::avmshell::SamePropertyObjectUtilClass, SlotOffsetsAndAsserts::doSamePropertyObjectUtilClassAsserts)
//JSONParseError
AVMTHUNK_NATIVE_CLASS_GLUE(JSONParseErrorClass, ::avmshell::JSONParseErrorClass, SlotOffsetsAndAsserts::doJSONParseErrorClassAsserts )
//JSON
AVMTHUNK_NATIVE_CLASS_GLUE(JSONClass, ::avmshell::JSONClass, SlotOffsetsAndAsserts::doJSONClassAsserts )
//new adds 11 end
////////////////////////////////////////////////////////////////
// extend for OPT
//AVMTHUNK_NATIVE_CLASS_GLUE(InflaterClass,::avmshell::InflaterClass, SlotOffsetsAndAsserts::doInflaterClassAsserts)

AVMTHUNK_BEGIN_NATIVE_TABLES(TotalInclude)
	//Map Method Table
	AVMTHUNK_BEGIN_NATIVE_METHODS(TotalInclude)

		AVMTHUNK_NATIVE_FUNCTION(flash_net_navigateToURL,::avmshell::URLRequestClass::navigateToURL)
		AVMTHUNK_NATIVE_FUNCTION(flash_net_sendToURL,::avmshell::URLRequestClass::sendToURL)

		AVMTHUNK_NATIVE_FUNCTION(flash_net_getClassByAlias,::avmshell::ShellCore::getClassByAlias)
		AVMTHUNK_NATIVE_FUNCTION(flash_net_registerClassAlias,::avmshell::ShellCore::registerClassAlias)
		AVMTHUNK_NATIVE_FUNCTION(adobe_utils_MMExecute,::avmshell::ShellCore::MMExecute)
		AVMTHUNK_NATIVE_FUNCTION(flash_utils_clearInterval,::avmshell::ShellCore::clearInterval)
		AVMTHUNK_NATIVE_FUNCTION(flash_utils_clearTimeout,::avmshell::ShellCore::clearTimeout)
		AVMTHUNK_NATIVE_FUNCTION(flash_utils_describeTypeJSON,::avmshell::ShellCore::describeTypeJSON)
		AVMTHUNK_NATIVE_FUNCTION(flash_utils_escapeMultiByte,::avmshell::ShellCore::escapeMultiByte)
		AVMTHUNK_NATIVE_FUNCTION(flash_utils_getDefinitionByName,::avmshell::ShellCore::getDefinitionByName)
		AVMTHUNK_NATIVE_FUNCTION(flash_utils_getQualifiedClassName,::avmshell::ShellCore::getQualifiedClassName)
		AVMTHUNK_NATIVE_FUNCTION(flash_utils_getQualifiedSuperclassName,::avmshell::ShellCore::getQualifiedSuperclassName)
		AVMTHUNK_NATIVE_FUNCTION(flash_utils_getTimer,::avmshell::ShellCore::getTimer)
		AVMTHUNK_NATIVE_FUNCTION(flash_utils_nativeSetInterval,::avmshell::ShellCore::nativeSetInterval)
		AVMTHUNK_NATIVE_FUNCTION(flash_utils_nativeSetTimeout,::avmshell::ShellCore::nativeSetTimeout)
		AVMTHUNK_NATIVE_FUNCTION(flash_utils_unescapeMultiByte,::avmshell::ShellCore::unescapeMultiByte)
		AVMTHUNK_NATIVE_FUNCTION(nativetrace, ::avmshell::ShellCore::nativeTrace)
		AVMTHUNK_NATIVE_FUNCTION(flash_system_fscommand,::avmshell::ShellCore::fscommand)

		AVMTHUNK_NATIVE_FUNCTION(flash_profiler_showRedrawRegions,::avmshell::ShellCore::showRedrawRegions)
		//////////////////////////////////////////////////////////////////////////////////////////////////////
		// JavaScript Window
		//Delete JavaScript for BUGS
		/*AVMTHUNK_NATIVE_FUNCTION(window_get,::avmshell::WindowClass::AS3_window_get)

		AVMTHUNK_NATIVE_METHOD_P_VOID(Window_location_get, ::avmshell::WindowObject::AS3_location_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(Window_location_set, ::avmshell::WindowObject::AS3_location_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(Window_navigator_get, ::avmshell::WindowObject::AS3_navigator_get)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(Window_Navigator_get, ::avmshell::WindowObject::AS3_Navigator_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_VOID(Window_Window, ::avmshell::WindowObject::AS3_constructor)
		//////Navigator
		AVMTHUNK_NATIVE_METHOD_P_VOID(Navigator_appCodeName_get, ::avmshell::NavigatorObject::AS3_appCodeName_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(Navigator_appMinorVersion_get, ::avmshell::NavigatorObject::AS3_appMinorVersion_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(Navigator_appName_get, ::avmshell::NavigatorObject::AS3_appName_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(Navigator_appVersion_get, ::avmshell::NavigatorObject::AS3_appVersion_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(Navigator_browserLanguage_get, ::avmshell::NavigatorObject::AS3_browserLanguage_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(Navigator_cookieEnabled_get, ::avmshell::NavigatorObject::AS3_cookieEnabled_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(Navigator_cpuClass_get, ::avmshell::NavigatorObject::AS3_cpuClass_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(Navigator_onLine_get, ::avmshell::NavigatorObject::AS3_onLine_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(Navigator_platform_get, ::avmshell::NavigatorObject::AS3_platform_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(Navigator_systemLanguage_get, ::avmshell::NavigatorObject::AS3_systemLanguage_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(Navigator_userAgent_get, ::avmshell::NavigatorObject::AS3_userAgent_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(Navigator_userLanguage_get, ::avmshell::NavigatorObject::AS3_userLanguage_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(Navigator_javaEnabled, ::avmshell::NavigatorObject::AS3_javaEnabled)
		AVMTHUNK_NATIVE_METHOD_B_VOID(Navigator_taintEnabled, ::avmshell::NavigatorObject::AS3_taintEnabled)
		//////Location
		AVMTHUNK_NATIVE_METHOD_P_VOID(Location_hash_get, ::avmshell::LocationObject::AS3_hash_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(Location_hash_set, ::avmshell::LocationObject::AS3_hash_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(Location_host_get, ::avmshell::LocationObject::AS3_host_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(Location_host_set, ::avmshell::LocationObject::AS3_host_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(Location_hostname_get, ::avmshell::LocationObject::AS3_hostname_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(Location_hostname_set, ::avmshell::LocationObject::AS3_hostname_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(Location_href_get, ::avmshell::LocationObject::AS3_href_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(Location_href_set, ::avmshell::LocationObject::AS3_href_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(Location_pathname_get, ::avmshell::LocationObject::AS3_pathname_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(Location_pathname_set, ::avmshell::LocationObject::AS3_pathname_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(Location_port_get, ::avmshell::LocationObject::AS3_port_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(Location_port_set, ::avmshell::LocationObject::AS3_port_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(Location_protocol_get, ::avmshell::LocationObject::AS3_protocol_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(Location_protocol_set, ::avmshell::LocationObject::AS3_protocol_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(Location_search_get, ::avmshell::LocationObject::AS3_search_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(Location_search_set, ::avmshell::LocationObject::AS3_search_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(Location_assign, ::avmshell::LocationObject::AS3_assign)
		AVMTHUNK_NATIVE_METHOD_VOID_P(Location_reload, ::avmshell::LocationObject::AS3_reload)
		AVMTHUNK_NATIVE_METHOD_P_VOID(Location_replace, ::avmshell::LocationObject::AS3_replace)
		AVMTHUNK_NATIVE_METHOD_VOID_P(Location_toString, ::avmshell::LocationObject::AS3_toString)*/


		//new adds
		AVMTHUNK_NATIVE_FUNCTION(flash_media_scanHardware,::avmshell::ShellCore::scanHardware)
		AVMTHUNK_NATIVE_FUNCTION(adobe_utils_MMEndCommand,::avmshell::ShellCore::MMEndCommand)

		AVMTHUNK_NATIVE_FUNCTION(flash_sampler_stopSampling,::avmshell::ShellCore::stopSampling)
		AVMTHUNK_NATIVE_FUNCTION(flash_sampler_startSampling,::avmshell::ShellCore::startSampling)
		AVMTHUNK_NATIVE_FUNCTION(flash_sampler_setSamplerCallback,::avmshell::ShellCore::setSamplerCallback)
		AVMTHUNK_NATIVE_FUNCTION(flash_sampler_sampleInternalAllocs,::avmshell::ShellCore::sampleInternalAllocs)
		AVMTHUNK_NATIVE_FUNCTION(flash_sampler_pauseSampling,::avmshell::ShellCore::pauseSampling)
		AVMTHUNK_NATIVE_FUNCTION(flash_sampler_isGetterSetter,::avmshell::ShellCore::isGetterSetter)
		AVMTHUNK_NATIVE_FUNCTION(flash_sampler_getSize,::avmshell::ShellCore::getSize)
		AVMTHUNK_NATIVE_FUNCTION(flash_sampler_getSetterInvocationCount,::avmshell::ShellCore::getSetterInvocationCount)
		AVMTHUNK_NATIVE_FUNCTION(flash_sampler_getSavedThis,::avmshell::ShellCore::getSavedThis)
		AVMTHUNK_NATIVE_FUNCTION(flash_sampler_getSamples,::avmshell::ShellCore::getSamples)
		AVMTHUNK_NATIVE_FUNCTION(flash_sampler_getSampleCount,::avmshell::ShellCore::getSampleCount)
		AVMTHUNK_NATIVE_FUNCTION(flash_sampler_getMemberNames,::avmshell::ShellCore::getMemberNames)
		AVMTHUNK_NATIVE_FUNCTION(flash_sampler_getMasterString,::avmshell::ShellCore::getMasterString)
		AVMTHUNK_NATIVE_FUNCTION(flash_sampler_getLexicalScopes,::avmshell::ShellCore::getLexicalScopes)
		AVMTHUNK_NATIVE_FUNCTION(flash_sampler_getInvocationCount,::avmshell::ShellCore::getInvocationCount)
		AVMTHUNK_NATIVE_FUNCTION(flash_sampler_getGetterInvocationCount,::avmshell::ShellCore::getGetterInvocationCount)
		AVMTHUNK_NATIVE_FUNCTION(flash_sampler_clearSamples,::avmshell::ShellCore::clearSamples)
		//new adds end
		////////////////////////////////////////////////////////////////////////////////////////
		// Just Link
		//AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_text_TextLineMetrics_fornative,::avmshell::ShellCore::forNative)
		//Class ColorTransform
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_ColorTransform_alphaMultiplier_get, ::avmshell::ColorTransformObject::AS3_alphaMultiplier_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_ColorTransform_alphaMultiplier_set, ::avmshell::ColorTransformObject::AS3_alphaMultiplier_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_ColorTransform_alphaOffset_get, ::avmshell::ColorTransformObject::AS3_alphaOffset_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_ColorTransform_alphaOffset_set, ::avmshell::ColorTransformObject::AS3_alphaOffset_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_ColorTransform_blueMultiplier_get, ::avmshell::ColorTransformObject::AS3_blueMultiplier_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_ColorTransform_blueMultiplier_set, ::avmshell::ColorTransformObject::AS3_blueMultiplier_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_ColorTransform_blueOffset_get, ::avmshell::ColorTransformObject::AS3_blueOffset_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_ColorTransform_blueOffset_set, ::avmshell::ColorTransformObject::AS3_blueOffset_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_geom_ColorTransform_color_get, ::avmshell::ColorTransformObject::AS3_color_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_geom_ColorTransform_color_set, ::avmshell::ColorTransformObject::AS3_color_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_ColorTransform_greenMultiplier_get, ::avmshell::ColorTransformObject::AS3_greenMultiplier_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_ColorTransform_greenMultiplier_set, ::avmshell::ColorTransformObject::AS3_greenMultiplier_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_ColorTransform_greenOffset_get, ::avmshell::ColorTransformObject::AS3_greenOffset_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_ColorTransform_greenOffset_set, ::avmshell::ColorTransformObject::AS3_greenOffset_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_ColorTransform_redMultiplier_get, ::avmshell::ColorTransformObject::AS3_redMultiplier_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_ColorTransform_redMultiplier_set, ::avmshell::ColorTransformObject::AS3_redMultiplier_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_ColorTransform_redOffset_get, ::avmshell::ColorTransformObject::AS3_redOffset_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_ColorTransform_redOffset_set, ::avmshell::ColorTransformObject::AS3_redOffset_set)
		//AVMTHUNK_NATIVE_METHOD_VOID_DDDDDDDD(flash_geom_ColorTransform_ColorTransform, ::avmshell::ColorTransformObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_geom_ColorTransform_concat, ::avmshell::ColorTransformObject::AS3_concat)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_geom_ColorTransform_toString, ::avmshell::ColorTransformObject::AS3_toString)

		///////////////////////////////
		AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_external_ExternalInterface_addCallback, ::avmshell::ExternalInterfaceClass::AS3_addCallback)
		AVMTHUNK_NATIVE_METHOD_P_PP(flash_external_ExternalInterface_nativecall, ::avmshell::ExternalInterfaceClass::AS3_call)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_external_ExternalInterface_available_get, ::avmshell::ExternalInterfaceClass::AS3_available_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_external_ExternalInterface_available_set, ::avmshell::ExternalInterfaceClass::AS3_available_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_external_ExternalInterface_objectID_get, ::avmshell::ExternalInterfaceClass::AS3_objectID_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_external_ExternalInterface_objectID_set, ::avmshell::ExternalInterfaceClass::AS3_objectID_set)

		//new adds
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_external_ExternalInterface_marshallExceptions_get, ::avmshell::ExternalInterfaceClass::AS3_marshallExceptions_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_external_ExternalInterface_marshallExceptions_set, ::avmshell::ExternalInterfaceClass::AS3_marshallExceptions_set)
		//new adds end

		//Class Point
		AVMTHUNK_NATIVE_METHOD_D_PP(flash_geom_Point_distance, ::avmshell::PointObject::AS3_distance)
		//AVMTHUNK_NATIVE_METHOD_P_PPD(flash_geom_Point_interpolate, ::avmshell::PointObject::AS3_interpolate)
		AVMTHUNK_NATIVE_METHOD_P_DD(flash_geom_Point_polar, ::avmshell::PointClass::AS3_polar)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_geom_Point_length_get, ::avmshell::PointObject::AS3_length_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_geom_Point_x_get, ::avmshell::PointObject::AS3_x_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_geom_Point_x_set, ::avmshell::PointObject::AS3_x_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_geom_Point_y_get, ::avmshell::PointObject::AS3_y_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_geom_Point_y_set, ::avmshell::PointObject::AS3_y_set)
		//AVMTHUNK_NATIVE_METHOD_VOID_DD(flash_geom_Point_Point, ::avmshell::PointObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_P_P(flash_geom_Point_add, ::avmshell::PointObject::AS3_add)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_geom_Point_clone, ::avmshell::PointObject::AS3_clone)
		//AVMTHUNK_NATIVE_METHOD_B_P(flash_geom_Point_equals, ::avmshell::PointObject::AS3_equals)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_geom_Point_normalize, ::avmshell::PointObject::AS3_normalize)
		//AVMTHUNK_NATIVE_METHOD_VOID_DD(flash_geom_Point_offset, ::avmshell::PointObject::AS3_offset)
		//AVMTHUNK_NATIVE_METHOD_P_P(flash_geom_Point_subtract, ::avmshell::PointObject::AS3_subtract)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_geom_Point_toString, ::avmshell::PointObject::AS3_toString)

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_geom_Point_copyFrom, ::avmshell::PointObject::AS3_copyFrom)
		AVMTHUNK_NATIVE_METHOD_VOID_DD(flash_geom_Point_setTo, ::avmshell::PointObject::AS3_setTo)
		//new adds 11 end

		//Class Rectangle
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_bottom_get, ::avmshell::RectangleObject::AS3_bottom_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_bottom_set, ::avmshell::RectangleObject::AS3_bottom_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_bottomRight_get, ::avmshell::RectangleObject::AS3_bottomRight_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_bottomRight_set, ::avmshell::RectangleObject::AS3_bottomRight_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_height_get, ::avmshell::RectangleObject::AS3_height_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_height_set, ::avmshell::RectangleObject::AS3_height_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_left_get, ::avmshell::RectangleObject::AS3_left_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_left_set, ::avmshell::RectangleObject::AS3_left_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_right_get, ::avmshell::RectangleObject::AS3_right_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_right_set, ::avmshell::RectangleObject::AS3_right_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_size_get, ::avmshell::RectangleObject::AS3_size_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_size_set, ::avmshell::RectangleObject::AS3_size_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_top_get, ::avmshell::RectangleObject::AS3_top_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_top_set, ::avmshell::RectangleObject::AS3_top_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_topLeft_get, ::avmshell::RectangleObject::AS3_topLeft_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_topLeft_set, ::avmshell::RectangleObject::AS3_topLeft_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_width_get, ::avmshell::RectangleObject::AS3_width_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_width_set, ::avmshell::RectangleObject::AS3_width_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_x_get, ::avmshell::RectangleObject::AS3_x_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_x_set, ::avmshell::RectangleObject::AS3_x_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_y_get, ::avmshell::RectangleObject::AS3_y_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_y_set, ::avmshell::RectangleObject::AS3_y_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_Rectangle, ::avmshell::RectangleObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_geom_Rectangle_clone, ::avmshell::RectangleObject::AS3_clone)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_contains, ::avmshell::RectangleObject::AS3_contains)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_containsPoint, ::avmshell::RectangleObject::AS3_containsPoint)
		AVMTHUNK_NATIVE_METHOD_B_P(flash_geom_Rectangle_containsRect, ::avmshell::RectangleObject::AS3_containsRect)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_equals, ::avmshell::RectangleObject::AS3_equals)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_inflate, ::avmshell::RectangleObject::AS3_inflate)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_inflatePoint, ::avmshell::RectangleObject::AS3_inflatePoint)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_geom_Rectangle_intersection, ::avmshell::RectangleObject::AS3_intersection)
		AVMTHUNK_NATIVE_METHOD_B_P(flash_geom_Rectangle_intersects, ::avmshell::RectangleObject::AS3_intersects)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_isEmpty, ::avmshell::RectangleObject::AS3_isEmpty)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_offset, ::avmshell::RectangleObject::AS3_offset)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_offsetPoint, ::avmshell::RectangleObject::AS3_offsetPoint)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Rectangle_setEmpty, ::avmshell::RectangleObject::AS3_setEmpty)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_geom_Rectangle_toString, ::avmshell::RectangleObject::AS3_toString)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_geom_Rectangle_union, ::avmshell::RectangleObject::AS3_union)

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_VOID_DDDD(flash_geom_Rectangle_setTo, ::avmshell::RectangleObject::AS3_setTo)
		//new adds 11 end
		//Class Matrix
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_geom_Matrix_a_get, ::avmshell::MatrixObject::AS3_a_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_geom_Matrix_a_set, ::avmshell::MatrixObject::AS3_a_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_geom_Matrix_b_get, ::avmshell::MatrixObject::AS3_b_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_geom_Matrix_b_set, ::avmshell::MatrixObject::AS3_b_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_geom_Matrix_c_get, ::avmshell::MatrixObject::AS3_c_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_geom_Matrix_c_set, ::avmshell::MatrixObject::AS3_c_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_geom_Matrix_d_get, ::avmshell::MatrixObject::AS3_d_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_geom_Matrix_d_set, ::avmshell::MatrixObject::AS3_d_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_geom_Matrix_tx_get, ::avmshell::MatrixObject::AS3_tx_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_geom_Matrix_tx_set, ::avmshell::MatrixObject::AS3_tx_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_geom_Matrix_ty_get, ::avmshell::MatrixObject::AS3_ty_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_geom_Matrix_ty_set, ::avmshell::MatrixObject::AS3_ty_set)
		//AVMTHUNK_NATIVE_METHOD_VOID_DDDDDD(flash_geom_Matrix_Matrix, ::avmshell::MatrixObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_geom_Matrix_clone, ::avmshell::MatrixObject::AS3_clone)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(flash_geom_Matrix_concat, ::avmshell::MatrixObject::AS3_concat)
		//AVMTHUNK_NATIVE_METHOD_VOID_DDDDD(flash_geom_Matrix_createBox, ::avmshell::MatrixObject::AS3_createBox)
		//AVMTHUNK_NATIVE_METHOD_VOID_DDDDD(flash_geom_Matrix_createGradientBox, ::avmshell::MatrixObject::AS3_createGradientBox)
		//AVMTHUNK_NATIVE_METHOD_P_P(flash_geom_Matrix_deltaTransformPoint, ::avmshell::MatrixObject::AS3_deltaTransformPoint)
		//AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_geom_Matrix_identity, ::avmshell::MatrixObject::AS3_identity)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_geom_Matrix_invert, ::avmshell::MatrixObject::AS3_invert)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_geom_Matrix_rotate, ::avmshell::MatrixObject::AS3_rotate)
		//AVMTHUNK_NATIVE_METHOD_VOID_DD(flash_geom_Matrix_scale, ::avmshell::MatrixObject::AS3_scale)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_geom_Matrix_toString, ::avmshell::MatrixObject::AS3_toString)
		//AVMTHUNK_NATIVE_METHOD_P_P(flash_geom_Matrix_transformPoint, ::avmshell::MatrixObject::AS3_transformPoint)
		//AVMTHUNK_NATIVE_METHOD_VOID_DD(flash_geom_Matrix_translate, ::avmshell::MatrixObject::AS3_translate)

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_VOID_UP(flash_geom_Matrix_copyColumnFrom, ::avmshell::MatrixObject::AS3_copyColumnFrom)
		AVMTHUNK_NATIVE_METHOD_VOID_UP(flash_geom_Matrix_copyColumnTo, ::avmshell::MatrixObject::AS3_copyColumnTo)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_geom_Matrix_copyFrom, ::avmshell::MatrixObject::AS3_copyFrom)
		AVMTHUNK_NATIVE_METHOD_VOID_UP(flash_geom_Matrix_copyRowFrom, ::avmshell::MatrixObject::AS3_copyRowFrom)
		AVMTHUNK_NATIVE_METHOD_VOID_UP(flash_geom_Matrix_copyRowTo, ::avmshell::MatrixObject::AS3_copyRowTo)
		AVMTHUNK_NATIVE_METHOD_VOID_DDDDDD(flash_geom_Matrix_setTo, ::avmshell::MatrixObject::AS3_setTo)
		//new adds 11 end


		//Class Event
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_Event_bubbles_get, ::avmshell::EventObject::AS3_bubbles_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_Event_cancelable_get, ::avmshell::EventObject::AS3_cancelable_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_Event_currentTarget_get, ::avmshell::EventObject::AS3_currentTarget_get)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_events_Event_eventPhase_get, ::avmshell::EventObject::AS3_eventPhase_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_Event_target_get, ::avmshell::EventObject::AS3_target_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_Event_type_get, ::avmshell::EventObject::AS3_type_get)
		AVMTHUNK_NATIVE_METHOD_VOID_SBB(flash_events_Event_Event, ::avmshell::EventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_Event_clone, ::avmshell::EventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_SA(flash_events_Event_nformatToString, ::avmshell::EventObject::AS3_formatToString)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_Event_isDefaultPrevented, ::avmshell::EventObject::AS3_isDefaultPrevented)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_Event_preventDefault, ::avmshell::EventObject::AS3_preventDefault)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_events_Event_stopImmediatePropagation, ::avmshell::EventObject::AS3_stopImmediatePropagation)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_events_Event_stopPropagation, ::avmshell::EventObject::AS3_stopPropagation)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_Event_toString, ::avmshell::EventObject::AS3_toString)

		//Class BitmapData
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_display_BitmapData_height_get, ::avmshell::BitmapDataObject::AS3_height_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_BitmapData_rect_get, ::avmshell::BitmapDataObject::AS3_rect_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_BitmapData_transparent_get, ::avmshell::BitmapDataObject::AS3_transparent_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_display_BitmapData_width_get, ::avmshell::BitmapDataObject::AS3_width_get)
		AVMTHUNK_NATIVE_METHOD_VOID_IIBU(flash_display_BitmapData_BitmapData, ::avmshell::BitmapDataObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_PPPP(flash_display_BitmapData_applyFilter, ::avmshell::BitmapDataObject::AS3_applyFilter)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_BitmapData_clone, ::avmshell::BitmapDataObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_display_BitmapData_colorTransform, ::avmshell::BitmapDataObject::AS3_colorTransform)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_display_BitmapData_compare, ::avmshell::BitmapDataObject::AS3_compare)
		AVMTHUNK_NATIVE_METHOD_VOID_PPPPP(flash_display_BitmapData_copyChannel, ::avmshell::BitmapDataObject::AS3_copyChannel)
		AVMTHUNK_NATIVE_METHOD_VOID_PPPPPB(flash_display_BitmapData_copyPixels, ::avmshell::BitmapDataObject::AS3_copyPixels)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_BitmapData_dispose, ::avmshell::BitmapDataObject::AS3_dispose)
		AVMTHUNK_NATIVE_METHOD_VOID_PPPSPB(flash_display_BitmapData_draw, ::avmshell::BitmapDataObject::AS3_draw)
		AVMTHUNK_NATIVE_METHOD_VOID_PI(flash_display_BitmapData_fillRect, ::avmshell::BitmapDataObject::AS3_fillRect)
		AVMTHUNK_NATIVE_METHOD_VOID_III(flash_display_BitmapData_floodFill, ::avmshell::BitmapDataObject::AS3_floodFill)
		AVMTHUNK_NATIVE_METHOD_P_PP(flash_display_BitmapData_generateFilterRect, ::avmshell::BitmapDataObject::AS3_generateFilterRect)
		AVMTHUNK_NATIVE_METHOD_P_UUB(flash_display_BitmapData_getColorBoundsRect, ::avmshell::BitmapDataObject::AS3_getColorBoundsRect)
		AVMTHUNK_NATIVE_METHOD_I_II(flash_display_BitmapData_getPixel, ::avmshell::BitmapDataObject::AS3_getPixel)
		AVMTHUNK_NATIVE_METHOD_I_II(flash_display_BitmapData_getPixel32, ::avmshell::BitmapDataObject::AS3_getPixel32)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_display_BitmapData_getPixels, ::avmshell::BitmapDataObject::AS3_getPixels)
		AVMTHUNK_NATIVE_METHOD_P_PPPPP(flash_display_BitmapData_hitTest, ::avmshell::BitmapDataObject::AS3_hitTest)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_BitmapData_lock, ::avmshell::BitmapDataObject::AS3_lock)
		AVMTHUNK_NATIVE_METHOD_VOID_PPPPPPP(flash_display_BitmapData_merge, ::avmshell::BitmapDataObject::AS3_merge)
		AVMTHUNK_NATIVE_METHOD_VOID_PPPPB(flash_display_BitmapData_noise, ::avmshell::BitmapDataObject::AS3_noise)
		AVMTHUNK_NATIVE_METHOD_VOID_PPPPPPP(flash_display_BitmapData_paletteMap, ::avmshell::BitmapDataObject::AS3_paletteMap)
		AVMTHUNK_NATIVE_METHOD_VOID_DDUIBBUBP(flash_display_BitmapData_perlinNoise, ::avmshell::BitmapDataObject::AS3_perlinNoise)
		AVMTHUNK_NATIVE_METHOD_I_PPPPPP(flash_display_BitmapData_pixelDissolve, ::avmshell::BitmapDataObject::AS3_pixelDissolve)
		AVMTHUNK_NATIVE_METHOD_VOID_II(flash_display_BitmapData_scroll, ::avmshell::BitmapDataObject::AS3_scroll)
		AVMTHUNK_NATIVE_METHOD_VOID_III(flash_display_BitmapData_setPixel, ::avmshell::BitmapDataObject::AS3_setPixel)
		AVMTHUNK_NATIVE_METHOD_VOID_III(flash_display_BitmapData_setPixel32, ::avmshell::BitmapDataObject::AS3_setPixel32)
		AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_display_BitmapData_setPixels, ::avmshell::BitmapDataObject::AS3_setPixels)
		AVMTHUNK_NATIVE_METHOD_U_PPPPPPPB(flash_display_BitmapData_threshold, ::avmshell::BitmapDataObject::AS3_threshold)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_BitmapData_unlock, ::avmshell::BitmapDataObject::AS3_unlock)
		//BitmapData new adds 11
		AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_display_BitmapData_copyPixelsToByteArray, ::avmshell::BitmapDataObject::AS3_copyPixelsToByteArray)
		AVMTHUNK_NATIVE_METHOD_VOID_PPPSPBS(flash_display_BitmapData_drawWithQuality, ::avmshell::BitmapDataObject::AS3_drawWithQuality)
		AVMTHUNK_NATIVE_METHOD_P_PPP(flash_display_BitmapData_encode, ::avmshell::BitmapDataObject::AS3_encode)
		//BitmapData new adds 11 end

		////////////////////////////////////////////////////////////////////////////////
		// Specical API BXDevice
		//Class BitmapData
		//AVMTHUNK_NATIVE_METHOD_B_VOID(BWLoader_BXDeviceBitmapData_isMobile, ::avmshell::BXDeviceBitmapDataClass::AS3_isMobile)

		//AVMTHUNK_NATIVE_METHOD_P_IIII(BWLoader_BXDeviceBitmapData_GetDeviceBitmap, ::avmshell::BXDeviceBitmapDataClass::AS3_GetDeviceBitmap)
		//AVMTHUNK_NATIVE_METHOD_P_P(BWLoader_BXDeviceBitmapData_GetDeviceBitmapObj, ::avmshell::BXDeviceBitmapDataClass::AS3_GetDeviceBitmapObj)

		//AVMTHUNK_NATIVE_METHOD_P_P(BWLoader_BXDeviceBitmapData_getVector, ::avmshell::BXDeviceBitmapDataObject::AS3_getVector)
		//AVMTHUNK_NATIVE_METHOD_P_P(BWLoader_BXDeviceBitmapData_histogram, ::avmshell::BXDeviceBitmapDataObject::AS3_histogram)
		//AVMTHUNK_NATIVE_METHOD_VOID_PP(BWLoader_BXDeviceBitmapData_setVector, ::avmshell::BXDeviceBitmapDataObject::AS3_setVector)		

		/*AVMTHUNK_NATIVE_METHOD_I_VOID(BWLoader_BXDeviceBitmapData_height_get, ::avmshell::BXDeviceBitmapDataObject::AS3_height_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(BWLoader_BXDeviceBitmapData_rect_get, ::avmshell::BXDeviceBitmapDataObject::AS3_rect_get)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(BWLoader_BXDeviceBitmapData_transparent_get, ::avmshell::BXDeviceBitmapDataObject::AS3_transparent_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(BWLoader_BXDeviceBitmapData_width_get, ::avmshell::BXDeviceBitmapDataObject::AS3_width_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_IIBU(BWLoader_BXDeviceBitmapData_BXDeviceBitmapData, ::avmshell::BXDeviceBitmapDataObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_PPPP(BWLoader_BXDeviceBitmapData_applyFilter, ::avmshell::BXDeviceBitmapDataObject::AS3_applyFilter)
		AVMTHUNK_NATIVE_METHOD_P_VOID(BWLoader_BXDeviceBitmapData_clone, ::avmshell::BXDeviceBitmapDataObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_VOID_PP(BWLoader_BXDeviceBitmapData_colorTransform, ::avmshell::BXDeviceBitmapDataObject::AS3_colorTransform)
		AVMTHUNK_NATIVE_METHOD_P_P(BWLoader_BXDeviceBitmapData_compare, ::avmshell::BXDeviceBitmapDataObject::AS3_compare)
		AVMTHUNK_NATIVE_METHOD_VOID_PPPPP(BWLoader_BXDeviceBitmapData_copyChannel, ::avmshell::BXDeviceBitmapDataObject::AS3_copyChannel)
		AVMTHUNK_NATIVE_METHOD_VOID_PPPPPB(BWLoader_BXDeviceBitmapData_copyPixels, ::avmshell::BXDeviceBitmapDataObject::AS3_copyPixels)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(BWLoader_BXDeviceBitmapData_dispose, ::avmshell::BXDeviceBitmapDataObject::AS3_dispose)
		AVMTHUNK_NATIVE_METHOD_VOID_PPPPPB(BWLoader_BXDeviceBitmapData_draw, ::avmshell::BXDeviceBitmapDataObject::AS3_draw)
		AVMTHUNK_NATIVE_METHOD_VOID_PI(BWLoader_BXDeviceBitmapData_fillRect, ::avmshell::BXDeviceBitmapDataObject::AS3_fillRect)
		AVMTHUNK_NATIVE_METHOD_VOID_III(BWLoader_BXDeviceBitmapData_floodFill, ::avmshell::BXDeviceBitmapDataObject::AS3_floodFill)
		AVMTHUNK_NATIVE_METHOD_P_PP(BWLoader_BXDeviceBitmapData_generateFilterRect, ::avmshell::BXDeviceBitmapDataObject::AS3_generateFilterRect)
		AVMTHUNK_NATIVE_METHOD_P_UUB(BWLoader_BXDeviceBitmapData_getColorBoundsRect, ::avmshell::BXDeviceBitmapDataObject::AS3_getColorBoundsRect)
		AVMTHUNK_NATIVE_METHOD_I_II(BWLoader_BXDeviceBitmapData_getPixel, ::avmshell::BXDeviceBitmapDataObject::AS3_getPixel)
		AVMTHUNK_NATIVE_METHOD_I_II(BWLoader_BXDeviceBitmapData_getPixel32, ::avmshell::BXDeviceBitmapDataObject::AS3_getPixel32)
		AVMTHUNK_NATIVE_METHOD_P_P(BWLoader_BXDeviceBitmapData_getPixels, ::avmshell::BXDeviceBitmapDataObject::AS3_getPixels)
		AVMTHUNK_NATIVE_METHOD_P_PPPPP(BWLoader_BXDeviceBitmapData_hitTest, ::avmshell::BXDeviceBitmapDataObject::AS3_hitTest)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(BWLoader_BXDeviceBitmapData_lock, ::avmshell::BXDeviceBitmapDataObject::AS3_lock)
		AVMTHUNK_NATIVE_METHOD_VOID_PPPPPPP(BWLoader_BXDeviceBitmapData_merge, ::avmshell::BXDeviceBitmapDataObject::AS3_merge)
		AVMTHUNK_NATIVE_METHOD_VOID_PPPPB(BWLoader_BXDeviceBitmapData_noise, ::avmshell::BXDeviceBitmapDataObject::AS3_noise)
		AVMTHUNK_NATIVE_METHOD_VOID_PPPPPPP(BWLoader_BXDeviceBitmapData_paletteMap, ::avmshell::BXDeviceBitmapDataObject::AS3_paletteMap)
		AVMTHUNK_NATIVE_METHOD_VOID_DDUIBBUBP(BWLoader_BXDeviceBitmapData_perlinNoise, ::avmshell::BXDeviceBitmapDataObject::AS3_perlinNoise)
		AVMTHUNK_NATIVE_METHOD_I_PPPPPP(BWLoader_BXDeviceBitmapData_pixelDissolve, ::avmshell::BXDeviceBitmapDataObject::AS3_pixelDissolve)
		AVMTHUNK_NATIVE_METHOD_VOID_II(BWLoader_BXDeviceBitmapData_scroll, ::avmshell::BXDeviceBitmapDataObject::AS3_scroll)
		AVMTHUNK_NATIVE_METHOD_VOID_III(BWLoader_BXDeviceBitmapData_setPixel, ::avmshell::BXDeviceBitmapDataObject::AS3_setPixel)
		AVMTHUNK_NATIVE_METHOD_VOID_III(BWLoader_BXDeviceBitmapData_setPixel32, ::avmshell::BXDeviceBitmapDataObject::AS3_setPixel32)
		AVMTHUNK_NATIVE_METHOD_VOID_PP(BWLoader_BXDeviceBitmapData_setPixels, ::avmshell::BXDeviceBitmapDataObject::AS3_setPixels)
		AVMTHUNK_NATIVE_METHOD_U_PPPPPPPB(BWLoader_BXDeviceBitmapData_threshold, ::avmshell::BXDeviceBitmapDataObject::AS3_threshold)
		AVMTHUNK_NATIVE_METHOD_VOID_P(BWLoader_BXDeviceBitmapData_unlock, ::avmshell::BXDeviceBitmapDataObject::AS3_unlock)*/
		//BXFile
		AVMTHUNK_NATIVE_METHOD_B_P(BWLoader_BXFile_deleteFile, ::avmshell::BXFileClass::AS3_deleteFile)
		AVMTHUNK_NATIVE_METHOD_B_PP(BWLoader_BXFile_copyFile, ::avmshell::BXFileClass::AS3_copyFile)
		AVMTHUNK_NATIVE_METHOD_B_PI(BWLoader_BXFile_exec, ::avmshell::BXFileClass::AS3_exec)
		AVMTHUNK_NATIVE_METHOD_B_PPP(BWLoader_BXFile_createShortcutIcon, ::avmshell::BXFileClass::AS3_createShortcutIcon)
		AVMTHUNK_NATIVE_METHOD_B_VOID(BWLoader_BXFile_reload, ::avmshell::BXFileClass::AS3_reload)
		AVMTHUNK_NATIVE_METHOD_B_P(BWLoader_BXFile_isExist, ::avmshell::BXFileClass::AS3_isExist)
		//bool AS3_copyFile(Stringp src,Stringp dst);
		//bool AS3_exec(Stringp name,int type);
		//bool AS3_createShortcutIcon(Stringp file,Stringp image,Stringp name);
		//bool AS3_reload();
		//bool AS3_isExist(Stringp file); 	

		AVMTHUNK_NATIVE_METHOD_B_PI(BWLoader_BXFile_open, ::avmshell::BXFileObject::AS3_open)
		AVMTHUNK_NATIVE_METHOD_B_VOID(BWLoader_BXFile_close, ::avmshell::BXFileObject::AS3_close)
		AVMTHUNK_NATIVE_METHOD_I_VOID(BWLoader_BXFile_getLength, ::avmshell::BXFileObject::AS3_getLength)
		AVMTHUNK_NATIVE_METHOD_B_II(BWLoader_BXFile_seek, ::avmshell::BXFileObject::AS3_seek)
		AVMTHUNK_NATIVE_METHOD_I_PII(BWLoader_BXFile_write, ::avmshell::BXFileObject::AS3_write)
		AVMTHUNK_NATIVE_METHOD_I_PII(BWLoader_BXFile_read, ::avmshell::BXFileObject::AS3_read)
		//bool AS3_open(Stringp file,int mode);
		//bool AS3_close();
		//int  AS3_getLength();
		//int  AS3_seek(int pos,int type);
		//int  AS3_write(ByteArrayObject*data,int pos,int len);
		//int  AS3_read(ByteArrayObject*data,int pos,int len);

		//BXBGLayer
		//AVMTHUNK_NATIVE_METHOD_VOID_D(BWLoader_BXBGLayer_x_set, ::avmshell::BXBGLayerObject::AS3_x_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(BWLoader_BXBGLayer_x_get, ::avmshell::BXBGLayerObject::AS3_x_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(BWLoader_BXBGLayer_y_set, ::avmshell::BXBGLayerObject::AS3_y_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(BWLoader_BXBGLayer_y_get, ::avmshell::BXBGLayerObject::AS3_y_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(BWLoader_BXBGLayer_scrollMode_set, ::avmshell::BXBGLayerObject::AS3_scrollMode_set)
		//AVMTHUNK_NATIVE_METHOD_VOID_VOID(BWLoader_BXBGLayer_create, ::avmshell::BXBGLayerObject::AS3_create)
		//AVMTHUNK_NATIVE_METHOD_VOID_VOID(BWLoad/er_BXBGLayer_release, ::avmshell::BXBGLayerObject::AS3_release)
		//AVMTHUNK_NATIVE_METHOD_VOID_VOID(BWLoader_BXBGLayer_showBG, ::avmshell::BXBGLayerObject::AS3_showBG)
		//AVMTHUNK_NATIVE_METHOD_VOID_VOID(BWLoader_BXBGLayer_hideBG, ::avmshell::BXBGLayerObject::AS3_hideBG)
		//AVMTHUNK_NATIVE_METHOD_VOID_VOID(BWLoader_BXBGLayer_BXBGLayer, ::avmshell::BXBGLayerObject::AS3_constructor)
		//BXWaveStream
		AVMTHUNK_NATIVE_METHOD_VOID_P(BWLoader_BXWaveStream_getDCTData, ::avmshell::BXWaveStreamObject::AS3_getDCTData)
		AVMTHUNK_NATIVE_METHOD_P_VOID(BWLoader_BXWaveStream_getMicrophone, ::avmshell::BXWaveStreamObject::AS3_getMicrophone)
		AVMTHUNK_NATIVE_METHOD_VOID_P(BWLoader_BXWaveStream_BXWaveStream, ::avmshell::BXWaveStreamObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_B_VOID(BWLoader_BXWaveStream_start, ::avmshell::BXWaveStreamObject::AS3_start)
		AVMTHUNK_NATIVE_METHOD_B_VOID(BWLoader_BXWaveStream_stop, ::avmshell::BXWaveStreamObject::AS3_stop)

		//BXWaveEvent		
		AVMTHUNK_NATIVE_METHOD_P_VOID(BWLoader_BXWaveEvent_getData, ::avmshell::BXWaveEventObject::AS3_getData)
		AVMTHUNK_NATIVE_METHOD_I_VOID(BWLoader_BXWaveEvent_getChannels, ::avmshell::BXWaveEventObject::AS3_getChannels)
		//BXAcc
		AVMTHUNK_NATIVE_METHOD_B_VOID(BWLoader_BXAcc_init, ::avmshell::BXAccClass::AS3_init)
		AVMTHUNK_NATIVE_METHOD_D_VOID(BWLoader_BXAcc_accX_get, ::avmshell::BXAccClass::AS3_getX)
		AVMTHUNK_NATIVE_METHOD_D_VOID(BWLoader_BXAcc_accY_get, ::avmshell::BXAccClass::AS3_getY)
		AVMTHUNK_NATIVE_METHOD_D_VOID(BWLoader_BXAcc_accZ_get, ::avmshell::BXAccClass::AS3_getZ)
		AVMTHUNK_NATIVE_METHOD_P_VOID(BWLoader_BXAcc_aObject_get, ::avmshell::BXAccClass::AS3_aObject_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(BWLoader_BXAcc_gObject_get, ::avmshell::BXAccClass::AS3_gObject_get)
		//BwExternAPI
		AVMTHUNK_NATIVE_METHOD_P_VOID( BWLoader_BwExternAPI_GetBwExternAPIObj, ::avmshell::BwExternAPIClass::AS3_GetBwExternAPI )
		AVMTHUNK_NATIVE_METHOD_S_VOID( BWLoader_BwExternAPI_getDeviceType, ::avmshell::BwExternAPIObject::AS3_getDeviceType )
		AVMTHUNK_NATIVE_METHOD_I_VOID( BWLoader_BwExternAPI_getHPixel, ::avmshell::BwExternAPIObject::AS3_getHPixel )
		AVMTHUNK_NATIVE_METHOD_I_VOID( BWLoader_BwExternAPI_getVPixel, ::avmshell::BwExternAPIObject::AS3_getVPixel )
		AVMTHUNK_NATIVE_METHOD_I_VOID( BWLoader_BwExternAPI_getDPI, ::avmshell::BwExternAPIObject::AS3_getDPI )
		AVMTHUNK_NATIVE_METHOD_I_ISS( BWLoader_BwExternAPI_SDKRegister, ::avmshell::BwExternAPIObject::AS3_SDKRegister )
		AVMTHUNK_NATIVE_METHOD_I_ISS( BWLoader_BwExternAPI_SDKLogin, ::avmshell::BwExternAPIObject::AS3_SDKLogin )
		AVMTHUNK_NATIVE_METHOD_I_IS( BWLoader_BwExternAPI_SDKLogout, ::avmshell::BwExternAPIObject::AS3_SDKLogout )
		AVMTHUNK_NATIVE_METHOD_I_ISSI( BWLoader_BwExternAPI_SDKPayment, ::avmshell::BwExternAPIObject::AS3_SDKPayment )
		AVMTHUNK_NATIVE_METHOD_I_SP( BWLoader_BwExternAPI_SaveDisk, ::avmshell::BwExternAPIObject::AS3_SaveDisk )
		AVMTHUNK_NATIVE_METHOD_P_S( BWLoader_BwExternAPI_LoadDisk, ::avmshell::BwExternAPIObject::AS3_LoadDisk )
		AVMTHUNK_NATIVE_METHOD_I_IS( BWLoader_BwExternAPI_Launch, ::avmshell::BwExternAPIObject::AS3_Launch )
		AVMTHUNK_NATIVE_METHOD_I_I( BWLoader_BwExternAPI_ShowToolbar, ::avmshell::BwExternAPIObject::AS3_ShowToolbar )
		AVMTHUNK_NATIVE_METHOD_VOID_VOID( BWLoader_BwExternAPI_CloseSwf,::avmshell::BwExternAPIObject::AS3_CloseSwf )
		// WeiXinShareSession
		AVMTHUNK_NATIVE_METHOD_P_VOID( BWLoader_WeiXinShareSession_GetWeiXinShareSessionObj, ::avmshell::WeiXinShareSessionClass::AS3_GetWeiXinShareSession )
		AVMTHUNK_NATIVE_METHOD_B_VOID(BWLoader_WeiXinShareSession_isWeiXinIstalled, ::avmshell::WeiXinShareSessionObject::AS3_isWeiXinIstalled )
		AVMTHUNK_NATIVE_METHOD_I_IS( BWLoader_WeiXinShareSession_sendText, ::avmshell::WeiXinShareSessionObject::AS3_sendText )
 		 AVMTHUNK_NATIVE_METHOD_I_IP( BWLoader_WeiXinShareSession_sendPhoto, ::avmshell::WeiXinShareSessionObject::AS3_sendPhoto )
 		AVMTHUNK_NATIVE_METHOD_I_ISSPS( BWLoader_WeiXinShareSession_sendLink, ::avmshell::WeiXinShareSessionObject::AS3_sendLink )
 		 AVMTHUNK_NATIVE_METHOD_I_ISSPSS( BWLoader_WeiXinShareSession_sendMusic, ::avmshell::WeiXinShareSessionObject::AS3_sendMusic )
		 AVMTHUNK_NATIVE_METHOD_I_ISSPS( BWLoader_WeiXinShareSession_sendVedio, ::avmshell::WeiXinShareSessionObject::AS3_sendVedio )
 		 AVMTHUNK_NATIVE_METHOD_I_ISSPSSP( BWLoader_WeiXinShareSession_sendAppMessage, ::avmshell::WeiXinShareSessionObject::AS3_sendAppMessage )
		 AVMTHUNK_NATIVE_METHOD_I_IPP( BWLoader_WeiXinShareSession_sendNotGifContent, ::avmshell::WeiXinShareSessionObject::AS3_sendNotGifContent )
		 AVMTHUNK_NATIVE_METHOD_I_IPP( BWLoader_WeiXinShareSession_sendGifContent, ::avmshell::WeiXinShareSessionObject::AS3_sendGifContent )
		 AVMTHUNK_NATIVE_METHOD_I_ISSPPS( BWLoader_WeiXinShareSession_sendFileContent, ::avmshell::WeiXinShareSessionObject::AS3_sendFileContent )

		 // DuoMengSDKInterface
		AVMTHUNK_NATIVE_METHOD_P_VOID( BWLoader_DuoMengSDKInterface_GetDuoMengSDKInterfaceObj, ::avmshell::DuoMengSDKInterfaceClass::AS3_GetDuoMengSDKInterface )
		AVMTHUNK_NATIVE_METHOD_I_VOID(BWLoader_DuoMengSDKInterface_presentOfferWall, ::avmshell::DuoMengSDKInterfaceObject::AS3_presentOfferWall )


		 AVMTHUNK_NATIVE_METHOD_VOID_S( BWLoader_BwPayAPI_payAlipay,::avmshell::BwPayAPIObject::AS3_payAlipay )

		//new adds
		AVMTHUNK_NATIVE_METHOD_P_P(flash_display_BitmapData_getVector, ::avmshell::BitmapDataObject::AS3_getVector)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_display_BitmapData_histogram, ::avmshell::BitmapDataObject::AS3_histogram)
		AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_display_BitmapData_setVector, ::avmshell::BitmapDataObject::AS3_setVector)
		//new adds end

		//Class ApplicationDomain
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_ApplicationDomain_currentDomain_get, ::avmshell::ApplicationDomainClass::AS3_currentDomain_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_ApplicationDomain_parentDomain_get, ::avmshell::ApplicationDomainObject::AS3_parentDomain_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_system_ApplicationDomain_ApplicationDomain, ::avmshell::ApplicationDomainObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_system_ApplicationDomain_getDefinition, ::avmshell::ApplicationDomainObject::AS3_getDefinition)
		AVMTHUNK_NATIVE_METHOD_B_P(flash_system_ApplicationDomain_hasDefinition, ::avmshell::ApplicationDomainObject::AS3_hasDefinition)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_system_ApplicationDomain_MIN_DOMAIN_MEMORY_LENGTH_get, ::avmshell::ApplicationDomainClass::AS3_MIN_DOMAIN_MEMORY_LENGTH_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_ApplicationDomain_domainMemory_get, ::avmshell::ApplicationDomainObject::AS3_domainMemory_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_system_ApplicationDomain_domainMemory_set, ::avmshell::ApplicationDomainObject::AS3_domainMemory_set)

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_system_ApplicationDomain_getQualifiedDefinitionNames, ::avmshell::ApplicationDomainObject::AS3_getQualifiedDefinitionNames)
		//new adds 11 end

		//Class SecurityDomain
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_SecurityDomain_currentDomain_get, ::avmshell::SecurityDomainClass::AS3_currentDomain_get)

		//Class ByteArray
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_utils_ByteArray_clear, ::avmshell::ByteArrayObject::AS3_clear)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_utils_ByteArray_defaultObjectEncoding_get, ::avmshell::ByteArrayClass::AS3_defaultObjectEncoding_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_utils_ByteArray_defaultObjectEncoding_set, ::avmshell::ByteArrayClass::AS3_defaultObjectEncoding_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_utils_ByteArray_bytesAvailable_get, ::avmshell::ByteArrayObject::AS3_bytesAvailable_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_utils_ByteArray_endian_get, ::avmshell::ByteArrayObject::AS3_endian_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_utils_ByteArray_endian_set, ::avmshell::ByteArrayObject::AS3_endian_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_utils_ByteArray_length_get, ::avmshell::ByteArrayObject::AS3_length_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_utils_ByteArray_length_set, ::avmshell::ByteArrayObject::AS3_length_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_utils_ByteArray_objectEncoding_get, ::avmshell::ByteArrayObject::AS3_objectEncoding_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_utils_ByteArray_objectEncoding_set, ::avmshell::ByteArrayObject::AS3_objectEncoding_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_utils_ByteArray_position_get, ::avmshell::ByteArrayObject::AS3_position_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_utils_ByteArray_position_set, ::avmshell::ByteArrayObject::AS3_position_set)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_utils_ByteArray_ByteArray, ::avmshell::ByteArrayObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_utils_ByteArray_compress, ::avmshell::ByteArrayObject::AS3_compress)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_utils_ByteArray_readBoolean, ::avmshell::ByteArrayObject::AS3_readBoolean)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_utils_ByteArray_readByte, ::avmshell::ByteArrayObject::AS3_readByte)
		AVMTHUNK_NATIVE_METHOD_VOID_PUU(flash_utils_ByteArray_readBytes, ::avmshell::ByteArrayObject::AS3_readBytes)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_utils_ByteArray_readDouble, ::avmshell::ByteArrayObject::AS3_readDouble)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_utils_ByteArray_readFloat, ::avmshell::ByteArrayObject::AS3_readFloat)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_utils_ByteArray_readInt, ::avmshell::ByteArrayObject::AS3_readInt)
		AVMTHUNK_NATIVE_METHOD_P_US(flash_utils_ByteArray_readMultiByte, ::avmshell::ByteArrayObject::AS3_readMultiByte)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_utils_ByteArray_readObject, ::avmshell::ByteArrayObject::AS3_readObject)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_utils_ByteArray_readShort, ::avmshell::ByteArrayObject::AS3_readShort)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_utils_ByteArray_readUnsignedByte, ::avmshell::ByteArrayObject::AS3_readUnsignedByte)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_utils_ByteArray_readUnsignedInt, ::avmshell::ByteArrayObject::AS3_readUnsignedInt)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_utils_ByteArray_readUnsignedShort, ::avmshell::ByteArrayObject::AS3_readUnsignedShort)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_utils_ByteArray_readUTF, ::avmshell::ByteArrayObject::AS3_readUTF)
		AVMTHUNK_NATIVE_METHOD_P_U(flash_utils_ByteArray_readUTFBytes, ::avmshell::ByteArrayObject::AS3_readUTFBytes)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_utils_ByteArray_toString, ::avmshell::ByteArrayObject::AS3_toString)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_utils_ByteArray_uncompress, ::avmshell::ByteArrayObject::AS3_uncompress)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_utils_ByteArray_writeBoolean, ::avmshell::ByteArrayObject::AS3_writeBoolean)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_utils_ByteArray_writeByte, ::avmshell::ByteArrayObject::AS3_writeByte)
		AVMTHUNK_NATIVE_METHOD_VOID_PUU(flash_utils_ByteArray_writeBytes, ::avmshell::ByteArrayObject::AS3_writeBytes)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_utils_ByteArray_writeDouble, ::avmshell::ByteArrayObject::AS3_writeDouble)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_utils_ByteArray_writeFloat, ::avmshell::ByteArrayObject::AS3_writeFloat)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_utils_ByteArray_writeInt, ::avmshell::ByteArrayObject::AS3_writeInt)
		AVMTHUNK_NATIVE_METHOD_VOID_SS(flash_utils_ByteArray_writeMultiByte, ::avmshell::ByteArrayObject::AS3_writeMultiByte)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_utils_ByteArray_writeObject, ::avmshell::ByteArrayObject::AS3_writeObject)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_utils_ByteArray_writeShort, ::avmshell::ByteArrayObject::AS3_writeShort)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_utils_ByteArray_writeUnsignedInt, ::avmshell::ByteArrayObject::AS3_writeUnsignedInt)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_utils_ByteArray_writeUTF, ::avmshell::ByteArrayObject::AS3_writeUTF)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_utils_ByteArray_writeUTFBytes, ::avmshell::ByteArrayObject::AS3_writeUTFBytes)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_utils_ByteArray_inflate, ::avmshell::ByteArrayObject::AS3_inflate)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_utils_ByteArray_deflate, ::avmshell::ByteArrayObject::AS3_deflate)

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_utils_ByteArray_shareable_get, ::avmshell::ByteArrayObject::AS3_shareable_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_utils_ByteArray_shareable_set, ::avmshell::ByteArrayObject::AS3_shareable_set)
		AVMTHUNK_NATIVE_METHOD_I_III(flash_utils_ByteArray_atomicCompareAndSwapIntAt, ::avmshell::ByteArrayObject::AS3_atomicCompareAndSwapIntAt)
		AVMTHUNK_NATIVE_METHOD_I_II(flash_utils_ByteArray_atomicCompareAndSwapLength, ::avmshell::ByteArrayObject::AS3_atomicCompareAndSwapLength)
		AVMTHUNK_NATIVE_METHOD_P_S(flash_utils_ByteArray_toJSON, ::avmshell::ByteArrayObject::AS3_toJSON)
		//new adds 11 end

		//Class ContextMenuBuiltInItems
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_ui_ContextMenuBuiltInItems_forwardAndBack_get, ::avmshell::ContextMenuBuiltInItemsObject::AS3_forwardAndBack_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_ui_ContextMenuBuiltInItems_forwardAndBack_set, ::avmshell::ContextMenuBuiltInItemsObject::AS3_forwardAndBack_set)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_ui_ContextMenuBuiltInItems_loop_get, ::avmshell::ContextMenuBuiltInItemsObject::AS3_loop_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_ui_ContextMenuBuiltInItems_loop_set, ::avmshell::ContextMenuBuiltInItemsObject::AS3_loop_set)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_ui_ContextMenuBuiltInItems_play_get, ::avmshell::ContextMenuBuiltInItemsObject::AS3_play_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_ui_ContextMenuBuiltInItems_play_set, ::avmshell::ContextMenuBuiltInItemsObject::AS3_play_set)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_ui_ContextMenuBuiltInItems_print_get, ::avmshell::ContextMenuBuiltInItemsObject::AS3_print_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_ui_ContextMenuBuiltInItems_print_set, ::avmshell::ContextMenuBuiltInItemsObject::AS3_print_set)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_ui_ContextMenuBuiltInItems_quality_get, ::avmshell::ContextMenuBuiltInItemsObject::AS3_quality_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_ui_ContextMenuBuiltInItems_quality_set, ::avmshell::ContextMenuBuiltInItemsObject::AS3_quality_set)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_ui_ContextMenuBuiltInItems_rewind_get, ::avmshell::ContextMenuBuiltInItemsObject::AS3_rewind_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_ui_ContextMenuBuiltInItems_rewind_set, ::avmshell::ContextMenuBuiltInItemsObject::AS3_rewind_set)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_ui_ContextMenuBuiltInItems_save_get, ::avmshell::ContextMenuBuiltInItemsObject::AS3_save_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_ui_ContextMenuBuiltInItems_save_set, ::avmshell::ContextMenuBuiltInItemsObject::AS3_save_set)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_ui_ContextMenuBuiltInItems_zoom_get, ::avmshell::ContextMenuBuiltInItemsObject::AS3_zoom_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_ui_ContextMenuBuiltInItems_zoom_set, ::avmshell::ContextMenuBuiltInItemsObject::AS3_zoom_set)
		//AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_ui_ContextMenuBuiltInItems_ContextMenuBuiltInItems, ::avmshell::ContextMenuBuiltInItemsObject::AS3_constructor)

		//Class AccessibilityProperties
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_accessibility_AccessibilityProperties_description_get, ::avmshell::AccessibilityPropertiesObject::AS3_description_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_accessibility_AccessibilityProperties_description_set, ::avmshell::AccessibilityPropertiesObject::AS3_description_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_accessibility_AccessibilityProperties_forceSimple_get, ::avmshell::AccessibilityPropertiesObject::AS3_forceSimple_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_accessibility_AccessibilityProperties_forceSimple_set, ::avmshell::AccessibilityPropertiesObject::AS3_forceSimple_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_accessibility_AccessibilityProperties_name_get, ::avmshell::AccessibilityPropertiesObject::AS3_name_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_accessibility_AccessibilityProperties_name_set, ::avmshell::AccessibilityPropertiesObject::AS3_name_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_accessibility_AccessibilityProperties_noAutoLabeling_get, ::avmshell::AccessibilityPropertiesObject::AS3_noAutoLabeling_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_accessibility_AccessibilityProperties_noAutoLabeling_set, ::avmshell::AccessibilityPropertiesObject::AS3_noAutoLabeling_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_accessibility_AccessibilityProperties_shortcut_get, ::avmshell::AccessibilityPropertiesObject::AS3_shortcut_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_accessibility_AccessibilityProperties_shortcut_set, ::avmshell::AccessibilityPropertiesObject::AS3_shortcut_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_accessibility_AccessibilityProperties_silent_get, ::avmshell::AccessibilityPropertiesObject::AS3_silent_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_accessibility_AccessibilityProperties_silent_set, ::avmshell::AccessibilityPropertiesObject::AS3_silent_set)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_accessibility_AccessibilityProperties_AccessibilityProperties, ::avmshell::AccessibilityPropertiesObject::AS3_constructor)

		//Class colorTransform
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_geom_Transform_colorTransform_get, ::avmshell::TransformObject::AS3_colorTransform_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_geom_Transform_colorTransform_set, ::avmshell::TransformObject::AS3_colorTransform_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_geom_Transform_concatenatedColorTransform_get, ::avmshell::TransformObject::AS3_concatenatedColorTransform_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_geom_Transform_concatenatedMatrix_get, ::avmshell::TransformObject::AS3_concatenatedMatrix_get)

		//new adds
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_geom_Transform_matrix3D_get, ::avmshell::TransformObject::AS3_matrix3D_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_geom_Transform_matrix3D_set, ::avmshell::TransformObject::AS3_matrix3D_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_geom_Transform_perspectiveProjection_get, ::avmshell::TransformObject::AS3_perspectiveProjection_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_geom_Transform_perspectiveProjection_set, ::avmshell::TransformObject::AS3_perspectiveProjection_set)

		AVMTHUNK_NATIVE_METHOD_P_P(flash_geom_Transform_getRelativeMatrix3D, ::avmshell::TransformObject::AS3_getRelativeMatrix3D)
		//new adds end

		//Class Matrix
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_geom_Transform_matrix_get, ::avmshell::TransformObject::AS3_matrix_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_geom_Transform_matrix_set, ::avmshell::TransformObject::AS3_matrix_set)

		//Class pixelBounds
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_geom_Transform_pixelBounds_get, ::avmshell::TransformObject::AS3_pixelBounds_get)

		//Class EventDispatcher
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_EventDispatcher_EventDispatcher, ::avmshell::EventDispatcherObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_SPBIB(flash_events_EventDispatcher_addEventListener, ::avmshell::EventDispatcherObject::AS3_addEventListener)
		AVMTHUNK_NATIVE_METHOD_BOOL_P(flash_events_EventDispatcher_dispatchEvent, ::avmshell::EventDispatcherObject::AS3_dispatchEvent)
		AVMTHUNK_NATIVE_METHOD_BOOL_P(flash_events_EventDispatcher_hasEventListener, ::avmshell::EventDispatcherObject::AS3_hasEventListener)
		AVMTHUNK_NATIVE_METHOD_VOID_PPB(flash_events_EventDispatcher_removeEventListener, ::avmshell::EventDispatcherObject::AS3_removeEventListener)
		AVMTHUNK_NATIVE_METHOD_BOOL_P(flash_events_EventDispatcher_willTrigger, ::avmshell::EventDispatcherObject::AS3_willTrigger)

		//Class URLRequest
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_URLRequest_digest_get, ::avmshell::URLRequestObject::AS3_digest_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_URLRequest_digest_set, ::avmshell::URLRequestObject::AS3_digest_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_URLRequest_contentType_get, ::avmshell::URLRequestObject::AS3_contentType_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_URLRequest_contentType_set, ::avmshell::URLRequestObject::AS3_contentType_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_URLRequest_data_get, ::avmshell::URLRequestObject::AS3_data_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_URLRequest_data_set, ::avmshell::URLRequestObject::AS3_data_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_URLRequest_method_get, ::avmshell::URLRequestObject::AS3_method_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_URLRequest_method_set, ::avmshell::URLRequestObject::AS3_method_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_URLRequest_requestHeaders_get, ::avmshell::URLRequestObject::AS3_requestHeaders_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_URLRequest_requestHeaders_set, ::avmshell::URLRequestObject::AS3_requestHeaders_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_URLRequest_url_get, ::avmshell::URLRequestObject::AS3_url_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_URLRequest_url_set, ::avmshell::URLRequestObject::AS3_url_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_URLRequest_URLRequest, ::avmshell::URLRequestObject::AS3_constructor)

		//new adds
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_URLRequest_authenticate_get, ::avmshell::URLRequestObject::AS3_authenticate_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_URLRequest_authenticate_set, ::avmshell::URLRequestObject::AS3_authenticate_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_URLRequest_cacheResponse_get, ::avmshell::URLRequestObject::AS3_cacheResponse_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_URLRequest_cacheResponse_set, ::avmshell::URLRequestObject::AS3_cacheResponse_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_URLRequest_digest_get, ::avmshell::URLRequestObject::AS3_digest_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_URLRequest_digest_set, ::avmshell::URLRequestObject::AS3_digest_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_URLRequest_followRedirects_get, ::avmshell::URLRequestObject::AS3_followRedirects_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_URLRequest_followRedirects_set, ::avmshell::URLRequestObject::AS3_followRedirects_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_URLRequest_idleTimeout_get, ::avmshell::URLRequestObject::AS3_idleTimeout_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_net_URLRequest_idleTimeout_set, ::avmshell::URLRequestObject::AS3_idleTimeout_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_URLRequest_manageCookies_get, ::avmshell::URLRequestObject::AS3_manageCookies_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_URLRequest_manageCookies_set, ::avmshell::URLRequestObject::AS3_manageCookies_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_URLRequest_useCache_get, ::avmshell::URLRequestObject::AS3_useCache_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_URLRequest_useCache_set, ::avmshell::URLRequestObject::AS3_useCache_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_URLRequest_userAgent_get, ::avmshell::URLRequestObject::AS3_userAgent_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_URLRequest_userAgent_set, ::avmshell::URLRequestObject::AS3_userAgent_set)
		//new adds end

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_VOID_PBPS(flash_net_URLRequest_useRedirectedURL, ::avmshell::URLRequestObject::AS3_useRedirectedURL)
		//new adds 11 end

		//Class SoundTransform
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_media_SoundTransform_leftToLeft_get, ::avmshell::SoundTransformObject::AS3_leftToLeft_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_media_SoundTransform_leftToLeft_set, ::avmshell::SoundTransformObject::AS3_leftToLeft_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_media_SoundTransform_leftToRight_get, ::avmshell::SoundTransformObject::AS3_leftToRight_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_media_SoundTransform_leftToRight_set, ::avmshell::SoundTransformObject::AS3_leftToRight_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_media_SoundTransform_pan_get, ::avmshell::SoundTransformObject::AS3_pan_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_media_SoundTransform_pan_set, ::avmshell::SoundTransformObject::AS3_pan_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_media_SoundTransform_rightToLeft_get, ::avmshell::SoundTransformObject::AS3_rightToLeft_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_media_SoundTransform_rightToLeft_set, ::avmshell::SoundTransformObject::AS3_rightToLeft_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_media_SoundTransform_rightToRight_get, ::avmshell::SoundTransformObject::AS3_rightToRight_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_media_SoundTransform_rightToRight_set, ::avmshell::SoundTransformObject::AS3_rightToRight_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_media_SoundTransform_volume_get, ::avmshell::SoundTransformObject::AS3_volume_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_media_SoundTransform_volume_set, ::avmshell::SoundTransformObject::AS3_volume_set)
		AVMTHUNK_NATIVE_METHOD_VOID_DD(flash_media_SoundTransform_SoundTransform, ::avmshell::SoundTransformObject::AS3_constructor)

		//Class Responder
		AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_net_Responder_Responder, ::avmshell::ResponderObject::AS3_constructor)

		//Class ID3Info
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_ID3Info_album_get, ::avmshell::ID3InfoObject::AS3_album_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(flash_media_ID3Info_album_set, ::avmshell::ID3InfoObject::AS3_album_set)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_ID3Info_artist_get, ::avmshell::ID3InfoObject::AS3_artist_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(flash_media_ID3Info_artist_set, ::avmshell::ID3InfoObject::AS3_artist_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_media_ID3Info_comment_get, ::avmshell::ID3InfoObject::AS3_comment_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_media_ID3Info_comment_set, ::avmshell::ID3InfoObject::AS3_comment_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_media_ID3Info_genre_get, ::avmshell::ID3InfoObject::AS3_genre_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_media_ID3Info_genre_set, ::avmshell::ID3InfoObject::AS3_genre_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_media_ID3Info_songName_get, ::avmshell::ID3InfoObject::AS3_songName_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_media_ID3Info_songName_set, ::avmshell::ID3InfoObject::AS3_songName_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_media_ID3Info_track_get, ::avmshell::ID3InfoObject::AS3_track_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_media_ID3Info_track_set, ::avmshell::ID3InfoObject::AS3_track_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_media_ID3Info_year_get, ::avmshell::ID3InfoObject::AS3_year_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_media_ID3Info_year_set, ::avmshell::ID3InfoObject::AS3_year_set)

		//Class SoundLoaderContext
		//AVMTHUNK_NATIVE_METHOD_EX(flash_media_SoundLoaderContext_bufferTime_get, ::avmshell::SoundLoaderContextObject::AS3_bufferTime_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_media_SoundLoaderContext_bufferTime_set, ::avmshell::SoundLoaderContextObject::AS3_bufferTime_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_media_SoundLoaderContext_checkPolicyFile_get, ::avmshell::SoundLoaderContextObject::AS3_checkPolicyFile_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_media_SoundLoaderContext_checkPolicyFile_set, ::avmshell::SoundLoaderContextObject::AS3_checkPolicyFile_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_media_SoundLoaderContext_SoundLoaderContext, ::avmshell::SoundLoaderContextObject::AS3_constructor)

		//Class TextFormat
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_align_get, ::avmshell::TextFormatObject::AS3_align_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_align_set, ::avmshell::TextFormatObject::AS3_align_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_blockIndent_get, ::avmshell::TextFormatObject::AS3_blockIndent_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_blockIndent_set, ::avmshell::TextFormatObject::AS3_blockIndent_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_bold_get, ::avmshell::TextFormatObject::AS3_bold_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_bold_set, ::avmshell::TextFormatObject::AS3_bold_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_bullet_get, ::avmshell::TextFormatObject::AS3_bullet_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_bullet_set, ::avmshell::TextFormatObject::AS3_bullet_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_color_get, ::avmshell::TextFormatObject::AS3_color_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_color_set, ::avmshell::TextFormatObject::AS3_color_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_font_get, ::avmshell::TextFormatObject::AS3_font_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_font_set, ::avmshell::TextFormatObject::AS3_font_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_indent_get, ::avmshell::TextFormatObject::AS3_indent_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_indent_set, ::avmshell::TextFormatObject::AS3_indent_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_italic_get, ::avmshell::TextFormatObject::AS3_italic_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_italic_set, ::avmshell::TextFormatObject::AS3_italic_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_kerning_get, ::avmshell::TextFormatObject::AS3_kerning_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_kerning_set, ::avmshell::TextFormatObject::AS3_kerning_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_leading_get, ::avmshell::TextFormatObject::AS3_leading_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_leading_set, ::avmshell::TextFormatObject::AS3_leading_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_leftMargin_get, ::avmshell::TextFormatObject::AS3_leftMargin_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_leftMargin_set, ::avmshell::TextFormatObject::AS3_leftMargin_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_letterSpacing_get, ::avmshell::TextFormatObject::AS3_letterSpacing_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_letterSpacing_set, ::avmshell::TextFormatObject::AS3_letterSpacing_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_rightMargin_get, ::avmshell::TextFormatObject::AS3_rightMargin_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_rightMargin_set, ::avmshell::TextFormatObject::AS3_rightMargin_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_size_get, ::avmshell::TextFormatObject::AS3_size_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_size_set, ::avmshell::TextFormatObject::AS3_size_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_tabStops_get, ::avmshell::TextFormatObject::AS3_tabStops_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_tabStops_set, ::avmshell::TextFormatObject::AS3_tabStops_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_target_get, ::avmshell::TextFormatObject::AS3_target_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_target_set, ::avmshell::TextFormatObject::AS3_target_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_underline_get, ::avmshell::TextFormatObject::AS3_underline_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_TextFormat_underline_set, ::avmshell::TextFormatObject::AS3_underline_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_TextFormat_url_get, ::avmshell::TextFormatObject::AS3_url_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_TextFormat_url_set, ::avmshell::TextFormatObject::AS3_url_set)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_TextFormat_TextFormat, ::avmshell::TextFormatObject::AS3_constructor)

		//Class LoaderContext
		//AVMTHUNK_NATIVE_METHOD_EX(flash_system_LoaderContext_applicationDomain_get, ::avmshell::LoaderContextObject::AS3_applicationDomain_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_system_LoaderContext_applicationDomain_set, ::avmshell::LoaderContextObject::AS3_applicationDomain_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_system_LoaderContext_checkPolicyFile_get, ::avmshell::LoaderContextObject::AS3_checkPolicyFile_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_system_LoaderContext_checkPolicyFile_set, ::avmshell::LoaderContextObject::AS3_checkPolicyFile_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_system_LoaderContext_securityDomain_get, ::avmshell::LoaderContextObject::AS3_securityDomain_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_system_LoaderContext_securityDomain_set, ::avmshell::LoaderContextObject::AS3_securityDomain_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_system_LoaderContext_LoaderContext, ::avmshell::LoaderContextObject::AS3_constructor)

		//new adds
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_LoaderContext_allowCodeImport_get, ::avmshell::LoaderContextObject::AS3_allowCodeImport_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_system_LoaderContext_allowCodeImport_set, ::avmshell::LoaderContextObject::AS3_allowCodeImport_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_LoaderContext_allowLoadBytesCodeExecution_get, ::avmshell::LoaderContextObject::AS3_allowLoadBytesCodeExecution_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_system_LoaderContext_allowLoadBytesCodeExecution_set, ::avmshell::LoaderContextObject::AS3_allowLoadBytesCodeExecution_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_LoaderContext_imageDecodingPolicy_get, ::avmshell::LoaderContextObject::AS3_imageDecodingPolicy_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_system_LoaderContext_imageDecodingPolicy_set, ::avmshell::LoaderContextObject::AS3_imageDecodingPolicy_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_LoaderContext_parameters_get, ::avmshell::LoaderContextObject::AS3_parameters_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_system_LoaderContext_parameters_set, ::avmshell::LoaderContextObject::AS3_parameters_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_LoaderContext_requestedContentParent_get, ::avmshell::LoaderContextObject::AS3_requestedContentParent_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_system_LoaderContext_requestedContentParent_set, ::avmshell::LoaderContextObject::AS3_requestedContentParent_set)
		//new adds end

		//Class BitmapFilter
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_filters_BitmapFilter_clone, ::avmshell::BitmapFilterObject::AS3_clone)

		//Class TextSnapshot
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_text_TextSnapshot_charCount_get, ::avmshell::TextSnapshotObject::AS3_charCount_get)
		AVMTHUNK_NATIVE_METHOD_I_ISB(flash_text_TextSnapshot_findText, ::avmshell::TextSnapshotObject::AS3_findText)
		AVMTHUNK_NATIVE_METHOD_B_II(flash_text_TextSnapshot_getSelected, ::avmshell::TextSnapshotObject::AS3_getSelected)
		AVMTHUNK_NATIVE_METHOD_P_B(flash_text_TextSnapshot_getSelectedText, ::avmshell::TextSnapshotObject::AS3_getSelectedText)
		AVMTHUNK_NATIVE_METHOD_P_IIB(flash_text_TextSnapshot_getText, ::avmshell::TextSnapshotObject::AS3_getText)
		AVMTHUNK_NATIVE_METHOD_P_II(flash_text_TextSnapshot_getTextRunInfo, ::avmshell::TextSnapshotObject::AS3_getTextRunInfo)
		AVMTHUNK_NATIVE_METHOD_D_DDD(flash_text_TextSnapshot_hitTestTextNearPos, ::avmshell::TextSnapshotObject::AS3_hitTestTextNearPos)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_text_TextSnapshot_setSelectColor, ::avmshell::TextSnapshotObject::AS3_setSelectColor)
		AVMTHUNK_NATIVE_METHOD_VOID_IIB(flash_text_TextSnapshot_setSelected, ::avmshell::TextSnapshotObject::AS3_setSelected)

		//Class Graphics
		AVMTHUNK_NATIVE_METHOD_VOID_PPBB_GRAPHICS(flash_display_Graphics_beginBitmapFill, ::avmshell::GraphicsObject::AS3_beginBitmapFill)
		AVMTHUNK_NATIVE_METHOD_VOID_UD(flash_display_Graphics_beginFill, ::avmshell::GraphicsObject::AS3_beginFill)
		AVMTHUNK_NATIVE_METHOD_VOID_PPPPPPPD(flash_display_Graphics_beginGradientFill, ::avmshell::GraphicsObject::AS3_beginGradientFill)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_Graphics_clear, ::avmshell::GraphicsObject::AS3_clear)
		AVMTHUNK_NATIVE_METHOD_VOID_DDDD(flash_display_Graphics_curveTo, ::avmshell::GraphicsObject::AS3_curveTo)
		AVMTHUNK_NATIVE_METHOD_VOID_DDD(flash_display_Graphics_drawCircle, ::avmshell::GraphicsObject::AS3_drawCircle)
		AVMTHUNK_NATIVE_METHOD_VOID_DDDD(flash_display_Graphics_drawEllipse, ::avmshell::GraphicsObject::AS3_drawEllipse)
		AVMTHUNK_NATIVE_METHOD_VOID_DDDD(flash_display_Graphics_drawRect, ::avmshell::GraphicsObject::AS3_drawRect)
		AVMTHUNK_NATIVE_METHOD_VOID_DDDDDD(flash_display_Graphics_drawRoundRect, ::avmshell::GraphicsObject::AS3_drawRoundRect)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_Graphics_endFill, ::avmshell::GraphicsObject::AS3_endFill)
		AVMTHUNK_NATIVE_METHOD_VOID_PPPPPPPD(flash_display_Graphics_lineGradientStyle, ::avmshell::GraphicsObject::AS3_lineGradientStyle)

		AVMTHUNK_NATIVE_METHOD_VOID_DUDBPPPD(flash_display_Graphics_lineStyle, ::avmshell::GraphicsObject::AS3_lineStyle)
		AVMTHUNK_NATIVE_METHOD_VOID_DD(flash_display_Graphics_lineTo, ::avmshell::GraphicsObject::AS3_lineTo)
		AVMTHUNK_NATIVE_METHOD_VOID_DD(flash_display_Graphics_moveTo, ::avmshell::GraphicsObject::AS3_moveTo)

		//new adds
		AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_display_Graphics_beginShaderFill, ::avmshell::GraphicsObject::AS3_beginShaderFill)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_Graphics_copyFrom, ::avmshell::GraphicsObject::AS3_copyFrom)
//		AVMTHUNK_NATIVE_METHOD_EX(flash_display_Graphics_drawGraphicsData, ::avmshell::GraphicsObject::AS3_drawGraphicsData)
		AVMTHUNK_NATIVE_METHOD_VOID_PPS_GRAPHICS(flash_display_Graphics_drawPath, ::avmshell::GraphicsObject::AS3_drawPath)
		AVMTHUNK_NATIVE_METHOD_VOID_PPPS_GRAPHICS(flash_display_Graphics_drawTriangles, ::avmshell::GraphicsObject::AS3_drawTriangles)
		AVMTHUNK_NATIVE_METHOD_VOID_PPBB_GRAPHICS(flash_display_Graphics_lineBitmapStyle, ::avmshell::GraphicsObject::AS3_lineBitmapStyle)
		AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_display_Graphics_lineShaderStyle, ::avmshell::GraphicsObject::AS3_lineShaderStyle)
		//new adds end

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_VOID_DDDDDD(flash_display_Graphics_cubicCurveTo, ::avmshell::GraphicsObject::AS3_cubicCurveTo)
		AVMTHUNK_NATIVE_METHOD_P_B(flash_display_Graphics_readGraphicsData, ::avmshell::GraphicsObject::AS3_readGraphicsData)
		//new adds 11 end

		//Class Scene
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Scene_labels_get, ::avmshell::SceneObject::AS3_labels_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Scene_name_get, ::avmshell::SceneObject::AS3_name_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_display_Scene_numFrames_get, ::avmshell::SceneObject::AS3_numFrames_get)

		//Class PrintJobOptions
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_printing_PrintJobOptions_printAsBitmap_get, ::avmshell::PrintJobOptionsObject::AS3_printAsBitmap_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_printing_PrintJobOptions_printAsBitmap_set, ::avmshell::PrintJobOptionsObject::AS3_printAsBitmap_set)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_printing_PrintJobOptions_PrintJobOptions, ::avmshell::PrintJobOptionsObject::AS3_constructor)

		//new adds
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_printing_PrintJobOptions_pixelsPerInch_get, ::avmshell::PrintJobOptionsObject::AS3_pixelsPerInch_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_printing_PrintJobOptions_pixelsPerInch_set, ::avmshell::PrintJobOptionsObject::AS3_pixelsPerInch_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_printing_PrintJobOptions_printMethod_get, ::avmshell::PrintJobOptionsObject::AS3_printMethod_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_printing_PrintJobOptions_printMethod_set, ::avmshell::PrintJobOptionsObject::AS3_printMethod_set)
		//new adds end

		//Class Accessibility
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_accessibility_Accessibility_active_get, ::avmshell::AccessibilityClass::AS3_active_get)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_accessibility_Accessibility_updateProperties, ::avmshell::AccessibilityClass::AS3_updateProperties)
		AVMTHUNK_NATIVE_METHOD_VOID_PUUB(flash_accessibility_Accessibility_sendEvent, ::avmshell::AccessibilityClass::AS3_sendEvent)

		//Class arguments
		//AVMTHUNK_NATIVE_METHOD_EX(arguments_callee_get, ::avmshell::argumentsObject::AS3_callee_get)
		//AVMTHUNK_NATIVE_METHOD_EX(arguments_callee_set, ::avmshell::argumentsObject::AS3_callee_set)
		//AVMTHUNK_NATIVE_METHOD_EX(arguments_length_get, ::avmshell::argumentsObject::AS3_length_get)
		//AVMTHUNK_NATIVE_METHOD_EX(arguments_length_set, ::avmshell::argumentsObject::AS3_length_set)

		//Class Capabilities
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_Capabilities_avHardwareDisable_get, ::avmshell::CapabilitiesClass::AS3_avHardwareDisable_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_Capabilities_hasAccessibility_get, ::avmshell::CapabilitiesClass::AS3_hasAccessibility_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_Capabilities_hasAudio_get, ::avmshell::CapabilitiesClass::AS3_hasAudio_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_Capabilities_hasAudioEncoder_get, ::avmshell::CapabilitiesClass::AS3_hasAudioEncoder_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_Capabilities_hasEmbeddedVideo_get, ::avmshell::CapabilitiesClass::AS3_hasEmbeddedVideo_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_Capabilities_hasIME_get, ::avmshell::CapabilitiesClass::AS3_hasIME_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_Capabilities_hasMP3_get, ::avmshell::CapabilitiesClass::AS3_hasMP3_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_Capabilities_hasPrinting_get, ::avmshell::CapabilitiesClass::AS3_hasPrinting_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_Capabilities_hasScreenBroadcast_get, ::avmshell::CapabilitiesClass::AS3_hasScreenBroadcast_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_Capabilities_hasScreenPlayback_get, ::avmshell::CapabilitiesClass::AS3_hasScreenPlayback_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_Capabilities_hasStreamingAudio_get, ::avmshell::CapabilitiesClass::AS3_hasStreamingAudio_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_Capabilities_hasStreamingVideo_get, ::avmshell::CapabilitiesClass::AS3_hasStreamingVideo_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_Capabilities_hasTLS_get, ::avmshell::CapabilitiesClass::AS3_hasTLS_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_Capabilities_hasVideoEncoder_get, ::avmshell::CapabilitiesClass::AS3_hasVideoEncoder_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_Capabilities_isDebugger_get, ::avmshell::CapabilitiesClass::AS3_isDebugger_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_Capabilities_language_get, ::avmshell::CapabilitiesClass::AS3_language_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_Capabilities_localFileReadDisable_get, ::avmshell::CapabilitiesClass::AS3_localFileReadDisable_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_Capabilities_manufacturer_get, ::avmshell::CapabilitiesClass::AS3_manufacturer_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_Capabilities_os_get, ::avmshell::CapabilitiesClass::AS3_os_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_system_Capabilities_pixelAspectRatio_get, ::avmshell::CapabilitiesClass::AS3_pixelAspectRatio_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_Capabilities_playerType_get, ::avmshell::CapabilitiesClass::AS3_playerType_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_Capabilities_screenColor_get, ::avmshell::CapabilitiesClass::AS3_screenColor_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_system_Capabilities_screenDPI_get, ::avmshell::CapabilitiesClass::AS3_screenDPI_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_system_Capabilities_screenResolutionX_get, ::avmshell::CapabilitiesClass::AS3_screenResolutionX_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_system_Capabilities_screenResolutionY_get, ::avmshell::CapabilitiesClass::AS3_screenResolutionY_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_Capabilities_serverString_get, ::avmshell::CapabilitiesClass::AS3_serverString_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_Capabilities_version_get, ::avmshell::CapabilitiesClass::AS3_version_get)

		//new adds
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_Capabilities_cpuArchitecture_get, ::avmshell::CapabilitiesClass::AS3_cpuArchitecture_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_Capabilities_isEmbeddedInAcrobat_get, ::avmshell::CapabilitiesClass::AS3_isEmbeddedInAcrobat_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_Capabilities_languages_get, ::avmshell::CapabilitiesClass::AS3_languages_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_Capabilities_maxLevelIDC_get, ::avmshell::CapabilitiesClass::AS3_maxLevelIDC_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_Capabilities_supports32BitProcesses_get, ::avmshell::CapabilitiesClass::AS3_supports32BitProcesses_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_Capabilities_supports64BitProcesses_get, ::avmshell::CapabilitiesClass::AS3_supports64BitProcesses_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_Capabilities_touchscreenType_get, ::avmshell::CapabilitiesClass::AS3_touchscreenType_get)
		//new adds end

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_B_S(flash_system_Capabilities_hasMultiChannelAudio, ::avmshell::CapabilitiesClass::AS3_hasMultiChannelAudio)
		//new adds 11 end

		//Class CSMSettings
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_CSMSettings_fontSize_get, ::avmshell::CSMSettingsObject::AS3_fontSize_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_CSMSettings_fontSize_set, ::avmshell::CSMSettingsObject::AS3_fontSize_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_CSMSettings_insideCutoff_get, ::avmshell::CSMSettingsObject::AS3_insideCutoff_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_CSMSettings_insideCutoff_set, ::avmshell::CSMSettingsObject::AS3_insideCutoff_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_CSMSettings_outsideCutoff_get, ::avmshell::CSMSettingsObject::AS3_outsideCutoff_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_CSMSettings_outsideCutoff_set, ::avmshell::CSMSettingsObject::AS3_outsideCutoff_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_CSMSettings_CSMSettings, ::avmshell::CSMSettingsObject::AS3_constructor)

		//Class CustomActions
		AVMTHUNK_NATIVE_METHOD_P_VOID(adobe_utils_CustomActions_actionsList_get, ::avmshell::CustomActionsClass::AS3_actionsList_get)
		AVMTHUNK_NATIVE_METHOD_P_S(adobe_utils_CustomActions_getActions, ::avmshell::CustomActionsClass::AS3_getActions)
		AVMTHUNK_NATIVE_METHOD_VOID_SS(adobe_utils_CustomActions_installActions, ::avmshell::CustomActionsClass::AS3_installActions)
		AVMTHUNK_NATIVE_METHOD_VOID_S(adobe_utils_CustomActions_uninstallActions, ::avmshell::CustomActionsClass::AS3_uninstallActions)

		//Class Dictionary
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_utils_Dictionary_Dictionary, ::avmshell::DictionaryObject::AS3_constructor)

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_P_S(flash_utils_Dictionary_toJSON, ::avmshell::DictionaryObject::AS3_toJSON)
		//new adds 11 end

		//Class FileFilter
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_FileFilter_description_get, ::avmshell::FileFilterObject::AS3_description_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_net_FileFilter_description_set, ::avmshell::FileFilterObject::AS3_description_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_FileFilter_extension_get, ::avmshell::FileFilterObject::AS3_extension_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_net_FileFilter_extension_set, ::avmshell::FileFilterObject::AS3_extension_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_FileFilter_macType_get, ::avmshell::FileFilterObject::AS3_macType_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_net_FileFilter_macType_set, ::avmshell::FileFilterObject::AS3_macType_set)
		AVMTHUNK_NATIVE_METHOD_VOID_SSS(flash_net_FileFilter_FileFilter, ::avmshell::FileFilterObject::AS3_constructor)

		//Class Font
		AVMTHUNK_NATIVE_METHOD_P_I(flash_text_Font_enumerateFonts, ::avmshell::FontClass::AS3_enumerateFonts)
		AVMTHUNK_NATIVE_METHOD_B_P(flash_text_Font_registerFont, ::avmshell::FontClass::AS3_registerFont)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_Font_fontName_get, ::avmshell::FontObject::AS3_fontName_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_Font_fontStyle_get, ::avmshell::FontObject::AS3_fontStyle_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_Font_fontType_get, ::avmshell::FontObject::AS3_fontType_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_Font_hasGlyphs, ::avmshell::FontObject::AS3_hasGlyphs)

		//Class FrameLabel
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_display_FrameLabel_frame_get, ::avmshell::FrameLabelObject::AS3_frame_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_FrameLabel_name_get, ::avmshell::FrameLabelObject::AS3_name_get)

		//Class Keyboard
		//AVMTHUNK_NATIVE_METHOD_EX(flash_ui_Keyboard_capsLock_get, ::avmshell::KeyboardObject::AS3_capsLock_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_ui_Keyboard_numLock_get, ::avmshell::KeyboardObject::AS3_numLock_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_ui_Keyboard_isAccessible, ::avmshell::KeyboardClass::AS3_isAccessible)

		//Class Mouse
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_ui_Mouse_hide, ::avmshell::MouseClass::AS3_hide)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_ui_Mouse_show, ::avmshell::MouseClass::AS3_show)

		//new adds
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_ui_Mouse_cursor_get, ::avmshell::MouseClass::AS3_cursor_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_ui_Mouse_cursor_set, ::avmshell::MouseClass::AS3_cursor_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_ui_Mouse_supportsCursor_get, ::avmshell::MouseClass::AS3_supportsCursor_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_ui_Mouse_supportsNativeCursor_get, ::avmshell::MouseClass::AS3_supportsNativeCursor_get)

		AVMTHUNK_NATIVE_METHOD_VOID_SP(flash_ui_Mouse_registerCursor, ::avmshell::MouseClass::AS3_registerCursor)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_ui_Mouse_unregisterCursor, ::avmshell::MouseClass::AS3_unregisterCursor)
		//new adds end

		//Class ObjectEncoding
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_ObjectEncoding_dynamicPropertyWriter_get, ::avmshell::ObjectEncodingObject::AS3_dynamicPropertyWriter_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_ObjectEncoding_dynamicPropertyWriter_set, ::avmshell::ObjectEncodingObject::AS3_dynamicPropertyWriter_set)

		//Class Proxy
		//AVMTHUNK_NATIVE_METHOD_EX(flash_utils_Proxy_callProperty, ::avmshell::ProxyObject::AS3_callProperty)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_utils_Proxy_deleteProperty, ::avmshell::ProxyObject::AS3_deleteProperty)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_utils_Proxy_getDescendants, ::avmshell::ProxyObject::AS3_getDescendants)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_utils_Proxy_getProperty, ::avmshell::ProxyObject::AS3_getProperty)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_utils_Proxy_hasProperty, ::avmshell::ProxyObject::AS3_hasProperty)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_utils_Proxy_isAttribute, ::avmshell::ProxyObject::AS3_isAttribute)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_utils_Proxy_nextName, ::avmshell::ProxyObject::AS3_nextName)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_utils_Proxy_nextNameIndex, ::avmshell::ProxyObject::AS3_nextNameIndex)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_utils_Proxy_nextValue, ::avmshell::ProxyObject::AS3_nextValue)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_utils_Proxy_setProperty, ::avmshell::ProxyObject::AS3_setProperty)

		//Class Security
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_Security_exactSettings_get, ::avmshell::SecurityClass::AS3_exactSettings_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_system_Security_exactSettings_set, ::avmshell::SecurityClass::AS3_exactSettings_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_Security_sandboxType_get, ::avmshell::SecurityClass::AS3_sandboxType_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_system_Security_allowDomainN, ::avmshell::SecurityClass::AS3_allowDomain)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_system_Security_allowInsecureDomainN, ::avmshell::SecurityClass::AS3_allowInsecureDomain)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_system_Security_loadPolicyFile, ::avmshell::SecurityClass::AS3_loadPolicyFile)
		AVMTHUNK_NATIVE_METHOD_VOID_S_SECURITY(flash_system_Security_showSettings, ::avmshell::SecurityClass::AS3_showSettings)
		//new adds
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_Security_pageDomain_get, ::avmshell::SecurityClass::AS3_pageDomain_get)
		//new adds end

		//Class SoundMixer
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_media_SoundMixer_areSoundsInaccessible, ::avmshell::SoundMixerClass::AS3_areSoundsInaccessible)
		AVMTHUNK_NATIVE_METHOD_VOID_PII(flash_media_SoundMixer_computeSpectrum, ::avmshell::SoundMixerClass::AS3_computeSpectrum)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_media_SoundMixer_stopAll, ::avmshell::SoundMixerClass::AS3_stopAll)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_SoundMixer_bufferTime_get, ::avmshell::SoundMixerClass::AS3_bufferTime_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_media_SoundMixer_bufferTime_set, ::avmshell::SoundMixerClass::AS3_bufferTime_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_SoundMixer_soundTransform_get, ::avmshell::SoundMixerClass::AS3_soundTransform_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_media_SoundMixer_soundTransform_set, ::avmshell::SoundMixerClass::AS3_soundTransform_set)

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_media_SoundMixer_audioPlaybackMode_get, ::avmshell::SoundMixerClass::AS3_audioPlaybackMode_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_media_SoundMixer_audioPlaybackMode_set, ::avmshell::SoundMixerClass::AS3_audioPlaybackMode_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_media_SoundMixer_useSpeakerphoneForVoice_get, ::avmshell::SoundMixerClass::AS3_useSpeakerphoneForVoice_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_media_SoundMixer_useSpeakerphoneForVoice_set, ::avmshell::SoundMixerClass::AS3_useSpeakerphoneForVoice_set)
		//new adds 11 end
		//Class System
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_System_ime_get, ::avmshell::SystemClass::AS3_ime_get)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_system_System_totalMemory_get, ::avmshell::SystemClass::AS3_totalMemory_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_System_useCodePage_get, ::avmshell::SystemClass::AS3_useCodePage_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_system_System_useCodePage_set, ::avmshell::SystemClass::AS3_useCodePage_set)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_system_System_setClipboard, ::avmshell::SystemClass::AS3_setClipboard)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_system_System_gc, ::avmshell::SystemClass::AS3_gc)

		//new adds
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_system_System_freeMemory_get, ::avmshell::SystemClass::AS3_freeMemory_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_system_System_privateMemory_get, ::avmshell::SystemClass::AS3_privateMemory_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_system_System_totalMemoryNumber_get, ::avmshell::SystemClass::AS3_totalMemoryNumber_get)

		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_system_System_disposeXML, ::avmshell::SystemClass::AS3_disposeXML)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_system_System_exit, ::avmshell::SystemClass::AS3_exit)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_system_System_pause, ::avmshell::SystemClass::AS3_pause)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_system_System_resume, ::avmshell::SystemClass::AS3_resume)
		//new adds end

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_system_System_pauseForGCIfCollectionImminent, ::avmshell::SystemClass::AS3_pauseForGCIfCollectionImminent)
		//new adds 11 end

		//Class TextLineMetrics
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_TextLineMetrics_ascent_get, ::avmshell::TextLineMetricsObject::AS3_ascent_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_TextLineMetrics_ascent_set, ::avmshell::TextLineMetricsObject::AS3_ascent_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_TextLineMetrics_descent_get, ::avmshell::TextLineMetricsObject::AS3_descent_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_TextLineMetrics_descent_set, ::avmshell::TextLineMetricsObject::AS3_descent_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_TextLineMetrics_height_get, ::avmshell::TextLineMetricsObject::AS3_height_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_TextLineMetrics_height_set, ::avmshell::TextLineMetricsObject::AS3_height_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_TextLineMetrics_leading_get, ::avmshell::TextLineMetricsObject::AS3_leading_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_TextLineMetrics_leading_set, ::avmshell::TextLineMetricsObject::AS3_leading_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_TextLineMetrics_width_get, ::avmshell::TextLineMetricsObject::AS3_width_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_TextLineMetrics_width_set, ::avmshell::TextLineMetricsObject::AS3_width_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_TextLineMetrics_x_get, ::avmshell::TextLineMetricsObject::AS3_x_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_TextLineMetrics_x_set, ::avmshell::TextLineMetricsObject::AS3_x_set)
		AVMTHUNK_NATIVE_METHOD_VOID_DDDDDD(flash_text_TextLineMetrics_TextLineMetrics, ::avmshell::TextLineMetricsObject::AS3_constructor)

		//Class TextRenderer
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_TextRenderer_displayMode_get, ::avmshell::TextRendererClass::AS3_displayMode_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_TextRenderer_displayMode_set, ::avmshell::TextRendererClass::AS3_displayMode_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_text_TextRenderer_maxLevel_get, ::avmshell::TextRendererClass::AS3_maxLevel_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_text_TextRenderer_maxLevel_set, ::avmshell::TextRendererClass::AS3_maxLevel_set)
		AVMTHUNK_NATIVE_METHOD_VOID_PPPP(flash_text_TextRenderer_setAdvancedAntiAliasingTable, ::avmshell::TextRendererClass::AS3_setAdvancedAntiAliasingTable)

		//Class URLRequestHeader
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_URLRequestHeader_name_get, ::avmshell::URLRequestHeaderObject::AS3_name_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_URLRequestHeader_name_set, ::avmshell::URLRequestHeaderObject::AS3_name_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_URLRequestHeader_value_get, ::avmshell::URLRequestHeaderObject::AS3_value_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_URLRequestHeader_value_set, ::avmshell::URLRequestHeaderObject::AS3_value_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_URLRequestHeader_URLRequestHeader, ::avmshell::URLRequestHeaderObject::AS3_constructor)

		//Class URLVariables
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_URLVariables_URLVariables, ::avmshell::URLVariablesObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_URLVariables_decode, ::avmshell::URLVariablesObject::AS3_decode)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_URLVariables_toString, ::avmshell::URLVariablesObject::AS3_toString)

		//Class XMLNode
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_xml_XMLNode_attributes_get, ::avmshell::XMLNodeObject::AS3_attributes_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_xml_XMLNode_attributes_set, ::avmshell::XMLNodeObject::AS3_attributes_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_xml_XMLNode_childNodes_get, ::avmshell::XMLNodeObject::AS3_childNodes_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_xml_XMLNode_childNodes_set, ::avmshell::XMLNodeObject::AS3_childNodes_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_xml_XMLNode_firstChild_get, ::avmshell::XMLNodeObject::AS3_firstChild_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_xml_XMLNode_firstChild_set, ::avmshell::XMLNodeObject::AS3_firstChild_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_xml_XMLNode_lastChild_get, ::avmshell::XMLNodeObject::AS3_lastChild_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_xml_XMLNode_lastChild_set, ::avmshell::XMLNodeObject::AS3_lastChild_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_xml_XMLNode_localName_get, ::avmshell::XMLNodeObject::AS3_localName_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_xml_XMLNode_localName_set, ::avmshell::XMLNodeObject::AS3_localName_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_xml_XMLNode_namespaceURI_get, ::avmshell::XMLNodeObject::AS3_namespaceURI_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_xml_XMLNode_nextSibling_get, ::avmshell::XMLNodeObject::AS3_nextSibling_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_xml_XMLNode_nextSibling_set, ::avmshell::XMLNodeObject::AS3_nextSibling_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_xml_XMLNode_nodeName_get, ::avmshell::XMLNodeObject::AS3_nodeName_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_xml_XMLNode_nodeName_set, ::avmshell::XMLNodeObject::AS3_nodeName_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_xml_XMLNode_nodeType_get, ::avmshell::XMLNodeObject::AS3_nodeType_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_xml_XMLNode_nodeType_set, ::avmshell::XMLNodeObject::AS3_nodeType_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_xml_XMLNode_nodeValue_get, ::avmshell::XMLNodeObject::AS3_nodeValue_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_xml_XMLNode_nodeValue_set, ::avmshell::XMLNodeObject::AS3_nodeValue_set)
		//AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_xml_XMLNode_addAttrib, ::avmshell::XMLNodeObject::AS3_addAttrib)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_xml_XMLNode_parentNode_get, ::avmshell::XMLNodeObject::AS3_parentNode_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_xml_XMLNode_parentNode_set, ::avmshell::XMLNodeObject::AS3_parentNode_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_xml_XMLNode_prefix_get, ::avmshell::XMLNodeObject::AS3_prefix_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_xml_XMLNode_previousSibling_get, ::avmshell::XMLNodeObject::AS3_previousSibling_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_xml_XMLNode_previousSibling_set, ::avmshell::XMLNodeObject::AS3_previousSibling_set)
		//AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_xml_XMLNode_XMLNode, ::avmshell::XMLNodeObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_xml_XMLNode_appendChild, ::avmshell::XMLNodeObject::AS3_appendChild)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_xml_XMLNode_cloneNode, ::avmshell::XMLNodeObject::AS3_cloneNode)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_xml_XMLNode_getNamespaceForPrefix, ::avmshell::XMLNodeObject::AS3_getNamespaceForPrefix)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_xml_XMLNode_getPrefixForNamespace, ::avmshell::XMLNodeObject::AS3_getPrefixForNamespace)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_xml_XMLNode_hasChildNodes, ::avmshell::XMLNodeObject::AS3_hasChildNodes)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_xml_XMLNode_insertBefore, ::avmshell::XMLNodeObject::AS3_insertBefore)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_xml_XMLNode_removeNode, ::avmshell::XMLNodeObject::AS3_removeNode)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_xml_XMLNode_toString, ::avmshell::XMLNodeObject::AS3_toString)

		//Class XMLUI
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(adobe_utils_XMLUI_accept, ::avmshell::XMLUIClass::AS3_accept)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(adobe_utils_XMLUI_cancel, ::avmshell::XMLUIClass::AS3_cancel)
		AVMTHUNK_NATIVE_METHOD_P_S(adobe_utils_XMLUI_getProperty, ::avmshell::XMLUIClass::AS3_getProperty)
		AVMTHUNK_NATIVE_METHOD_VOID_SS(adobe_utils_XMLUI_setProperty, ::avmshell::XMLUIClass::AS3_setProperty)

		//Class IllegalOperationError
		//AVMTHUNK_NATIVE_METHOD_EX(flash_errors_IllegalOperationError_IllegalOperationError, ::avmshell::IllegalOperationErrorObject::AS3_constructor)

		//Class IOError
		//AVMTHUNK_NATIVE_METHOD_EX(flash_errors_IOError_IOError, ::avmshell::IOErrorObject::AS3_constructor)

		//Class MemoryError
		//AVMTHUNK_NATIVE_METHOD_EX(flash_errors_MemoryError_MemoryError, ::avmshell::MemoryErrorObject::AS3_constructor)

		//Class ScriptTimeoutError
		//AVMTHUNK_NATIVE_METHOD_EX(flash_errors_ScriptTimeoutError_ScriptTimeoutError, ::avmshell::ScriptTimeoutErrorObject::AS3_constructor)

		//Class StackOverflowError
		//AVMTHUNK_NATIVE_METHOD_EX(flash_errors_StackOverflowError_StackOverflowError, ::avmshell::StackOverflowErrorObject::AS3_constructor)

		//Class ActivityEvent
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_ActivityEvent_activating_get, ::avmshell::ActivityEventObject::AS3_activating_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_ActivityEvent_activating_set, ::avmshell::ActivityEventObject::AS3_activating_set)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBB(flash_events_ActivityEvent_ActivityEvent, ::avmshell::ActivityEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_ActivityEvent_clone, ::avmshell::ActivityEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_ActivityEvent_toString, ::avmshell::ActivityEventObject::AS3_toString)

		//Class ContextMenuEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_ContextMenuEvent_contextMenuOwner_get, ::avmshell::ContextMenuEventObject::AS3_contextMenuOwner_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_ContextMenuEvent_contextMenuOwner_set, ::avmshell::ContextMenuEventObject::AS3_contextMenuOwner_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_ContextMenuEvent_mouseTarget_get, ::avmshell::ContextMenuEventObject::AS3_mouseTarget_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_ContextMenuEvent_mouseTarget_set, ::avmshell::ContextMenuEventObject::AS3_mouseTarget_set)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBPP(flash_events_ContextMenuEvent_ContextMenuEvent, ::avmshell::ContextMenuEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_ContextMenuEvent_clone, ::avmshell::ContextMenuEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_ContextMenuEvent_toString, ::avmshell::ContextMenuEventObject::AS3_toString)

		//new adds
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_ContextMenuEvent_isMouseTargetInaccessible_get, ::avmshell::ContextMenuEventObject::AS3_isMouseTargetInaccessible_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_ContextMenuEvent_isMouseTargetInaccessible_set, ::avmshell::ContextMenuEventObject::AS3_isMouseTargetInaccessible_set)
		//new adds end

		//Class FocusEvent
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_events_FocusEvent_keyCode_get, ::avmshell::FocusEventObject::AS3_keyCode_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_events_FocusEvent_keyCode_set, ::avmshell::FocusEventObject::AS3_keyCode_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_FocusEvent_relatedObject_get, ::avmshell::FocusEventObject::AS3_relatedObject_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_FocusEvent_relatedObject_set, ::avmshell::FocusEventObject::AS3_relatedObject_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_FocusEvent_shiftKey_get, ::avmshell::FocusEventObject::AS3_shiftKey_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_FocusEvent_shiftKey_set, ::avmshell::FocusEventObject::AS3_shiftKey_set)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBPBU(flash_events_FocusEvent_FocusEvent, ::avmshell::FocusEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_FocusEvent_clone, ::avmshell::FocusEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_FocusEvent_toString, ::avmshell::FocusEventObject::AS3_toString)

		//new adds
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_FocusEvent_direction_get, ::avmshell::FocusEventObject::AS3_direction_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_FocusEvent_direction_set, ::avmshell::FocusEventObject::AS3_direction_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_FocusEvent_isRelatedObjectInaccessible_get, ::avmshell::FocusEventObject::AS3_isRelatedObjectInaccessible_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_FocusEvent_isRelatedObjectInaccessible_set, ::avmshell::FocusEventObject::AS3_isRelatedObjectInaccessible_set)
		//new adds end

		//Class HTTPStatusEvent
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_events_HTTPStatusEvent_status_get, ::avmshell::HTTPStatusEventObject::AS3_status_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_SBBIB(flash_events_HTTPStatusEvent_HTTPStatusEvent, ::avmshell::HTTPStatusEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBI(flash_events_HTTPStatusEvent_HTTPStatusEvent, ::avmshell::HTTPStatusEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_HTTPStatusEvent_clone, ::avmshell::HTTPStatusEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_HTTPStatusEvent_toString, ::avmshell::HTTPStatusEventObject::AS3_toString)

		//new adds
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_HTTPStatusEvent_responseHeaders_get, ::avmshell::HTTPStatusEventObject::AS3_responseHeaders_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_HTTPStatusEvent_responseHeaders_set, ::avmshell::HTTPStatusEventObject::AS3_responseHeaders_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_HTTPStatusEvent_responseURL_get, ::avmshell::HTTPStatusEventObject::AS3_responseURL_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_events_HTTPStatusEvent_responseURL_set, ::avmshell::HTTPStatusEventObject::AS3_responseURL_set)
		//new adds end

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_HTTPStatusEvent_redirected_get, ::avmshell::HTTPStatusEventObject::AS3_redirected_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_HTTPStatusEvent_redirected_set, ::avmshell::HTTPStatusEventObject::AS3_redirected_set)
		//new adds 11 end

		//Class KeyboardEvent
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_KeyboardEvent_altKey_get, ::avmshell::KeyboardEventObject::AS3_altKey_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_KeyboardEvent_altKey_set, ::avmshell::KeyboardEventObject::AS3_altKey_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_events_KeyboardEvent_charCode_get, ::avmshell::KeyboardEventObject::AS3_charCode_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_events_KeyboardEvent_charCode_set, ::avmshell::KeyboardEventObject::AS3_charCode_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_KeyboardEvent_ctrlKey_get, ::avmshell::KeyboardEventObject::AS3_ctrlKey_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_KeyboardEvent_ctrlKey_set, ::avmshell::KeyboardEventObject::AS3_ctrlKey_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_events_KeyboardEvent_keyCode_get, ::avmshell::KeyboardEventObject::AS3_keyCode_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_events_KeyboardEvent_keyCode_set, ::avmshell::KeyboardEventObject::AS3_keyCode_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_events_KeyboardEvent_keyLocation_get, ::avmshell::KeyboardEventObject::AS3_keyLocation_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_events_KeyboardEvent_keyLocation_set, ::avmshell::KeyboardEventObject::AS3_keyLocation_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_KeyboardEvent_shiftKey_get, ::avmshell::KeyboardEventObject::AS3_shiftKey_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_KeyboardEvent_shiftKey_set, ::avmshell::KeyboardEventObject::AS3_shiftKey_set)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBUUUBBB(flash_events_KeyboardEvent_KeyboardEvent, ::avmshell::KeyboardEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_KeyboardEvent_clone, ::avmshell::KeyboardEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_KeyboardEvent_toString, ::avmshell::KeyboardEventObject::AS3_toString)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_events_KeyboardEvent_updateAfterEvent, ::avmshell::KeyboardEventObject::AS3_updateAfterEvent)
		
		//new adds
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_KeyboardEvent_commandKey_get, ::avmshell::KeyboardEventObject::AS3_commandKey_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_KeyboardEvent_commandKey_set, ::avmshell::KeyboardEventObject::AS3_commandKey_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_KeyboardEvent_controlKey_get, ::avmshell::KeyboardEventObject::AS3_controlKey_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_KeyboardEvent_controlKey_set, ::avmshell::KeyboardEventObject::AS3_controlKey_set)
		//new adds end

		//Class MouseEvent
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_MouseEvent_altKey_get, ::avmshell::MouseEventObject::AS3_altKey_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_MouseEvent_altKey_set, ::avmshell::MouseEventObject::AS3_altKey_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_MouseEvent_buttonDown_get, ::avmshell::MouseEventObject::AS3_buttonDown_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_MouseEvent_buttonDown_set, ::avmshell::MouseEventObject::AS3_buttonDown_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_MouseEvent_ctrlKey_get, ::avmshell::MouseEventObject::AS3_ctrlKey_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_MouseEvent_ctrlKey_set, ::avmshell::MouseEventObject::AS3_ctrlKey_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_events_MouseEvent_delta_get, ::avmshell::MouseEventObject::AS3_delta_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_events_MouseEvent_delta_set, ::avmshell::MouseEventObject::AS3_delta_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_MouseEvent_localX_get, ::avmshell::MouseEventObject::AS3_localX_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_MouseEvent_localX_set, ::avmshell::MouseEventObject::AS3_localX_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_MouseEvent_localY_get, ::avmshell::MouseEventObject::AS3_localY_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_MouseEvent_localY_set, ::avmshell::MouseEventObject::AS3_localY_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_MouseEvent_relatedObject_get, ::avmshell::MouseEventObject::AS3_relatedObject_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_MouseEvent_relatedObject_set, ::avmshell::MouseEventObject::AS3_relatedObject_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_MouseEvent_shiftKey_get, ::avmshell::MouseEventObject::AS3_shiftKey_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_MouseEvent_shiftKey_set, ::avmshell::MouseEventObject::AS3_shiftKey_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_MouseEvent_stageX_get, ::avmshell::MouseEventObject::AS3_stageX_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_MouseEvent_stageY_get, ::avmshell::MouseEventObject::AS3_stageY_get)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBDDPBBBBI(flash_events_MouseEvent_MouseEvent, ::avmshell::MouseEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_MouseEvent_clone, ::avmshell::MouseEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_MouseEvent_toString, ::avmshell::MouseEventObject::AS3_toString)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_events_MouseEvent_updateAfterEvent, ::avmshell::MouseEventObject::AS3_updateAfterEvent)

		//new adds
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_events_MouseEvent_clickCount_get, ::avmshell::MouseEventObject::AS3_clickCount_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_MouseEvent_commandKey_get, ::avmshell::MouseEventObject::AS3_commandKey_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_MouseEvent_commandKey_set, ::avmshell::MouseEventObject::AS3_commandKey_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_MouseEvent_controlKey_get, ::avmshell::MouseEventObject::AS3_controlKey_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_MouseEvent_controlKey_set, ::avmshell::MouseEventObject::AS3_controlKey_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_MouseEvent_isRelatedObjectInaccessible_get, ::avmshell::MouseEventObject::AS3_isRelatedObjectInaccessible_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_MouseEvent_isRelatedObjectInaccessible_set, ::avmshell::MouseEventObject::AS3_isRelatedObjectInaccessible_set)
		//new adds end

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_MouseEvent_movementX_get, ::avmshell::MouseEventObject::AS3_movementX_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_MouseEvent_movementX_set, ::avmshell::MouseEventObject::AS3_movementX_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_MouseEvent_movementY_get, ::avmshell::MouseEventObject::AS3_movementY_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_MouseEvent_movementY_set, ::avmshell::MouseEventObject::AS3_movementY_set)
		//new adds 11 end

		//Class NetStatusEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_NetStatusEvent_info_get, ::avmshell::NetStatusEventObject::AS3_info_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_NetStatusEvent_info_set, ::avmshell::NetStatusEventObject::AS3_info_set)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBP(flash_events_NetStatusEvent_NetStatusEvent, ::avmshell::NetStatusEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_NetStatusEvent_clone, ::avmshell::NetStatusEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_NetStatusEvent_toString, ::avmshell::NetStatusEventObject::AS3_toString)

		//Class ProgressEvent
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_events_ProgressEvent_bytesLoaded_get, ::avmshell::ProgressEventObject::AS3_bytesLoaded_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_events_ProgressEvent_bytesLoaded_set, ::avmshell::ProgressEventObject::AS3_bytesLoaded_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_events_ProgressEvent_bytesTotal_get, ::avmshell::ProgressEventObject::AS3_bytesTotal_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_events_ProgressEvent_bytesTotal_set, ::avmshell::ProgressEventObject::AS3_bytesTotal_set)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBUU(flash_events_ProgressEvent_ProgressEvent, ::avmshell::ProgressEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_ProgressEvent_clone, ::avmshell::ProgressEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_ProgressEvent_toString, ::avmshell::ProgressEventObject::AS3_toString)

		//Class StatusEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_StatusEvent_code_get, ::avmshell::StatusEventObject::AS3_code_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_StatusEvent_code_set, ::avmshell::StatusEventObject::AS3_code_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_StatusEvent_level_get, ::avmshell::StatusEventObject::AS3_level_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_StatusEvent_level_set, ::avmshell::StatusEventObject::AS3_level_set)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBSS(flash_events_StatusEvent_StatusEvent, ::avmshell::StatusEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_StatusEvent_clone, ::avmshell::StatusEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_StatusEvent_toString, ::avmshell::StatusEventObject::AS3_toString)

		//Class SyncEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_SyncEvent_changeList_get, ::avmshell::SyncEventObject::AS3_changeList_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_SyncEvent_changeList_set, ::avmshell::SyncEventObject::AS3_changeList_set)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBP(flash_events_SyncEvent_SyncEvent, ::avmshell::SyncEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_SyncEvent_clone, ::avmshell::SyncEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_SyncEvent_toString, ::avmshell::SyncEventObject::AS3_toString)

		//Class TextEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_TextEvent_text_get, ::avmshell::TextEventObject::AS3_text_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_TextEvent_text_set, ::avmshell::TextEventObject::AS3_text_set)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBS(flash_events_TextEvent_TextEvent, ::avmshell::TextEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_TextEvent_clone, ::avmshell::TextEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_TextEvent_toString, ::avmshell::TextEventObject::AS3_toString)

		//Class TimerEvent
		AVMTHUNK_NATIVE_METHOD_VOID_SBB(flash_events_TimerEvent_TimerEvent, ::avmshell::TimerEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_TimerEvent_clone, ::avmshell::TimerEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_TimerEvent_toString, ::avmshell::TimerEventObject::AS3_toString)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_events_TimerEvent_updateAfterEvent, ::avmshell::TimerEventObject::AS3_updateAfterEvent)

		//Class ContextMenu
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_ui_ContextMenu_builtInItems_get, ::avmshell::ContextMenuObject::AS3_builtInItems_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_ui_ContextMenu_builtInItems_set, ::avmshell::ContextMenuObject::AS3_builtInItems_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_ui_ContextMenu_customItems_get, ::avmshell::ContextMenuObject::AS3_customItems_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_ui_ContextMenu_customItems_set, ::avmshell::ContextMenuObject::AS3_customItems_set)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_ui_ContextMenu_ContextMenu, ::avmshell::ContextMenuObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_ui_ContextMenu_clone, ::avmshell::ContextMenuObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_ui_ContextMenu_hideBuiltInItems, ::avmshell::ContextMenuObject::AS3_hideBuiltInItems)
		
		//new adds
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_ui_ContextMenu_clipboardItems_get, ::avmshell::ContextMenuObject::AS3_clipboardItems_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_ui_ContextMenu_clipboardItems_set, ::avmshell::ContextMenuObject::AS3_clipboardItems_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_ui_ContextMenu_clipboardMenu_get, ::avmshell::ContextMenuObject::AS3_clipboardMenu_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_ui_ContextMenu_clipboardMenu_set, ::avmshell::ContextMenuObject::AS3_clipboardMenu_set)
//		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_ui_ContextMenu_isSupported_get, ::avmshell::ContextMenuObject::AS3_isSupported_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_ui_ContextMenu_items_get, ::avmshell::ContextMenuObject::AS3_items_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_ui_ContextMenu_items_set, ::avmshell::ContextMenuObject::AS3_items_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_ui_ContextMenu_link_get, ::avmshell::ContextMenuObject::AS3_link_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_ui_ContextMenu_link_set, ::avmshell::ContextMenuObject::AS3_link_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_ui_ContextMenu_numItems_get, ::avmshell::ContextMenuObject::AS3_numItems_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_ui_ContextMenu_numItems_set, ::avmshell::ContextMenuObject::AS3_numItems_set)

		AVMTHUNK_NATIVE_METHOD_P_PI(flash_ui_ContextMenu_addItemAt, ::avmshell::ContextMenuObject::AS3_addItemAt)
		AVMTHUNK_NATIVE_METHOD_B_P(flash_ui_ContextMenu_containsItem, ::avmshell::ContextMenuObject::AS3_containsItem)
		AVMTHUNK_NATIVE_METHOD_VOID_PDD(flash_ui_ContextMenu_display, ::avmshell::ContextMenuObject::AS3_display)
		AVMTHUNK_NATIVE_METHOD_P_I(flash_ui_ContextMenu_getItemAt, ::avmshell::ContextMenuObject::AS3_getItemAt)
		AVMTHUNK_NATIVE_METHOD_I_P(flash_ui_ContextMenu_getItemIndex, ::avmshell::ContextMenuObject::AS3_getItemIndex)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_ui_ContextMenu_removeAllItems, ::avmshell::ContextMenuObject::AS3_removeAllItems)
		AVMTHUNK_NATIVE_METHOD_P_I(flash_ui_ContextMenu_removeItemAt, ::avmshell::ContextMenuObject::AS3_removeItemAt)
		//new adds end

		//Class DisplayObject

		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_DisplayObject_accessibilityProperties_get, ::avmshell::DisplayObjectObject::AS3_accessibilityProperties_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_DisplayObject_accessibilityProperties_set, ::avmshell::DisplayObjectObject::AS3_accessibilityProperties_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_DisplayObject_alpha_get, ::avmshell::DisplayObjectObject::AS3_alpha_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_DisplayObject_alpha_set, ::avmshell::DisplayObjectObject::AS3_alpha_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_DisplayObject_blendMode_get, ::avmshell::DisplayObjectObject::AS3_blendMode_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_DisplayObject_blendMode_set, ::avmshell::DisplayObjectObject::AS3_blendMode_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_DisplayObject_cacheAsBitmap_get, ::avmshell::DisplayObjectObject::AS3_cacheAsBitmap_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_DisplayObject_cacheAsBitmap_set, ::avmshell::DisplayObjectObject::AS3_cacheAsBitmap_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_DisplayObject_filters_get, ::avmshell::DisplayObjectObject::AS3_filters_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_DisplayObject_filters_set, ::avmshell::DisplayObjectObject::AS3_filters_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_DisplayObject_height_get, ::avmshell::DisplayObjectObject::AS3_height_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_DisplayObject_height_set, ::avmshell::DisplayObjectObject::AS3_height_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_DisplayObject_loaderInfo_get, ::avmshell::DisplayObjectObject::AS3_loaderInfo_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_DisplayObject_mask_get, ::avmshell::DisplayObjectObject::AS3_mask_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_DisplayObject_mask_set, ::avmshell::DisplayObjectObject::AS3_mask_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_DisplayObject_mouseX_get, ::avmshell::DisplayObjectObject::AS3_mouseX_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_DisplayObject_mouseY_get, ::avmshell::DisplayObjectObject::AS3_mouseY_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_DisplayObject_name_get, ::avmshell::DisplayObjectObject::AS3_name_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_DisplayObject_name_set, ::avmshell::DisplayObjectObject::AS3_name_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_DisplayObject_opaqueBackground_get, ::avmshell::DisplayObjectObject::AS3_opaqueBackground_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_DisplayObject_opaqueBackground_set, ::avmshell::DisplayObjectObject::AS3_opaqueBackground_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_DisplayObject_parent_get, ::avmshell::DisplayObjectObject::AS3_parent_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_DisplayObject_root_get, ::avmshell::DisplayObjectObject::AS3_root_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_DisplayObject_rotation_get, ::avmshell::DisplayObjectObject::AS3_rotation_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_DisplayObject_rotation_set, ::avmshell::DisplayObjectObject::AS3_rotation_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_DisplayObject_scale9Grid_get, ::avmshell::DisplayObjectObject::AS3_scale9Grid_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_DisplayObject_scale9Grid_set, ::avmshell::DisplayObjectObject::AS3_scale9Grid_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_DisplayObject_scaleX_get, ::avmshell::DisplayObjectObject::AS3_scaleX_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_DisplayObject_scaleX_set, ::avmshell::DisplayObjectObject::AS3_scaleX_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_DisplayObject_scaleY_get, ::avmshell::DisplayObjectObject::AS3_scaleY_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_DisplayObject_scaleY_set, ::avmshell::DisplayObjectObject::AS3_scaleY_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_DisplayObject_scrollRect_get, ::avmshell::DisplayObjectObject::AS3_scrollRect_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_DisplayObject_scrollRect_set, ::avmshell::DisplayObjectObject::AS3_scrollRect_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_DisplayObject_stage_get, ::avmshell::DisplayObjectObject::AS3_stage_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_DisplayObject_transform_get, ::avmshell::DisplayObjectObject::AS3_transform_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_DisplayObject_transform_set, ::avmshell::DisplayObjectObject::AS3_transform_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_DisplayObject_visible_get, ::avmshell::DisplayObjectObject::AS3_visible_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_DisplayObject_visible_set, ::avmshell::DisplayObjectObject::AS3_visible_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_DisplayObject_width_get, ::avmshell::DisplayObjectObject::AS3_width_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_DisplayObject_width_set, ::avmshell::DisplayObjectObject::AS3_width_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_DisplayObject_x_get, ::avmshell::DisplayObjectObject::AS3_x_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_DisplayObject_x_set, ::avmshell::DisplayObjectObject::AS3_x_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_DisplayObject_y_get, ::avmshell::DisplayObjectObject::AS3_y_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_DisplayObject_y_set, ::avmshell::DisplayObjectObject::AS3_y_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_DisplayObject_z_get, ::avmshell::DisplayObjectObject::AS3_z_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_DisplayObject_z_set, ::avmshell::DisplayObjectObject::AS3_z_set)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_display_DisplayObject_getBounds, ::avmshell::DisplayObjectObject::AS3_getBounds)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_display_DisplayObject_getRect, ::avmshell::DisplayObjectObject::AS3_getRect)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_display_DisplayObject_globalToLocal, ::avmshell::DisplayObjectObject::AS3_globalToLocal)
		AVMTHUNK_NATIVE_METHOD_B_P(flash_display_DisplayObject_hitTestObject, ::avmshell::DisplayObjectObject::AS3_hitTestObject)
		AVMTHUNK_NATIVE_METHOD_B_DDB(flash_display_DisplayObject_hitTestPoint, ::avmshell::DisplayObjectObject::AS3_hitTestPoint)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_display_DisplayObject_localToGlobal, ::avmshell::DisplayObjectObject::AS3_localToGlobal)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_DisplayObject_DisplayObject, ::avmshell::DisplayObjectObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_DisplayObject_drawNow, ::avmshell::DisplayObjectObject::AS3_drawNow)
		
		//new adds
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_DisplayObject_blendShader_set, ::avmshell::DisplayObjectObject::AS3_blendShader_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_DisplayObject_cacheAsBitmapMatrix_get, ::avmshell::DisplayObjectObject::AS3_cacheAsBitmapMatrix_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_DisplayObject_cacheAsBitmapMatrix_set, ::avmshell::DisplayObjectObject::AS3_cacheAsBitmapMatrix_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_DisplayObject_rotationX_get, ::avmshell::DisplayObjectObject::AS3_rotationX_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_DisplayObject_rotationX_set, ::avmshell::DisplayObjectObject::AS3_rotationX_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_DisplayObject_rotationY_get, ::avmshell::DisplayObjectObject::AS3_rotationY_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_DisplayObject_rotationY_set, ::avmshell::DisplayObjectObject::AS3_rotationY_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_DisplayObject_rotationZ_get, ::avmshell::DisplayObjectObject::AS3_rotationZ_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_DisplayObject_rotationZ_set, ::avmshell::DisplayObjectObject::AS3_rotationZ_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_DisplayObject_scaleZ_get, ::avmshell::DisplayObjectObject::AS3_scaleZ_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_DisplayObject_scaleZ_set, ::avmshell::DisplayObjectObject::AS3_scaleZ_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_DisplayObject_z_get, ::avmshell::DisplayObjectObject::AS3_z_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_DisplayObject_z_set, ::avmshell::DisplayObjectObject::AS3_z_set)

		AVMTHUNK_NATIVE_METHOD_P_P(flash_display_DisplayObject_globalToLocal3D, ::avmshell::DisplayObjectObject::AS3_globalToLocal3D)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_display_DisplayObject_local3DToGlobal, ::avmshell::DisplayObjectObject::AS3_local3DToGlobal)
		//new adds end

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_DisplayObject_metaData_get, ::avmshell::DisplayObjectObject::AS3_metaData_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_DisplayObject_metaData_set, ::avmshell::DisplayObjectObject::AS3_metaData_set)
		//new adds 11 end

		//Class IME
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_system_IME_doConversion, ::avmshell::IMEClass::AS3_doConversion)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_system_IME_setCompositionString, ::avmshell::IMEClass::AS3_setCompositionString)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_IME_conversionMode_get, ::avmshell::IMEClass::AS3_conversionMode_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_IME_enabled_get, ::avmshell::IMEClass::AS3_enabled_get)
		//new adds
//		AVMTHUNK_NATIVE_METHOD_EX(flash_system_IME_isSupported_get, ::avmshell::IMEClass::AS3_isSupported_get)

		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_system_IME_compositionAbandoned, ::avmshell::IMEClass::AS3_compositionAbandoned)
		AVMTHUNK_NATIVE_METHOD_VOID_II(flash_system_IME_compositionSelectionChanged, ::avmshell::IMEClass::AS3_compositionSelectionChanged)
		//new adds end

		//Class NetConnection
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_NetConnection_defaultObjectEncoding_get, ::avmshell::NetConnectionClass::AS3_defaultObjectEncoding_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_net_NetConnection_defaultObjectEncoding_set, ::avmshell::NetConnectionClass::AS3_defaultObjectEncoding_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetConnection_client_get, ::avmshell::NetConnectionObject::AS3_client_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_NetConnection_client_set, ::avmshell::NetConnectionObject::AS3_client_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_NetConnection_connected_get, ::avmshell::NetConnectionObject::AS3_connected_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetConnection_connectedProxyType_get, ::avmshell::NetConnectionObject::AS3_connectedProxyType_get)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_NetConnection_objectEncoding_get, ::avmshell::NetConnectionObject::AS3_objectEncoding_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_net_NetConnection_objectEncoding_set, ::avmshell::NetConnectionObject::AS3_objectEncoding_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetConnection_proxyType_get, ::avmshell::NetConnectionObject::AS3_proxyType_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_NetConnection_proxyType_set, ::avmshell::NetConnectionObject::AS3_proxyType_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetConnection_uri_get, ::avmshell::NetConnectionObject::AS3_uri_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_NetConnection_usingTLS_get, ::avmshell::NetConnectionObject::AS3_usingTLS_get)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_NetConnection_NetConnection, ::avmshell::NetConnectionObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_PBP(flash_net_NetConnection_addHeader, ::avmshell::NetConnectionObject::AS3_addHeader)
		AVMTHUNK_NATIVE_METHOD_VOID_PPP(flash_net_NetConnection_callN, ::avmshell::NetConnectionObject::AS3_call)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_NetConnection_close, ::avmshell::NetConnectionObject::AS3_close)
		AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_net_NetConnection_connectN, ::avmshell::NetConnectionObject::AS3_connect)
		
		//new adds
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetConnection_farID_get, ::avmshell::NetConnectionObject::AS3_farID_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetConnection_farNonce_get, ::avmshell::NetConnectionObject::AS3_farNonce_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetConnection_httpIdleTimeout_get, ::avmshell::NetConnectionObject::AS3_httpIdleTimeout_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_net_NetConnection_httpIdleTimeout_set, ::avmshell::NetConnectionObject::AS3_httpIdleTimeout_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_NetConnection_maxPeerConnections_get, ::avmshell::NetConnectionObject::AS3_maxPeerConnections_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_net_NetConnection_maxPeerConnections_set, ::avmshell::NetConnectionObject::AS3_maxPeerConnections_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetConnection_nearID_get, ::avmshell::NetConnectionObject::AS3_nearID_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetConnection_nearNonce_get, ::avmshell::NetConnectionObject::AS3_nearNonce_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetConnection_protocol_get, ::avmshell::NetConnectionObject::AS3_protocol_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetConnection_unconnectedPeerStreams_get, ::avmshell::NetConnectionObject::AS3_unconnectedPeerStreams_get)
		//new adds end

		//Class SoundChannel
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_media_SoundChannel_leftPeak_get, ::avmshell::SoundChannelObject::AS3_leftPeak_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_media_SoundChannel_position_get, ::avmshell::SoundChannelObject::AS3_position_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_media_SoundChannel_rightPeak_get, ::avmshell::SoundChannelObject::AS3_rightPeak_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_SoundChannel_soundTransform_get, ::avmshell::SoundChannelObject::AS3_soundTransform_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_media_SoundChannel_soundTransform_set, ::avmshell::SoundChannelObject::AS3_soundTransform_set)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_media_SoundChannel_stop, ::avmshell::SoundChannelObject::AS3_stop)

		//Class StyleSheet
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_StyleSheet_styleNames_get, ::avmshell::StyleSheetObject::AS3_styleNames_get)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_text_StyleSheet_StyleSheet, ::avmshell::StyleSheetObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_text_StyleSheet_clear, ::avmshell::StyleSheetObject::AS3_clear)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_text_StyleSheet_getStyle, ::avmshell::StyleSheetObject::AS3_getStyle)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_StyleSheet_parseCSS, ::avmshell::StyleSheetObject::AS3_parseCSS)
		AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_text_StyleSheet_setStyle, ::avmshell::StyleSheetObject::AS3_setStyle)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_text_StyleSheet_transform, ::avmshell::StyleSheetObject::AS3_transform)

		//Class Microphone
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_Microphone_names_get, ::avmshell::MicrophoneClass::AS3_names_get)
		AVMTHUNK_NATIVE_METHOD_P_I_MICROPHONE(flash_media_Microphone_getMicrophone, ::avmshell::MicrophoneClass::AS3_getMicrophone)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_media_Microphone_activityLevel_get, ::avmshell::MicrophoneObject::AS3_activityLevel_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_media_Microphone_gain_get, ::avmshell::MicrophoneObject::AS3_gain_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_media_Microphone_gain_set, ::avmshell::MicrophoneObject::AS3_gain_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_Microphone_index_get, ::avmshell::MicrophoneObject::AS3_index_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_media_Microphone_muted_get, ::avmshell::MicrophoneObject::AS3_muted_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_Microphone_name_get, ::avmshell::MicrophoneObject::AS3_name_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_Microphone_rate_get, ::avmshell::MicrophoneObject::AS3_rate_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_media_Microphone_rate_set, ::avmshell::MicrophoneObject::AS3_rate_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_media_Microphone_silenceLevel_get, ::avmshell::MicrophoneObject::AS3_silenceLevel_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_Microphone_silenceTimeout_get, ::avmshell::MicrophoneObject::AS3_silenceTimeout_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_Microphone_soundTransform_get, ::avmshell::MicrophoneObject::AS3_soundTransform_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_media_Microphone_soundTransform_set, ::avmshell::MicrophoneObject::AS3_soundTransform_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_media_Microphone_useEchoSuppression_get, ::avmshell::MicrophoneObject::AS3_useEchoSuppression_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_media_Microphone_setLoopBack, ::avmshell::MicrophoneObject::AS3_setLoopBack)
		AVMTHUNK_NATIVE_METHOD_VOID_DI_MICROPHONE(flash_media_Microphone_setSilenceLevel, ::avmshell::MicrophoneObject::AS3_setSilenceLevel)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_media_Microphone_setUseEchoSuppression, ::avmshell::MicrophoneObject::AS3_setUseEchoSuppression)
		
		//new adds
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_Microphone_codec_get, ::avmshell::MicrophoneObject::AS3_codec_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_media_Microphone_codec_set, ::avmshell::MicrophoneObject::AS3_codec_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_media_Microphone_enableVAD_get, ::avmshell::MicrophoneObject::AS3_enableVAD_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_media_Microphone_enableVAD_set, ::avmshell::MicrophoneObject::AS3_enableVAD_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_Microphone_encodeQuality_get, ::avmshell::MicrophoneObject::AS3_encodeQuality_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_media_Microphone_encodeQuality_set, ::avmshell::MicrophoneObject::AS3_encodeQuality_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_Microphone_enhancedOptions_get, ::avmshell::MicrophoneObject::AS3_enhancedOptions_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_media_Microphone_enhancedOptions_set, ::avmshell::MicrophoneObject::AS3_enhancedOptions_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_Microphone_framesPerPacket_get, ::avmshell::MicrophoneObject::AS3_framesPerPacket_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_media_Microphone_framesPerPacket_set, ::avmshell::MicrophoneObject::AS3_framesPerPacket_set)
//		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_media_Microphone_isSupported_get, ::avmshell::MicrophoneObject::AS3_isSupported_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_Microphone_noiseSuppressionLevel_get, ::avmshell::MicrophoneObject::AS3_noiseSuppressionLevel_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_media_Microphone_noiseSuppressionLevel_set, ::avmshell::MicrophoneObject::AS3_noiseSuppressionLevel_set)

		AVMTHUNK_NATIVE_METHOD_P_I_MICROPHONE(flash_media_Microphone_getEnhancedMicrophone, ::avmshell::MicrophoneClass::AS3_getEnhancedMicrophone)
		//new adds end

		//Class NetStream
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_bufferLength_get, ::avmshell::NetStreamObject::AS3_bufferLength_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_bufferTime_get, ::avmshell::NetStreamObject::AS3_bufferTime_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_bufferTime_set, ::avmshell::NetStreamObject::AS3_bufferTime_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_bytesLoaded_get, ::avmshell::NetStreamObject::AS3_bytesLoaded_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_bytesTotal_get, ::avmshell::NetStreamObject::AS3_bytesTotal_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_checkPolicyFile_get, ::avmshell::NetStreamObject::AS3_checkPolicyFile_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_checkPolicyFile_set, ::avmshell::NetStreamObject::AS3_checkPolicyFile_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_client_get, ::avmshell::NetStreamObject::AS3_client_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_client_set, ::avmshell::NetStreamObject::AS3_client_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_currentFPS_get, ::avmshell::NetStreamObject::AS3_currentFPS_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_liveDelay_get, ::avmshell::NetStreamObject::AS3_liveDelay_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_objectEncoding_get, ::avmshell::NetStreamObject::AS3_objectEncoding_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetStream_soundTransform_get, ::avmshell::NetStreamObject::AS3_soundTransform_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_NetStream_soundTransform_set, ::avmshell::NetStreamObject::AS3_soundTransform_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_time_get, ::avmshell::NetStreamObject::AS3_time_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_NetStream, ::avmshell::NetStreamObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_attachAudio, ::avmshell::NetStreamObject::AS3_attachAudio)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_attachCamera, ::avmshell::NetStreamObject::AS3_attachCamera)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_close, ::avmshell::NetStreamObject::AS3_close)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_pause, ::avmshell::NetStreamObject::AS3_pause)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_playN, ::avmshell::NetStreamObject::AS3_play)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_publish, ::avmshell::NetStreamObject::AS3_publish)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_receiveAudio, ::avmshell::NetStreamObject::AS3_receiveAudio)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_receiveVideo, ::avmshell::NetStreamObject::AS3_receiveVideo)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_resume, ::avmshell::NetStreamObject::AS3_resume)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_seek, ::avmshell::NetStreamObject::AS3_seek)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_sendN, ::avmshell::NetStreamObject::AS3_send)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_togglePause, ::avmshell::NetStreamObject::AS3_togglePause)
		//new adds
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_NetStream_audioReliable_get, ::avmshell::NetStreamObject::AS3_audioReliable_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_NetStream_audioReliable_set, ::avmshell::NetStreamObject::AS3_audioReliable_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_NetStream_audioSampleAccess_get, ::avmshell::NetStreamObject::AS3_audioSampleAccess_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_NetStream_audioSampleAccess_set, ::avmshell::NetStreamObject::AS3_audioSampleAccess_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStream_backBufferLength_get, ::avmshell::NetStreamObject::AS3_backBufferLength_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStream_backBufferTime_get, ::avmshell::NetStreamObject::AS3_backBufferTime_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_net_NetStream_backBufferTime_set, ::avmshell::NetStreamObject::AS3_backBufferTime_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStream_bufferTimeMax_get, ::avmshell::NetStreamObject::AS3_bufferTimeMax_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_net_NetStream_bufferTimeMax_set, ::avmshell::NetStreamObject::AS3_bufferTimeMax_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_NetStream_dataReliable_get, ::avmshell::NetStreamObject::AS3_dataReliable_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_NetStream_dataReliable_set, ::avmshell::NetStreamObject::AS3_dataReliable_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetStream_farID_get, ::avmshell::NetStreamObject::AS3_farID_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetStream_farNonce_get, ::avmshell::NetStreamObject::AS3_farNonce_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_NetStream_inBufferSeek_get, ::avmshell::NetStreamObject::AS3_inBufferSeek_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_NetStream_inBufferSeek_set, ::avmshell::NetStreamObject::AS3_inBufferSeek_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetStream_info_get, ::avmshell::NetStreamObject::AS3_info_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStream_maxPauseBufferTime_get, ::avmshell::NetStreamObject::AS3_maxPauseBufferTime_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_net_NetStream_maxPauseBufferTime_set, ::avmshell::NetStreamObject::AS3_maxPauseBufferTime_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_NetStream_multicastAvailabilitySendToAll_get, ::avmshell::NetStreamObject::AS3_multicastAvailabilitySendToAll_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_NetStream_multicastAvailabilitySendToAll_set, ::avmshell::NetStreamObject::AS3_multicastAvailabilitySendToAll_set)

		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStream_multicastAvailabilityUpdatePeriod_get, ::avmshell::NetStreamObject::AS3_multicastAvailabilityUpdatePeriod_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_net_NetStream_multicastAvailabilityUpdatePeriod_set, ::avmshell::NetStreamObject::AS3_multicastAvailabilityUpdatePeriod_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStream_multicastFetchPeriod_get, ::avmshell::NetStreamObject::AS3_multicastFetchPeriod_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_net_NetStream_multicastFetchPeriod_set, ::avmshell::NetStreamObject::AS3_multicastFetchPeriod_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetStream_multicastInfo_get, ::avmshell::NetStreamObject::AS3_multicastInfo_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStream_multicastPushNeighborLimit_get, ::avmshell::NetStreamObject::AS3_multicastPushNeighborLimit_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_net_NetStream_multicastPushNeighborLimit_set, ::avmshell::NetStreamObject::AS3_multicastPushNeighborLimit_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStream_multicastRelayMarginDuration_get, ::avmshell::NetStreamObject::AS3_multicastRelayMarginDuration_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_net_NetStream_multicastRelayMarginDuration_set, ::avmshell::NetStreamObject::AS3_multicastRelayMarginDuration_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStream_multicastWindowDuration_get, ::avmshell::NetStreamObject::AS3_multicastWindowDuration_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_net_NetStream_multicastWindowDuration_set, ::avmshell::NetStreamObject::AS3_multicastWindowDuration_set)

		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetStream_nearNonce_get, ::avmshell::NetStreamObject::AS3_nearNonce_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetStream_peerStreams_get, ::avmshell::NetStreamObject::AS3_peerStreams_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_NetStream_videoReliable_get, ::avmshell::NetStreamObject::AS3_videoReliable_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_NetStream_videoReliable_set, ::avmshell::NetStreamObject::AS3_videoReliable_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_NetStream_videoSampleAccess_get, ::avmshell::NetStreamObject::AS3_videoSampleAccess_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_NetStream_videoSampleAccess_set, ::avmshell::NetStreamObject::AS3_videoSampleAccess_set)

		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_NetStream_appendBytes, ::avmshell::NetStreamObject::AS3_appendBytes)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_net_NetStream_appendBytesAction, ::avmshell::NetStreamObject::AS3_appendBytesAction)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_NetStream_attach, ::avmshell::NetStreamObject::AS3_attach)
		AVMTHUNK_NATIVE_METHOD_B_P(flash_net_NetStream_onPeerConnect, ::avmshell::NetStreamObject::AS3_onPeerConnect)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_NetStream_play2, ::avmshell::NetStreamObject::AS3_play2)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_NetStream_preloadEmbeddedData, ::avmshell::NetStreamObject::AS3_preloadEmbeddedData)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_net_NetStream_receiveVideoFPS, ::avmshell::NetStreamObject::AS3_receiveVideoFPS)

		AVMTHUNK_NATIVE_METHOD_VOID_SSS(flash_net_NetStream_setDRMAuthenticationCredentials, ::avmshell::NetStreamObject::AS3_setDRMAuthenticationCredentials)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_net_NetStream_step, ::avmshell::NetStreamObject::AS3_step)

		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_NetStream_resetDRMVouchers, ::avmshell::NetStreamClass::AS3_resetDRMVouchers)
		//new adds end

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_NetStream_useHardwareDecoder_get, ::avmshell::NetStreamObject::AS3_useHardwareDecoder_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_NetStream_useHardwareDecoder_set, ::avmshell::NetStreamObject::AS3_useHardwareDecoder_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_NetStream_useJitterBuffer_get, ::avmshell::NetStreamObject::AS3_useJitterBuffer_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_NetStream_useJitterBuffer_set, ::avmshell::NetStreamObject::AS3_useJitterBuffer_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetStream_videoStreamSettings_get, ::avmshell::NetStreamObject::AS3_videoStreamSettings_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_NetStream_videoStreamSettings_set, ::avmshell::NetStreamObject::AS3_videoStreamSettings_set)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_NetStream_dispose, ::avmshell::NetStreamObject::AS3_dispose)
		//new adds 11 end


		//Class Camera
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_Camera_names_get, ::avmshell::CameraClass::AS3_names_get)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_media_Camera_getCamera, ::avmshell::CameraClass::AS3_getCamera)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_media_Camera_activityLevel_get, ::avmshell::CameraObject::AS3_activityLevel_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_Camera_bandwidth_get, ::avmshell::CameraObject::AS3_bandwidth_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_media_Camera_currentFPS_get, ::avmshell::CameraObject::AS3_currentFPS_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_media_Camera_fps_get, ::avmshell::CameraObject::AS3_fps_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_Camera_height_get, ::avmshell::CameraObject::AS3_height_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_Camera_index_get, ::avmshell::CameraObject::AS3_index_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_Camera_keyFrameInterval_get, ::avmshell::CameraObject::AS3_keyFrameInterval_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_media_Camera_loopback_get, ::avmshell::CameraObject::AS3_loopback_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_Camera_motionLevel_get, ::avmshell::CameraObject::AS3_motionLevel_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_Camera_motionTimeout_get, ::avmshell::CameraObject::AS3_motionTimeout_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_media_Camera_muted_get, ::avmshell::CameraObject::AS3_muted_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_Camera_name_get, ::avmshell::CameraObject::AS3_name_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_Camera_quality_get, ::avmshell::CameraObject::AS3_quality_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_Camera_width_get, ::avmshell::CameraObject::AS3_width_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_media_Camera_setKeyFrameInterval, ::avmshell::CameraObject::AS3_setKeyFrameInterval)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_media_Camera_setLoopback, ::avmshell::CameraObject::AS3_setLoopback)
		AVMTHUNK_NATIVE_METHOD_VOID_IIDB(flash_media_Camera_setMode, ::avmshell::CameraObject::AS3_setMode)
		AVMTHUNK_NATIVE_METHOD_VOID_II(flash_media_Camera_setMotionLevel, ::avmshell::CameraObject::AS3_setMotionLevel)
		AVMTHUNK_NATIVE_METHOD_VOID_II(flash_media_Camera_setQuality, ::avmshell::CameraObject::AS3_setQuality)

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_media_Camera_position_get, ::avmshell::CameraObject::AS3_position_get)
		AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_media_Camera_copyToByteArray, ::avmshell::CameraObject::AS3_copyToByteArray)
		AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_media_Camera_copyToVector, ::avmshell::CameraObject::AS3_copyToVector)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_media_Camera_drawToBitmapData, ::avmshell::CameraObject::AS3_drawToBitmapData)
		//new adds 11 end

		//Class ContextMenuItem
		//AVMTHUNK_NATIVE_METHOD_EX(flash_ui_ContextMenuItem_caption_get, ::avmshell::ContextMenuItemObject::AS3_caption_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_ui_ContextMenuItem_caption_set, ::avmshell::ContextMenuItemObject::AS3_caption_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_ui_ContextMenuItem_enabled_get, ::avmshell::ContextMenuItemObject::AS3_enabled_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_ui_ContextMenuItem_enabled_set, ::avmshell::ContextMenuItemObject::AS3_enabled_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_ui_ContextMenuItem_separatorBefore_get, ::avmshell::ContextMenuItemObject::AS3_separatorBefore_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_ui_ContextMenuItem_separatorBefore_set, ::avmshell::ContextMenuItemObject::AS3_separatorBefore_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_ui_ContextMenuItem_visible_get, ::avmshell::ContextMenuItemObject::AS3_visible_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_ui_ContextMenuItem_visible_set, ::avmshell::ContextMenuItemObject::AS3_visible_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_ui_ContextMenuItem_ContextMenuItem, ::avmshell::ContextMenuItemObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_ui_ContextMenuItem_clone, ::avmshell::ContextMenuItemObject::AS3_clone)
		//new adds
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_ui_ContextMenuItem_systemClearMenuItem, ::avmshell::ContextMenuItemClass::AS3_systemClearMenuItem)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_ui_ContextMenuItem_systemCopyLinkMenuItem, ::avmshell::ContextMenuItemClass::AS3_systemCopyLinkMenuItem)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_ui_ContextMenuItem_systemCopyMenuItem, ::avmshell::ContextMenuItemClass::AS3_systemCopyMenuItem)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_ui_ContextMenuItem_systemCutMenuItem, ::avmshell::ContextMenuItemClass::AS3_systemCutMenuItem)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_ui_ContextMenuItem_systemOpenLinkMenuItem, ::avmshell::ContextMenuItemClass::AS3_systemOpenLinkMenuItem)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_ui_ContextMenuItem_systemPasteMenuItem, ::avmshell::ContextMenuItemClass::AS3_systemPasteMenuItem)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_ui_ContextMenuItem_systemSelectAllMenuItem, ::avmshell::ContextMenuItemClass::AS3_systemSelectAllMenuItem)
		//new adds end

		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_ui_ContextMenuItem_visible_get, ::avmshell::ContextMenuItemObject::AS3_visible_get )
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_ui_ContextMenuItem_visible_set, ::avmshell::ContextMenuItemObject::AS3_visible_set )

		//Class FileReference
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_FileReference_creationDate_get, ::avmshell::FileReferenceObject::AS3_creationDate_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_FileReference_creator_get, ::avmshell::FileReferenceObject::AS3_creator_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_FileReference_modificationDate_get, ::avmshell::FileReferenceObject::AS3_modificationDate_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_FileReference_name_get, ::avmshell::FileReferenceObject::AS3_name_get)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_FileReference_size_get, ::avmshell::FileReferenceObject::AS3_size_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_FileReference_type_get, ::avmshell::FileReferenceObject::AS3_type_get)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_FileReference_FileReference, ::avmshell::FileReferenceObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_B_P(flash_net_FileReference_browse, ::avmshell::FileReferenceObject::AS3_browse)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_FileReference_cancel, ::avmshell::FileReferenceObject::AS3_cancel)
		AVMTHUNK_NATIVE_METHOD_VOID_PS(flash_net_FileReference_download, ::avmshell::FileReferenceObject::AS3_download)
		AVMTHUNK_NATIVE_METHOD_VOID_PSB(flash_net_FileReference_upload, ::avmshell::FileReferenceObject::AS3_upload)
		//new adds
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_FileReference_data_get, ::avmshell::FileReferenceObject::AS3_data_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_FileReference_extension_get, ::avmshell::FileReferenceObject::AS3_extension_get)

		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_FileReference_load, ::avmshell::FileReferenceObject::AS3_load)
		AVMTHUNK_NATIVE_METHOD_VOID_AS(flash_net_FileReference_save, ::avmshell::FileReferenceObject::AS3_save)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_FileReference_uploadUnencoded, ::avmshell::FileReferenceObject::AS3_uploadUnencoded)
		//new adds end

		//Class FileReferenceList
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_FileReferenceList_fileList_get, ::avmshell::FileReferenceListObject::AS3_fileList_get)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_FileReferenceList_FileReferenceList, ::avmshell::FileReferenceListObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_B_P(flash_net_FileReferenceList_browse, ::avmshell::FileReferenceListObject::AS3_browse)

		//Class LoaderInfo
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_display_LoaderInfo_actionScriptVersion_get, ::avmshell::LoaderInfoObject::AS3_actionScriptVersion_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_LoaderInfo_applicationDomain_get, ::avmshell::LoaderInfoObject::AS3_applicationDomain_get)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_display_LoaderInfo_bytesLoaded_get, ::avmshell::LoaderInfoObject::AS3_bytesLoaded_get)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_display_LoaderInfo_bytesTotal_get, ::avmshell::LoaderInfoObject::AS3_bytesTotal_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_LoaderInfo_childAllowsParent_get, ::avmshell::LoaderInfoObject::AS3_childAllowsParent_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_LoaderInfo_content_get, ::avmshell::LoaderInfoObject::AS3_content_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_LoaderInfo_contentType_get, ::avmshell::LoaderInfoObject::AS3_contentType_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_LoaderInfo_frameRate_get, ::avmshell::LoaderInfoObject::AS3_frameRate_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_display_LoaderInfo_height_get, ::avmshell::LoaderInfoObject::AS3_height_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_LoaderInfo_loader_get, ::avmshell::LoaderInfoObject::AS3_loader_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_LoaderInfo_loaderURL_get, ::avmshell::LoaderInfoObject::AS3_loaderURL_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_LoaderInfo_parameters_get, ::avmshell::LoaderInfoObject::AS3_parameters_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_LoaderInfo_parentAllowsChild_get, ::avmshell::LoaderInfoObject::AS3_parentAllowsChild_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_LoaderInfo_sameDomain_get, ::avmshell::LoaderInfoObject::AS3_sameDomain_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_LoaderInfo_sharedEvents_get, ::avmshell::LoaderInfoObject::AS3_sharedEvents_get)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_display_LoaderInfo_swfVersion_get, ::avmshell::LoaderInfoObject::AS3_swfVersion_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_LoaderInfo_url_get, ::avmshell::LoaderInfoObject::AS3_url_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_display_LoaderInfo_width_get, ::avmshell::LoaderInfoObject::AS3_width_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_LoaderInfo_bytes_get, ::avmshell::LoaderInfoObject::AS3_bytes_get)

		//new adds
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_LoaderInfo_bytes_get, ::avmshell::LoaderInfoObject::AS3_bytes_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_LoaderInfo_childSandboxBridge_get, ::avmshell::LoaderInfoObject::AS3_childSandboxBridge_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_LoaderInfo_childSandboxBridge_set, ::avmshell::LoaderInfoObject::AS3_childSandboxBridge_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_LoaderInfo_isURLInaccessible_get, ::avmshell::LoaderInfoObject::AS3_isURLInaccessible_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_LoaderInfo_parentSandboxBridge_get, ::avmshell::LoaderInfoObject::AS3_parentSandboxBridge_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_LoaderInfo_parentSandboxBridge_set, ::avmshell::LoaderInfoObject::AS3_parentSandboxBridge_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_LoaderInfo_uncaughtErrorEvents_get, ::avmshell::LoaderInfoObject::AS3_uncaughtErrorEvents_get)

		AVMTHUNK_NATIVE_METHOD_P_P(flash_display_LoaderInfo_getLoaderInfoByDefinition, ::avmshell::LoaderInfoClass::AS3_getLoaderInfoByDefinition)
		//new adds end

		//Class LocalConnection
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_LocalConnection_client_get, ::avmshell::LocalConnectionObject::AS3_client_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_LocalConnection_client_set, ::avmshell::LocalConnectionObject::AS3_client_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_LocalConnection_domain_get, ::avmshell::LocalConnectionObject::AS3_domain_get)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_LocalConnection_LocalConnection, ::avmshell::LocalConnectionObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_LocalConnection_allowDomainN, ::avmshell::LocalConnectionObject::AS3_allowDomain)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_LocalConnection_allowInsecureDomainN, ::avmshell::LocalConnectionObject::AS3_allowInsecureDomain)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_LocalConnection_close, ::avmshell::LocalConnectionObject::AS3_close)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_LocalConnection_connect, ::avmshell::LocalConnectionObject::AS3_connect)
		AVMTHUNK_NATIVE_METHOD_VOID_PPP(flash_net_LocalConnection_nativeSend, ::avmshell::LocalConnectionObject::AS3_send)
		//new adds
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_LocalConnection_isPerUser_get, ::avmshell::LocalConnectionObject::AS3_isPerUser_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_LocalConnection_isPerUser_set, ::avmshell::LocalConnectionObject::AS3_isPerUser_set)
//		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_LocalConnection_isSupported_get, ::avmshell::LocalConnectionClass::AS3_isSupported_get)
		//new adds end

		//Class PrintJob
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_printing_PrintJob_orientation_get, ::avmshell::PrintJobObject::AS3_orientation_get)
		//AVMTHUNK_NATIVE_METHOD_I_VOID(flash_printing_PrintJob_pageHeight_get, ::avmshell::PrintJobObject::AS3_pageHeight_get)
		//AVMTHUNK_NATIVE_METHOD_I_VOID(flash_printing_PrintJob_pageWidth_get, ::avmshell::PrintJobObject::AS3_pageWidth_get)
		//AVMTHUNK_NATIVE_METHOD_I_VOID(flash_printing_PrintJob_paperHeight_get, ::avmshell::PrintJobObject::AS3_paperHeight_get)
		//AVMTHUNK_NATIVE_METHOD_I_VOID(flash_printing_PrintJob_paperWidth_get, ::avmshell::PrintJobObject::AS3_paperWidth_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_printing_PrintJob_PrintJob, ::avmshell::PrintJobObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_VOID_PPPP(flash_printing_PrintJob_addPage, ::avmshell::PrintJobObject::AS3_addPage)
		//AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_printing_PrintJob_send, ::avmshell::PrintJobObject::AS3_send)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_printing_PrintJob_start, ::avmshell::PrintJobObject::AS3_start)
		//new adds
		AVMTHUNK_NATIVE_METHOD_B_UP(flash_printing_PrintJob_private_invoke, ::avmshell::PrintJobObject::AS3_invoke)
		AVMTHUNK_NATIVE_METHOD_B_AP(flash_printing_PrintJob_private_invoke1, ::avmshell::PrintJobObject::AS3_invoke1)

		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_printing_PrintJob_copies_get, ::avmshell::PrintJobObject::AS3_copies_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_printing_PrintJob_copies_set, ::avmshell::PrintJobObject::AS3_copies_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_printing_PrintJob_firstPage_get, ::avmshell::PrintJobObject::AS3_firstPage_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_printing_PrintJob_isColor_get, ::avmshell::PrintJobObject::AS3_isColor_get)
//		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_printing_PrintJob_isSupported_get, ::avmshell::PrintJobObject::AS3_isSupported_get)

		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_printing_PrintJob_jobName_get, ::avmshell::PrintJobObject::AS3_jobName_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_printing_PrintJob_jobName_set, ::avmshell::PrintJobObject::AS3_jobName_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_printing_PrintJob_lastPage_get, ::avmshell::PrintJobObject::AS3_lastPage_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_printing_PrintJob_maxPixelsPerInch_get, ::avmshell::PrintJobObject::AS3_maxPixelsPerInch_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_printing_PrintJob_paperArea_get, ::avmshell::PrintJobObject::AS3_paperArea_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_printing_PrintJob_printableArea_get, ::avmshell::PrintJobObject::AS3_printableArea_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_printing_PrintJob_printer_get, ::avmshell::PrintJobObject::AS3_printer_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_printing_PrintJob_printer_set, ::avmshell::PrintJobObject::AS3_printer_set)

		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_printing_PrintJob_selectPaperSize, ::avmshell::PrintJobObject::AS3_selectPaperSize)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_printing_PrintJob_showPageSetupDialog, ::avmshell::PrintJobObject::AS3_showPageSetupDialog)
		AVMTHUNK_NATIVE_METHOD_B_PB(flash_printing_PrintJob_start2, ::avmshell::PrintJobObject::AS3_start2)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_printing_PrintJob_terminate, ::avmshell::PrintJobObject::AS3_terminate)

		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_printing_PrintJob_active_get, ::avmshell::PrintJobClass::AS3_active_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_printing_PrintJob_printers_get, ::avmshell::PrintJobClass::AS3_printers_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_printing_PrintJob_supportsPageSetupDialog_get, ::avmshell::PrintJobClass::AS3_supportsPageSetupDialog_get)
		//new adds end

		//Class SharedObject
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_SharedObject_defaultObjectEncoding_get, ::avmshell::SharedObjectClass::AS3_defaultObjectEncoding_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_net_SharedObject_defaultObjectEncoding_set, ::avmshell::SharedObjectClass::AS3_defaultObjectEncoding_set)
		AVMTHUNK_NATIVE_METHOD_P_PPB(flash_net_SharedObject_getLocal, ::avmshell::SharedObjectClass::AS3_getLocal)
		AVMTHUNK_NATIVE_METHOD_P_PPPB(flash_net_SharedObject_getRemote, ::avmshell::SharedObjectClass::AS3_getRemote)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_SharedObject_client_get, ::avmshell::SharedObjectObject::AS3_client_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_SharedObject_client_set, ::avmshell::SharedObjectObject::AS3_client_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_SharedObject_data_get, ::avmshell::SharedObjectObject::AS3_data_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_net_SharedObject_fps_set, ::avmshell::SharedObjectObject::AS3_fps_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_SharedObject_objectEncoding_get, ::avmshell::SharedObjectObject::AS3_objectEncoding_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_net_SharedObject_objectEncoding_set, ::avmshell::SharedObjectObject::AS3_objectEncoding_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_SharedObject_size_get, ::avmshell::SharedObjectObject::AS3_size_get)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_SharedObject_clear, ::avmshell::SharedObjectObject::AS3_clear)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_SharedObject_close, ::avmshell::SharedObjectObject::AS3_close)
		AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_net_SharedObject_connect, ::avmshell::SharedObjectObject::AS3_connect)
		AVMTHUNK_NATIVE_METHOD_P_I(flash_net_SharedObject_flush, ::avmshell::SharedObjectObject::AS3_flush)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_SharedObject_nativeSend, ::avmshell::SharedObjectObject::AS3_send)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_SharedObject_setDirty, ::avmshell::SharedObjectObject::AS3_setDirty)
		AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_net_SharedObject_setProperty, ::avmshell::SharedObjectObject::AS3_setProperty)

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_SharedObject_preventBackup_get, ::avmshell::SharedObjectClass::AS3_preventBackup_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_SharedObject_preventBackup_set, ::avmshell::SharedObjectClass::AS3_preventBackup_set)
		//new adds 11 end

		//Class Socket
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_Socket_bytesAvailable_get, ::avmshell::SocketObject::AS3_bytesAvailable_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_Socket_connected_get, ::avmshell::SocketObject::AS3_connected_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_Socket_endian_get, ::avmshell::SocketObject::AS3_endian_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_net_Socket_endian_set, ::avmshell::SocketObject::AS3_endian_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_Socket_objectEncoding_get, ::avmshell::SocketObject::AS3_objectEncoding_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_net_Socket_objectEncoding_set, ::avmshell::SocketObject::AS3_objectEncoding_set)
		AVMTHUNK_NATIVE_METHOD_VOID_SI(flash_net_Socket_Socket, ::avmshell::SocketObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_Socket_close, ::avmshell::SocketObject::AS3_close)
		AVMTHUNK_NATIVE_METHOD_VOID_SI(flash_net_Socket_connect, ::avmshell::SocketObject::AS3_connect)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_Socket_flush, ::avmshell::SocketObject::AS3_flush)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_Socket_readBoolean, ::avmshell::SocketObject::AS3_readBoolean)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_net_Socket_readByte, ::avmshell::SocketObject::AS3_readByte)
		AVMTHUNK_NATIVE_METHOD_VOID_PUU(flash_net_Socket_readBytes, ::avmshell::SocketObject::AS3_readBytes)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_Socket_readDouble, ::avmshell::SocketObject::AS3_readDouble)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_Socket_readFloat, ::avmshell::SocketObject::AS3_readFloat)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_net_Socket_readInt, ::avmshell::SocketObject::AS3_readInt)
		AVMTHUNK_NATIVE_METHOD_P_US(flash_net_Socket_readMultiByte, ::avmshell::SocketObject::AS3_readMultiByte)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_Socket_readObject, ::avmshell::SocketObject::AS3_readObject)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_net_Socket_readShort, ::avmshell::SocketObject::AS3_readShort)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_Socket_readUnsignedByte, ::avmshell::SocketObject::AS3_readUnsignedByte)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_Socket_readUnsignedInt, ::avmshell::SocketObject::AS3_readUnsignedInt)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_Socket_readUnsignedShort, ::avmshell::SocketObject::AS3_readUnsignedShort)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_Socket_readUTF, ::avmshell::SocketObject::AS3_readUTF)
		AVMTHUNK_NATIVE_METHOD_P_U(flash_net_Socket_readUTFBytes, ::avmshell::SocketObject::AS3_readUTFBytes)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_Socket_writeBoolean, ::avmshell::SocketObject::AS3_writeBoolean)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_net_Socket_writeByte, ::avmshell::SocketObject::AS3_writeByte)
		AVMTHUNK_NATIVE_METHOD_VOID_PUU(flash_net_Socket_writeBytes, ::avmshell::SocketObject::AS3_writeBytes)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_net_Socket_writeDouble, ::avmshell::SocketObject::AS3_writeDouble)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_net_Socket_writeFloat, ::avmshell::SocketObject::AS3_writeFloat)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_net_Socket_writeInt, ::avmshell::SocketObject::AS3_writeInt)
		AVMTHUNK_NATIVE_METHOD_VOID_SS(flash_net_Socket_writeMultiByte, ::avmshell::SocketObject::AS3_writeMultiByte)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_Socket_writeObject, ::avmshell::SocketObject::AS3_writeObject)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_net_Socket_writeShort, ::avmshell::SocketObject::AS3_writeShort)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_net_Socket_writeUnsignedInt, ::avmshell::SocketObject::AS3_writeUnsignedInt)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_net_Socket_writeUTF, ::avmshell::SocketObject::AS3_writeUTF)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_net_Socket_writeUTFBytes, ::avmshell::SocketObject::AS3_writeUTFBytes)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_Socket_timeout_get, ::avmshell::SocketObject::AS3_timeout_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_net_Socket_timeout_set, ::avmshell::SocketObject::AS3_timeout_set)
		//new adds
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_Socket_localAddress_get, ::avmshell::SocketObject::AS3_localAddress_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_net_Socket_localPort_get, ::avmshell::SocketObject::AS3_localPort_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_Socket_remoteAddress_get, ::avmshell::SocketObject::AS3_remoteAddress_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_net_Socket_remotePort_get, ::avmshell::SocketObject::AS3_remotePort_get)
		//AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_Socket_timeout_get, ::avmshell::SocketObject::AS3_timeout_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_U(flash_net_Socket_timeout_set, ::avmshell::SocketObject::AS3_timeout_set)
		//new adds end

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_Socket_bytesPending_get, ::avmshell::SocketObject::AS3_bytesPending_get)
		//new adds 11 end

		//Class Sound
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_media_Sound_bytesLoaded_get, ::avmshell::SoundObject::AS3_bytesLoaded_get)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_media_Sound_bytesTotal_get, ::avmshell::SoundObject::AS3_bytesTotal_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_Sound_id3_get, ::avmshell::SoundObject::AS3_id3_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_media_Sound_isBuffering_get, ::avmshell::SoundObject::AS3_isBuffering_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_media_Sound_length_get, ::avmshell::SoundObject::AS3_length_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_Sound_url_get, ::avmshell::SoundObject::AS3_url_get)
		AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_media_Sound_Sound, ::avmshell::SoundObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_media_Sound_close, ::avmshell::SoundObject::AS3_close)
		AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_media_Sound_load, ::avmshell::SoundObject::AS3_load)
		AVMTHUNK_NATIVE_METHOD_P_DIP(flash_media_Sound_play, ::avmshell::SoundObject::AS3_play)
		//new adds
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_media_Sound_isURLInaccessible_get, ::avmshell::SoundObject::AS3_isURLInaccessible_get)
		AVMTHUNK_NATIVE_METHOD_D_PDD_SOUND(flash_media_Sound_extract, ::avmshell::SoundObject::AS3_extract)
		//new adds end

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_VOID_PU(flash_media_Sound_loadCompressedDataFromByteArray, ::avmshell::SoundObject::AS3_loadCompressedDataFromByteArray)
		AVMTHUNK_NATIVE_METHOD_VOID_PUSBD(flash_media_Sound_loadPCMFromByteArray, ::avmshell::SoundObject::AS3_loadPCMFromByteArray)
		//new adds 11 end

		//Class Timer
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_utils_Timer_currentCount_get, ::avmshell::TimerObject::AS3_currentCount_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_utils_Timer_delay_get, ::avmshell::TimerObject::AS3_delay_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_utils_Timer_delay_set, ::avmshell::TimerObject::AS3_delay_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_utils_Timer_repeatCount_get, ::avmshell::TimerObject::AS3_repeatCount_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_utils_Timer_repeatCount_set, ::avmshell::TimerObject::AS3_repeatCount_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_utils_Timer_running_get, ::avmshell::TimerObject::AS3_running_get)
		AVMTHUNK_NATIVE_METHOD_VOID_DI(flash_utils_Timer_Timer, ::avmshell::TimerObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_utils_Timer_reset, ::avmshell::TimerObject::AS3_reset)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_utils_Timer_start, ::avmshell::TimerObject::AS3_start)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_utils_Timer_stop, ::avmshell::TimerObject::AS3_stop)

		//Class URLLoader
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_URLLoader_bytesLoaded_get, ::avmshell::URLLoaderObject::AS3_bytesLoaded_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_net_URLLoader_bytesLoaded_set, ::avmshell::URLLoaderObject::AS3_bytesLoaded_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_URLLoader_bytesTotal_get, ::avmshell::URLLoaderObject::AS3_bytesTotal_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_net_URLLoader_bytesTotal_set, ::avmshell::URLLoaderObject::AS3_bytesTotal_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_URLLoader_data_get, ::avmshell::URLLoaderObject::AS3_data_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_URLLoader_data_set, ::avmshell::URLLoaderObject::AS3_data_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_URLLoader_dataFormat_get, ::avmshell::URLLoaderObject::AS3_dataFormat_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_URLLoader_dataFormat_set, ::avmshell::URLLoaderObject::AS3_dataFormat_set)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_URLLoader_URLLoader, ::avmshell::URLLoaderObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_URLLoader_close, ::avmshell::URLLoaderObject::AS3_close)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_URLLoader_load, ::avmshell::URLLoaderObject::AS3_load)

		//Class URLStream
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_URLStream_bytesAvailable_get, ::avmshell::URLStreamObject::AS3_bytesAvailable_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_URLStream_connected_get, ::avmshell::URLStreamObject::AS3_connected_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_URLStream_endian_get, ::avmshell::URLStreamObject::AS3_endian_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_URLStream_endian_set, ::avmshell::URLStreamObject::AS3_endian_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_URLStream_objectEncoding_get, ::avmshell::URLStreamObject::AS3_objectEncoding_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_net_URLStream_objectEncoding_set, ::avmshell::URLStreamObject::AS3_objectEncoding_set)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_URLStream_close, ::avmshell::URLStreamObject::AS3_close)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_URLStream_load, ::avmshell::URLStreamObject::AS3_load)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_URLStream_readBoolean, ::avmshell::URLStreamObject::AS3_readBoolean)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_net_URLStream_readByte, ::avmshell::URLStreamObject::AS3_readByte)
		AVMTHUNK_NATIVE_METHOD_VOID_PUU(flash_net_URLStream_readBytes, ::avmshell::URLStreamObject::AS3_readBytes)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_URLStream_readDouble, ::avmshell::URLStreamObject::AS3_readDouble)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_URLStream_readFloat, ::avmshell::URLStreamObject::AS3_readFloat)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_net_URLStream_readInt, ::avmshell::URLStreamObject::AS3_readInt)
		AVMTHUNK_NATIVE_METHOD_P_PP(flash_net_URLStream_readMultiByte, ::avmshell::URLStreamObject::AS3_readMultiByte)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_URLStream_readObject, ::avmshell::URLStreamObject::AS3_readObject)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_net_URLStream_readShort, ::avmshell::URLStreamObject::AS3_readShort)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_URLStream_readUnsignedByte, ::avmshell::URLStreamObject::AS3_readUnsignedByte)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_URLStream_readUnsignedInt, ::avmshell::URLStreamObject::AS3_readUnsignedInt)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_URLStream_readUnsignedShort, ::avmshell::URLStreamObject::AS3_readUnsignedShort)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_URLStream_readUTF, ::avmshell::URLStreamObject::AS3_readUTF)
		AVMTHUNK_NATIVE_METHOD_P_I(flash_net_URLStream_readUTFBytes, ::avmshell::URLStreamObject::AS3_readUTFBytes)

		//Class XMLSocket
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_XMLSocket_connected_get, ::avmshell::XMLSocketObject::AS3_connected_get)
		AVMTHUNK_NATIVE_METHOD_VOID_PI(flash_net_XMLSocket_XMLSocket, ::avmshell::XMLSocketObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_XMLSocket_close, ::avmshell::XMLSocketObject::AS3_close)
		AVMTHUNK_NATIVE_METHOD_VOID_PI(flash_net_XMLSocket_connect, ::avmshell::XMLSocketObject::AS3_connect)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_XMLSocket_send, ::avmshell::XMLSocketObject::AS3_send)
		//new adds
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_net_XMLSocket_timeout_get, ::avmshell::XMLSocketObject::AS3_timeout_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_net_XMLSocket_timeout_set, ::avmshell::XMLSocketObject::AS3_timeout_set)
		//new adds end

		//Class BlurFilter
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BlurFilter_blurX_get, ::avmshell::BlurFilterObject::AS3_blurX_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BlurFilter_blurX_set, ::avmshell::BlurFilterObject::AS3_blurX_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BlurFilter_blurY_get, ::avmshell::BlurFilterObject::AS3_blurY_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BlurFilter_blurY_set, ::avmshell::BlurFilterObject::AS3_blurY_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BlurFilter_quality_get, ::avmshell::BlurFilterObject::AS3_quality_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BlurFilter_quality_set, ::avmshell::BlurFilterObject::AS3_quality_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BlurFilter_BlurFilter, ::avmshell::BlurFilterObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BlurFilter_clone, ::avmshell::BlurFilterObject::AS3_clone)

		//Class BevelFilter
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_angle_get, ::avmshell::BevelFilterObject::AS3_angle_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_angle_set, ::avmshell::BevelFilterObject::AS3_angle_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_blurX_get, ::avmshell::BevelFilterObject::AS3_blurX_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_blurX_set, ::avmshell::BevelFilterObject::AS3_blurX_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_blurY_get, ::avmshell::BevelFilterObject::AS3_blurY_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_blurY_set, ::avmshell::BevelFilterObject::AS3_blurY_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_distance_get, ::avmshell::BevelFilterObject::AS3_distance_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_distance_set, ::avmshell::BevelFilterObject::AS3_distance_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_highlightAlpha_get, ::avmshell::BevelFilterObject::AS3_highlightAlpha_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_highlightAlpha_set, ::avmshell::BevelFilterObject::AS3_highlightAlpha_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_highlightColor_get, ::avmshell::BevelFilterObject::AS3_highlightColor_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_highlightColor_set, ::avmshell::BevelFilterObject::AS3_highlightColor_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_knockout_get, ::avmshell::BevelFilterObject::AS3_knockout_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_knockout_set, ::avmshell::BevelFilterObject::AS3_knockout_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_quality_get, ::avmshell::BevelFilterObject::AS3_quality_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_quality_set, ::avmshell::BevelFilterObject::AS3_quality_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_shadowAlpha_get, ::avmshell::BevelFilterObject::AS3_shadowAlpha_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_shadowAlpha_set, ::avmshell::BevelFilterObject::AS3_shadowAlpha_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_shadowColor_get, ::avmshell::BevelFilterObject::AS3_shadowColor_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_shadowColor_set, ::avmshell::BevelFilterObject::AS3_shadowColor_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_strength_get, ::avmshell::BevelFilterObject::AS3_strength_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_strength_set, ::avmshell::BevelFilterObject::AS3_strength_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_type_get, ::avmshell::BevelFilterObject::AS3_type_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_type_set, ::avmshell::BevelFilterObject::AS3_type_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_BevelFilter, ::avmshell::BevelFilterObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_BevelFilter_clone, ::avmshell::BevelFilterObject::AS3_clone)

		//Class ColorMatrixFilter
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_ColorMatrixFilter_matrix_get, ::avmshell::ColorMatrixFilterObject::AS3_matrix_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_ColorMatrixFilter_matrix_set, ::avmshell::ColorMatrixFilterObject::AS3_matrix_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_ColorMatrixFilter_ColorMatrixFilter, ::avmshell::ColorMatrixFilterObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_ColorMatrixFilter_clone, ::avmshell::ColorMatrixFilterObject::AS3_clone)

		//Class ConvolutionFilter
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_ConvolutionFilter_alpha_get, ::avmshell::ConvolutionFilterObject::AS3_alpha_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_ConvolutionFilter_alpha_set, ::avmshell::ConvolutionFilterObject::AS3_alpha_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_ConvolutionFilter_bias_get, ::avmshell::ConvolutionFilterObject::AS3_bias_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_ConvolutionFilter_bias_set, ::avmshell::ConvolutionFilterObject::AS3_bias_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_ConvolutionFilter_clamp_get, ::avmshell::ConvolutionFilterObject::AS3_clamp_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_ConvolutionFilter_clamp_set, ::avmshell::ConvolutionFilterObject::AS3_clamp_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_ConvolutionFilter_color_get, ::avmshell::ConvolutionFilterObject::AS3_color_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_ConvolutionFilter_color_set, ::avmshell::ConvolutionFilterObject::AS3_color_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_ConvolutionFilter_divisor_get, ::avmshell::ConvolutionFilterObject::AS3_divisor_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_ConvolutionFilter_divisor_set, ::avmshell::ConvolutionFilterObject::AS3_divisor_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_ConvolutionFilter_matrix_get, ::avmshell::ConvolutionFilterObject::AS3_matrix_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_ConvolutionFilter_matrix_set, ::avmshell::ConvolutionFilterObject::AS3_matrix_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_ConvolutionFilter_matrixX_get, ::avmshell::ConvolutionFilterObject::AS3_matrixX_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_ConvolutionFilter_matrixX_set, ::avmshell::ConvolutionFilterObject::AS3_matrixX_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_ConvolutionFilter_matrixY_get, ::avmshell::ConvolutionFilterObject::AS3_matrixY_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_ConvolutionFilter_matrixY_set, ::avmshell::ConvolutionFilterObject::AS3_matrixY_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_ConvolutionFilter_preserveAlpha_get, ::avmshell::ConvolutionFilterObject::AS3_preserveAlpha_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_ConvolutionFilter_preserveAlpha_set, ::avmshell::ConvolutionFilterObject::AS3_preserveAlpha_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_ConvolutionFilter_ConvolutionFilter, ::avmshell::ConvolutionFilterObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_ConvolutionFilter_clone, ::avmshell::ConvolutionFilterObject::AS3_clone)

		//Class DisplacementMapFilter
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DisplacementMapFilter_alpha_get, ::avmshell::DisplacementMapFilterObject::AS3_alpha_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DisplacementMapFilter_alpha_set, ::avmshell::DisplacementMapFilterObject::AS3_alpha_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DisplacementMapFilter_color_get, ::avmshell::DisplacementMapFilterObject::AS3_color_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DisplacementMapFilter_color_set, ::avmshell::DisplacementMapFilterObject::AS3_color_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DisplacementMapFilter_componentX_get, ::avmshell::DisplacementMapFilterObject::AS3_componentX_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DisplacementMapFilter_componentX_set, ::avmshell::DisplacementMapFilterObject::AS3_componentX_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DisplacementMapFilter_componentY_get, ::avmshell::DisplacementMapFilterObject::AS3_componentY_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DisplacementMapFilter_componentY_set, ::avmshell::DisplacementMapFilterObject::AS3_componentY_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DisplacementMapFilter_mapBitmap_get, ::avmshell::DisplacementMapFilterObject::AS3_mapBitmap_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DisplacementMapFilter_mapBitmap_set, ::avmshell::DisplacementMapFilterObject::AS3_mapBitmap_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DisplacementMapFilter_mapPoint_get, ::avmshell::DisplacementMapFilterObject::AS3_mapPoint_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DisplacementMapFilter_mapPoint_set, ::avmshell::DisplacementMapFilterObject::AS3_mapPoint_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DisplacementMapFilter_mode_get, ::avmshell::DisplacementMapFilterObject::AS3_mode_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DisplacementMapFilter_mode_set, ::avmshell::DisplacementMapFilterObject::AS3_mode_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DisplacementMapFilter_scaleX_get, ::avmshell::DisplacementMapFilterObject::AS3_scaleX_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DisplacementMapFilter_scaleX_set, ::avmshell::DisplacementMapFilterObject::AS3_scaleX_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DisplacementMapFilter_scaleY_get, ::avmshell::DisplacementMapFilterObject::AS3_scaleY_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DisplacementMapFilter_scaleY_set, ::avmshell::DisplacementMapFilterObject::AS3_scaleY_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DisplacementMapFilter_DisplacementMapFilter, ::avmshell::DisplacementMapFilterObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DisplacementMapFilter_clone, ::avmshell::DisplacementMapFilterObject::AS3_clone)

		//Class DropShadowFilter
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DropShadowFilter_alpha_get, ::avmshell::DropShadowFilterObject::AS3_alpha_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DropShadowFilter_alpha_set, ::avmshell::DropShadowFilterObject::AS3_alpha_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DropShadowFilter_angle_get, ::avmshell::DropShadowFilterObject::AS3_angle_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DropShadowFilter_angle_set, ::avmshell::DropShadowFilterObject::AS3_angle_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DropShadowFilter_blurX_get, ::avmshell::DropShadowFilterObject::AS3_blurX_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DropShadowFilter_blurX_set, ::avmshell::DropShadowFilterObject::AS3_blurX_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DropShadowFilter_blurY_get, ::avmshell::DropShadowFilterObject::AS3_blurY_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DropShadowFilter_blurY_set, ::avmshell::DropShadowFilterObject::AS3_blurY_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DropShadowFilter_color_get, ::avmshell::DropShadowFilterObject::AS3_color_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DropShadowFilter_color_set, ::avmshell::DropShadowFilterObject::AS3_color_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DropShadowFilter_distance_get, ::avmshell::DropShadowFilterObject::AS3_distance_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DropShadowFilter_distance_set, ::avmshell::DropShadowFilterObject::AS3_distance_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DropShadowFilter_hideObject_get, ::avmshell::DropShadowFilterObject::AS3_hideObject_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DropShadowFilter_hideObject_set, ::avmshell::DropShadowFilterObject::AS3_hideObject_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DropShadowFilter_inner_get, ::avmshell::DropShadowFilterObject::AS3_inner_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DropShadowFilter_inner_set, ::avmshell::DropShadowFilterObject::AS3_inner_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DropShadowFilter_knockout_get, ::avmshell::DropShadowFilterObject::AS3_knockout_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DropShadowFilter_knockout_set, ::avmshell::DropShadowFilterObject::AS3_knockout_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DropShadowFilter_quality_get, ::avmshell::DropShadowFilterObject::AS3_quality_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DropShadowFilter_quality_set, ::avmshell::DropShadowFilterObject::AS3_quality_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DropShadowFilter_strength_get, ::avmshell::DropShadowFilterObject::AS3_strength_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DropShadowFilter_strength_set, ::avmshell::DropShadowFilterObject::AS3_strength_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DropShadowFilter_DropShadowFilter, ::avmshell::DropShadowFilterObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_DropShadowFilter_clone, ::avmshell::DropShadowFilterObject::AS3_clone)

		//Class GlowFilter
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GlowFilter_alpha_get, ::avmshell::GlowFilterObject::AS3_alpha_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GlowFilter_alpha_set, ::avmshell::GlowFilterObject::AS3_alpha_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GlowFilter_blurX_get, ::avmshell::GlowFilterObject::AS3_blurX_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GlowFilter_blurX_set, ::avmshell::GlowFilterObject::AS3_blurX_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GlowFilter_blurY_get, ::avmshell::GlowFilterObject::AS3_blurY_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GlowFilter_blurY_set, ::avmshell::GlowFilterObject::AS3_blurY_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GlowFilter_color_get, ::avmshell::GlowFilterObject::AS3_color_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GlowFilter_color_set, ::avmshell::GlowFilterObject::AS3_color_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GlowFilter_inner_get, ::avmshell::GlowFilterObject::AS3_inner_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GlowFilter_inner_set, ::avmshell::GlowFilterObject::AS3_inner_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GlowFilter_knockout_get, ::avmshell::GlowFilterObject::AS3_knockout_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GlowFilter_knockout_set, ::avmshell::GlowFilterObject::AS3_knockout_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GlowFilter_quality_get, ::avmshell::GlowFilterObject::AS3_quality_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GlowFilter_quality_set, ::avmshell::GlowFilterObject::AS3_quality_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GlowFilter_strength_get, ::avmshell::GlowFilterObject::AS3_strength_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GlowFilter_strength_set, ::avmshell::GlowFilterObject::AS3_strength_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GlowFilter_GlowFilter, ::avmshell::GlowFilterObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GlowFilter_clone, ::avmshell::GlowFilterObject::AS3_clone)

		//Class GradientBevelFilter
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientBevelFilter_alphas_get, ::avmshell::GradientBevelFilterObject::AS3_alphas_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientBevelFilter_alphas_set, ::avmshell::GradientBevelFilterObject::AS3_alphas_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientBevelFilter_angle_get, ::avmshell::GradientBevelFilterObject::AS3_angle_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientBevelFilter_angle_set, ::avmshell::GradientBevelFilterObject::AS3_angle_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientBevelFilter_blurX_get, ::avmshell::GradientBevelFilterObject::AS3_blurX_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientBevelFilter_blurX_set, ::avmshell::GradientBevelFilterObject::AS3_blurX_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientBevelFilter_blurY_get, ::avmshell::GradientBevelFilterObject::AS3_blurY_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientBevelFilter_blurY_set, ::avmshell::GradientBevelFilterObject::AS3_blurY_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientBevelFilter_colors_get, ::avmshell::GradientBevelFilterObject::AS3_colors_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientBevelFilter_colors_set, ::avmshell::GradientBevelFilterObject::AS3_colors_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientBevelFilter_distance_get, ::avmshell::GradientBevelFilterObject::AS3_distance_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientBevelFilter_distance_set, ::avmshell::GradientBevelFilterObject::AS3_distance_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientBevelFilter_knockout_get, ::avmshell::GradientBevelFilterObject::AS3_knockout_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientBevelFilter_knockout_set, ::avmshell::GradientBevelFilterObject::AS3_knockout_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientBevelFilter_quality_get, ::avmshell::GradientBevelFilterObject::AS3_quality_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientBevelFilter_quality_set, ::avmshell::GradientBevelFilterObject::AS3_quality_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientBevelFilter_ratios_get, ::avmshell::GradientBevelFilterObject::AS3_ratios_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientBevelFilter_ratios_set, ::avmshell::GradientBevelFilterObject::AS3_ratios_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientBevelFilter_strength_get, ::avmshell::GradientBevelFilterObject::AS3_strength_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientBevelFilter_strength_set, ::avmshell::GradientBevelFilterObject::AS3_strength_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientBevelFilter_type_get, ::avmshell::GradientBevelFilterObject::AS3_type_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientBevelFilter_type_set, ::avmshell::GradientBevelFilterObject::AS3_type_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientBevelFilter_GradientBevelFilter, ::avmshell::GradientBevelFilterObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientBevelFilter_clone, ::avmshell::GradientBevelFilterObject::AS3_clone)

		//Class GradientGlowFilter
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientGlowFilter_alphas_get, ::avmshell::GradientGlowFilterObject::AS3_alphas_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientGlowFilter_alphas_set, ::avmshell::GradientGlowFilterObject::AS3_alphas_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientGlowFilter_angle_get, ::avmshell::GradientGlowFilterObject::AS3_angle_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientGlowFilter_angle_set, ::avmshell::GradientGlowFilterObject::AS3_angle_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientGlowFilter_blurX_get, ::avmshell::GradientGlowFilterObject::AS3_blurX_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientGlowFilter_blurX_set, ::avmshell::GradientGlowFilterObject::AS3_blurX_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientGlowFilter_blurY_get, ::avmshell::GradientGlowFilterObject::AS3_blurY_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientGlowFilter_blurY_set, ::avmshell::GradientGlowFilterObject::AS3_blurY_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientGlowFilter_colors_get, ::avmshell::GradientGlowFilterObject::AS3_colors_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientGlowFilter_colors_set, ::avmshell::GradientGlowFilterObject::AS3_colors_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientGlowFilter_distance_get, ::avmshell::GradientGlowFilterObject::AS3_distance_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientGlowFilter_distance_set, ::avmshell::GradientGlowFilterObject::AS3_distance_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientGlowFilter_knockout_get, ::avmshell::GradientGlowFilterObject::AS3_knockout_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientGlowFilter_knockout_set, ::avmshell::GradientGlowFilterObject::AS3_knockout_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientGlowFilter_quality_get, ::avmshell::GradientGlowFilterObject::AS3_quality_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientGlowFilter_quality_set, ::avmshell::GradientGlowFilterObject::AS3_quality_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientGlowFilter_ratios_get, ::avmshell::GradientGlowFilterObject::AS3_ratios_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientGlowFilter_ratios_set, ::avmshell::GradientGlowFilterObject::AS3_ratios_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientGlowFilter_strength_get, ::avmshell::GradientGlowFilterObject::AS3_strength_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientGlowFilter_strength_set, ::avmshell::GradientGlowFilterObject::AS3_strength_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientGlowFilter_type_get, ::avmshell::GradientGlowFilterObject::AS3_type_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientGlowFilter_type_set, ::avmshell::GradientGlowFilterObject::AS3_type_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientGlowFilter_GradientGlowFilter, ::avmshell::GradientGlowFilterObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_filters_GradientGlowFilter_clone, ::avmshell::GradientGlowFilterObject::AS3_clone)

		//Class XMLDocument
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_xml_XMLDocument_docTypeDecl_get, ::avmshell::XMLDocumentObject::AS3_docTypeDecl_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_xml_XMLDocument_docTypeDecl_set, ::avmshell::XMLDocumentObject::AS3_docTypeDecl_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_xml_XMLDocument_idMap_get, ::avmshell::XMLDocumentObject::AS3_idMap_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_xml_XMLDocument_idMap_set, ::avmshell::XMLDocumentObject::AS3_idMap_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_xml_XMLDocument_ignoreWhite_get, ::avmshell::XMLDocumentObject::AS3_ignoreWhite_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_xml_XMLDocument_ignoreWhite_set, ::avmshell::XMLDocumentObject::AS3_ignoreWhite_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_xml_XMLDocument_xmlDecl_get, ::avmshell::XMLDocumentObject::AS3_xmlDecl_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_xml_XMLDocument_xmlDecl_set, ::avmshell::XMLDocumentObject::AS3_xmlDecl_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_xml_XMLDocument_XMLDocument, ::avmshell::XMLDocumentObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_xml_XMLDocument_createElement, ::avmshell::XMLDocumentObject::AS3_createElement)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_xml_XMLDocument_createTextNode, ::avmshell::XMLDocumentObject::AS3_createTextNode)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_xml_XMLDocument_parseXML, ::avmshell::XMLDocumentObject::AS3_parseXML)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_xml_XMLDocument_toString, ::avmshell::XMLDocumentObject::AS3_toString)

		//Class EOFError
		//AVMTHUNK_NATIVE_METHOD_EX(flash_errors_EOFError_EOFError, ::avmshell::EOFErrorObject::AS3_constructor)

		//Class FullScreenEvent
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_FullScreenEvent_fullScreen_get, ::avmshell::FullScreenEventObject::AS3_fullScreen_get)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBBB(flash_events_FullScreenEvent_FullScreenEvent, ::avmshell::FullScreenEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_FullScreenEvent_clone, ::avmshell::FullScreenEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_FullScreenEvent_toString, ::avmshell::FullScreenEventObject::AS3_toString)
		//new  adds 11
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_FullScreenEvent_interactive_get, ::avmshell::FullScreenEventObject::AS3_interactive_get)
		//new  adds 11 end

		//Class DataEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DataEvent_data_get, ::avmshell::DataEventObject::AS3_data_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_DataEvent_data_set, ::avmshell::DataEventObject::AS3_data_set)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBS(flash_events_DataEvent_DataEvent, ::avmshell::DataEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DataEvent_clone, ::avmshell::DataEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DataEvent_toString, ::avmshell::DataEventObject::AS3_toString)

		//Class ErrorEvent Stringp type, bool bBubbles, bool bCancelable, Stringp pText
		AVMTHUNK_NATIVE_METHOD_VOID_SBBP(flash_events_ErrorEvent_ErrorEvent, ::avmshell::ErrorEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_ErrorEvent_clone, ::avmshell::ErrorEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_ErrorEvent_toString, ::avmshell::ErrorEventObject::AS3_toString)
		
		//new adds
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_events_ErrorEvent_errorID_get, ::avmshell::ErrorEventObject::AS3_errorID_get)
		//new adds end

		//Class IMEEvent
		AVMTHUNK_NATIVE_METHOD_VOID_SBBS(flash_events_IMEEvent_IMEEvent, ::avmshell::IMEEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_IMEEvent_clone, ::avmshell::IMEEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_IMEEvent_toString, ::avmshell::IMEEventObject::AS3_toString)
		
		//new adds
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_IMEEvent_imeClient_get, ::avmshell::IMEEventObject::AS3_imeClient_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_IMEEvent_imeClient_set, ::avmshell::IMEEventObject::AS3_imeClient_set)
		//new adds end

		//Class InteractiveObject
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_InteractiveObject_contextMenu_get, ::avmshell::InteractiveObjectObject::AS3_contextMenu_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_InteractiveObject_contextMenu_set, ::avmshell::InteractiveObjectObject::AS3_contextMenu_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_InteractiveObject_doubleClickEnabled_get, ::avmshell::InteractiveObjectObject::AS3_doubleClickEnabled_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_InteractiveObject_doubleClickEnabled_set, ::avmshell::InteractiveObjectObject::AS3_doubleClickEnabled_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_InteractiveObject_focusRect_get, ::avmshell::InteractiveObjectObject::AS3_focusRect_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_InteractiveObject_focusRect_set, ::avmshell::InteractiveObjectObject::AS3_focusRect_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_InteractiveObject_mouseEnabled_get, ::avmshell::InteractiveObjectObject::AS3_mouseEnabled_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_InteractiveObject_mouseEnabled_set, ::avmshell::InteractiveObjectObject::AS3_mouseEnabled_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_InteractiveObject_tabEnabled_get, ::avmshell::InteractiveObjectObject::AS3_tabEnabled_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_InteractiveObject_tabEnabled_set, ::avmshell::InteractiveObjectObject::AS3_tabEnabled_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_display_InteractiveObject_tabIndex_get, ::avmshell::InteractiveObjectObject::AS3_tabIndex_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_display_InteractiveObject_tabIndex_set, ::avmshell::InteractiveObjectObject::AS3_tabIndex_set)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_InteractiveObject_InteractiveObject, ::avmshell::InteractiveObjectObject::AS3_constructor)
		//new adds
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_InteractiveObject_accessibilityImplementation_get, ::avmshell::InteractiveObjectObject::AS3_accessibilityImplementation_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_InteractiveObject_accessibilityImplementation_set, ::avmshell::InteractiveObjectObject::AS3_accessibilityImplementation_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_InteractiveObject_needsSoftKeyboard_get, ::avmshell::InteractiveObjectObject::AS3_needsSoftKeyboard_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_InteractiveObject_needsSoftKeyboard_set, ::avmshell::InteractiveObjectObject::AS3_needsSoftKeyboard_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_InteractiveObject_softKeyboardInputAreaOfInterest_get, ::avmshell::InteractiveObjectObject::AS3_softKeyboardInputAreaOfInterest_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_InteractiveObject_softKeyboardInputAreaOfInterest_set, ::avmshell::InteractiveObjectObject::AS3_softKeyboardInputAreaOfInterest_set)

		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_InteractiveObject_requestSoftKeyboard, ::avmshell::InteractiveObjectObject::AS3_requestSoftKeyboard)
		//new adds end

		//Class Bitmap
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Bitmap_bitmapData_get, ::avmshell::BitmapObject::AS3_bitmapData_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_Bitmap_bitmapData_set, ::avmshell::BitmapObject::AS3_bitmapData_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Bitmap_pixelSnapping_get, ::avmshell::BitmapObject::AS3_pixelSnapping_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_Bitmap_pixelSnapping_set, ::avmshell::BitmapObject::AS3_pixelSnapping_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_Bitmap_smoothing_get, ::avmshell::BitmapObject::AS3_smoothing_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_Bitmap_smoothing_set, ::avmshell::BitmapObject::AS3_smoothing_set)
		AVMTHUNK_NATIVE_METHOD_VOID_PPB(flash_display_Bitmap_Bitmap, ::avmshell::BitmapObject::AS3_constructor)
		//Class Shape
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Shape_graphics_get, ::avmshell::ShapeObject::AS3_graphics_get)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_Shape_Shape, ::avmshell::ShapeObject::AS3_constructor)
		//Class StaticText
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_StaticText_text_get, ::avmshell::StaticTextObject::AS3_text_get)

		//Class Video
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_Video_deblocking_get, ::avmshell::VideoObject::AS3_deblocking_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_media_Video_deblocking_set, ::avmshell::VideoObject::AS3_deblocking_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_media_Video_smoothing_get, ::avmshell::VideoObject::AS3_smoothing_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_media_Video_smoothing_set, ::avmshell::VideoObject::AS3_smoothing_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_Video_videoHeight_get, ::avmshell::VideoObject::AS3_videoHeight_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_Video_videoWidth_get, ::avmshell::VideoObject::AS3_videoWidth_get)
		AVMTHUNK_NATIVE_METHOD_VOID_II(flash_media_Video_Video, ::avmshell::VideoObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_media_Video_attachCamera, ::avmshell::VideoObject::AS3_attachCamera)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_media_Video_attachNetStream, ::avmshell::VideoObject::AS3_attachNetStream)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_media_Video_clear, ::avmshell::VideoObject::AS3_clear)

		//Class AsyncErrorEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_AsyncErrorEvent_error_get, ::avmshell::AsyncErrorEventObject::AS3_error_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_AsyncErrorEvent_error_set, ::avmshell::AsyncErrorEventObject::AS3_error_set)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBSP(flash_events_AsyncErrorEvent_AsyncErrorEvent, ::avmshell::AsyncErrorEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_AsyncErrorEvent_clone, ::avmshell::AsyncErrorEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_AsyncErrorEvent_toString, ::avmshell::AsyncErrorEventObject::AS3_toString)

		//Class IOErrorEvent
		AVMTHUNK_NATIVE_METHOD_VOID_SBBS(flash_events_IOErrorEvent_IOErrorEvent, ::avmshell::IOErrorEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_IOErrorEvent_clone, ::avmshell::IOErrorEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_IOErrorEvent_toString, ::avmshell::IOErrorEventObject::AS3_toString)

		//Class SecurityErrorEvent
		AVMTHUNK_NATIVE_METHOD_VOID_SBBSP(flash_events_SecurityErrorEvent_SecurityErrorEvent, ::avmshell::SecurityErrorEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_SecurityErrorEvent_clone, ::avmshell::SecurityErrorEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_SecurityErrorEvent_toString, ::avmshell::SecurityErrorEventObject::AS3_toString)

		//Class DisplayObjectContainer
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_DisplayObjectContainer_mouseChildren_get, ::avmshell::DisplayObjectContainerObject::AS3_mouseChildren_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_DisplayObjectContainer_mouseChildren_set, ::avmshell::DisplayObjectContainerObject::AS3_mouseChildren_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_display_DisplayObjectContainer_numChildren_get, ::avmshell::DisplayObjectContainerObject::AS3_numChildren_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_DisplayObjectContainer_tabChildren_get, ::avmshell::DisplayObjectContainerObject::AS3_tabChildren_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_DisplayObjectContainer_tabChildren_set, ::avmshell::DisplayObjectContainerObject::AS3_tabChildren_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_DisplayObjectContainer_textSnapshot_get, ::avmshell::DisplayObjectContainerObject::AS3_textSnapshot_get)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_DisplayObjectContainer_DisplayObjectContainer, ::avmshell::DisplayObjectContainerObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_display_DisplayObjectContainer_addChild, ::avmshell::DisplayObjectContainerObject::AS3_addChild)
		//AVMTHUNK_NATIVE_METHOD_P_P(flash_display_DisplayObjectContainer_addChildAt, ::avmshell::DisplayObjectContainerObject::AS3_addChild)
		AVMTHUNK_NATIVE_METHOD_P_PI(flash_display_DisplayObjectContainer_addChildAt, ::avmshell::DisplayObjectContainerObject::AS3_addChildAt)
		AVMTHUNK_NATIVE_METHOD_B_P(flash_display_DisplayObjectContainer_areInaccessibleObjectsUnderPoint, ::avmshell::DisplayObjectContainerObject::AS3_areInaccessibleObjectsUnderPoint)
		AVMTHUNK_NATIVE_METHOD_I_P(flash_display_DisplayObjectContainer_contains, ::avmshell::DisplayObjectContainerObject::AS3_contains)
		AVMTHUNK_NATIVE_METHOD_P_I(flash_display_DisplayObjectContainer_getChildAt, ::avmshell::DisplayObjectContainerObject::AS3_getChildAt)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_display_DisplayObjectContainer_getChildByName, ::avmshell::DisplayObjectContainerObject::AS3_getChildByName)
		AVMTHUNK_NATIVE_METHOD_I_P(flash_display_DisplayObjectContainer_getChildIndex, ::avmshell::DisplayObjectContainerObject::AS3_getChildIndex)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_display_DisplayObjectContainer_getObjectsUnderPoint, ::avmshell::DisplayObjectContainerObject::AS3_getObjectsUnderPoint)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_display_DisplayObjectContainer_removeChild, ::avmshell::DisplayObjectContainerObject::AS3_removeChild)
		AVMTHUNK_NATIVE_METHOD_P_I(flash_display_DisplayObjectContainer_removeChildAt, ::avmshell::DisplayObjectContainerObject::AS3_removeChildAt)
		AVMTHUNK_NATIVE_METHOD_VOID_PI(flash_display_DisplayObjectContainer_setChildIndex, ::avmshell::DisplayObjectContainerObject::AS3_setChildIndex)
		AVMTHUNK_NATIVE_METHOD_VOID_PI(flash_display_DisplayObjectContainer_swapChildren, ::avmshell::DisplayObjectContainerObject::AS3_swapChildren)
		AVMTHUNK_NATIVE_METHOD_VOID_PI(flash_display_DisplayObjectContainer_swapChildrenAt, ::avmshell::DisplayObjectContainerObject::AS3_swapChildrenAt)
		//new adds 11
		AVMTHUNK_NATIVE_METHOD_VOID_II(flash_display_DisplayObjectContainer_removeChildren, ::avmshell::DisplayObjectContainerObject::AS3_removeChildren)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_DisplayObjectContainer_stopAllMovieClips, ::avmshell::DisplayObjectContainerObject::AS3_stopAllMovieClips)
		//new adds 11 end

		//Class SimpleButton
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_SimpleButton_downState_get, ::avmshell::SimpleButtonObject::AS3_downState_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_SimpleButton_downState_set, ::avmshell::SimpleButtonObject::AS3_downState_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_SimpleButton_enabled_get, ::avmshell::SimpleButtonObject::AS3_enabled_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_SimpleButton_enabled_set, ::avmshell::SimpleButtonObject::AS3_enabled_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_SimpleButton_hitTestState_get, ::avmshell::SimpleButtonObject::AS3_hitTestState_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_SimpleButton_hitTestState_set, ::avmshell::SimpleButtonObject::AS3_hitTestState_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_SimpleButton_overState_get, ::avmshell::SimpleButtonObject::AS3_overState_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_SimpleButton_overState_set, ::avmshell::SimpleButtonObject::AS3_overState_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_SimpleButton_soundTransform_get, ::avmshell::SimpleButtonObject::AS3_soundTransform_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_SimpleButton_soundTransform_set, ::avmshell::SimpleButtonObject::AS3_soundTransform_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_SimpleButton_trackAsMenu_get, ::avmshell::SimpleButtonObject::AS3_trackAsMenu_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_SimpleButton_trackAsMenu_set, ::avmshell::SimpleButtonObject::AS3_trackAsMenu_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_SimpleButton_upState_get, ::avmshell::SimpleButtonObject::AS3_upState_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_SimpleButton_upState_set, ::avmshell::SimpleButtonObject::AS3_upState_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_SimpleButton_useHandCursor_get, ::avmshell::SimpleButtonObject::AS3_useHandCursor_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_SimpleButton_useHandCursor_set, ::avmshell::SimpleButtonObject::AS3_useHandCursor_set)
		AVMTHUNK_NATIVE_METHOD_VOID_PPPP(flash_display_SimpleButton_SimpleButton, ::avmshell::SimpleButtonObject::AS3_constructor)

		//Class TextField
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_TextField_width_get, ::avmshell::TextFieldObject::AS3_width_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_TextField_height_get, ::avmshell::TextFieldObject::AS3_height_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_TextField_width_set, ::avmshell::TextFieldObject::AS3_width_set)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_TextField_height_set, ::avmshell::TextFieldObject::AS3_height_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_TextField_x_get, ::avmshell::TextFieldObject::AS3_x_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_TextField_y_get, ::avmshell::TextFieldObject::AS3_y_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_TextField_x_set, ::avmshell::TextFieldObject::AS3_x_set)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_TextField_y_set, ::avmshell::TextFieldObject::AS3_y_set)

		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_TextField_alwaysShowSelection_get, ::avmshell::TextFieldObject::AS3_alwaysShowSelection_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_text_TextField_alwaysShowSelection_set, ::avmshell::TextFieldObject::AS3_alwaysShowSelection_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_TextField_antiAliasType_get, ::avmshell::TextFieldObject::AS3_antiAliasType_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_TextField_antiAliasType_set, ::avmshell::TextFieldObject::AS3_antiAliasType_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_TextField_autoSize_get, ::avmshell::TextFieldObject::AS3_autoSize_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_TextField_autoSize_set, ::avmshell::TextFieldObject::AS3_autoSize_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_TextField_background_get, ::avmshell::TextFieldObject::AS3_background_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_text_TextField_background_set, ::avmshell::TextFieldObject::AS3_background_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_text_TextField_backgroundColor_get, ::avmshell::TextFieldObject::AS3_backgroundColor_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_text_TextField_backgroundColor_set, ::avmshell::TextFieldObject::AS3_backgroundColor_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_TextField_border_get, ::avmshell::TextFieldObject::AS3_border_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_text_TextField_border_set, ::avmshell::TextFieldObject::AS3_border_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_text_TextField_borderColor_get, ::avmshell::TextFieldObject::AS3_borderColor_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_text_TextField_borderColor_set, ::avmshell::TextFieldObject::AS3_borderColor_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_text_TextField_bottomScrollV_get, ::avmshell::TextFieldObject::AS3_bottomScrollV_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_text_TextField_caretIndex_get, ::avmshell::TextFieldObject::AS3_caretIndex_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_TextField_condenseWhite_get, ::avmshell::TextFieldObject::AS3_condenseWhite_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_text_TextField_condenseWhite_set, ::avmshell::TextFieldObject::AS3_condenseWhite_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_TextField_defaultTextFormat_get, ::avmshell::TextFieldObject::AS3_defaultTextFormat_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_TextField_defaultTextFormat_set, ::avmshell::TextFieldObject::AS3_defaultTextFormat_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_TextField_displayAsPassword_get, ::avmshell::TextFieldObject::AS3_displayAsPassword_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_text_TextField_displayAsPassword_set, ::avmshell::TextFieldObject::AS3_displayAsPassword_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_TextField_embedFonts_get, ::avmshell::TextFieldObject::AS3_embedFonts_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_text_TextField_embedFonts_set, ::avmshell::TextFieldObject::AS3_embedFonts_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_TextField_gridFitType_get, ::avmshell::TextFieldObject::AS3_gridFitType_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_TextField_gridFitType_set, ::avmshell::TextFieldObject::AS3_gridFitType_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_TextField_htmlText_get, ::avmshell::TextFieldObject::AS3_htmlText_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_TextField_htmlText_set, ::avmshell::TextFieldObject::AS3_htmlText_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_text_TextField_length_get, ::avmshell::TextFieldObject::AS3_length_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_text_TextField_maxChars_get, ::avmshell::TextFieldObject::AS3_maxChars_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_text_TextField_maxChars_set, ::avmshell::TextFieldObject::AS3_maxChars_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_text_TextField_maxScrollH_get, ::avmshell::TextFieldObject::AS3_maxScrollH_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_text_TextField_maxScrollV_get, ::avmshell::TextFieldObject::AS3_maxScrollV_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_TextField_mouseWheelEnabled_get, ::avmshell::TextFieldObject::AS3_mouseWheelEnabled_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_text_TextField_mouseWheelEnabled_set, ::avmshell::TextFieldObject::AS3_mouseWheelEnabled_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_TextField_multiline_get, ::avmshell::TextFieldObject::AS3_multiline_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_text_TextField_multiline_set, ::avmshell::TextFieldObject::AS3_multiline_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_text_TextField_numLines_get, ::avmshell::TextFieldObject::AS3_numLines_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_TextField_restrict_get, ::avmshell::TextFieldObject::AS3_restrict_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_TextField_restrict_set, ::avmshell::TextFieldObject::AS3_restrict_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_text_TextField_scrollH_get, ::avmshell::TextFieldObject::AS3_scrollH_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_text_TextField_scrollH_set, ::avmshell::TextFieldObject::AS3_scrollH_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_text_TextField_scrollV_get, ::avmshell::TextFieldObject::AS3_scrollV_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_text_TextField_scrollV_set, ::avmshell::TextFieldObject::AS3_scrollV_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_TextField_selectable_get, ::avmshell::TextFieldObject::AS3_selectable_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_text_TextField_selectable_set, ::avmshell::TextFieldObject::AS3_selectable_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_text_TextField_selectionBeginIndex_get, ::avmshell::TextFieldObject::AS3_selectionBeginIndex_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_text_TextField_selectionEndIndex_get, ::avmshell::TextFieldObject::AS3_selectionEndIndex_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_TextField_sharpness_get, ::avmshell::TextFieldObject::AS3_sharpness_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_TextField_sharpness_set, ::avmshell::TextFieldObject::AS3_sharpness_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_TextField_styleSheet_get, ::avmshell::TextFieldObject::AS3_styleSheet_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_TextField_styleSheet_set, ::avmshell::TextFieldObject::AS3_styleSheet_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_TextField_text_get, ::avmshell::TextFieldObject::AS3_text_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_TextField_text_set, ::avmshell::TextFieldObject::AS3_text_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_text_TextField_textColor_get, ::avmshell::TextFieldObject::AS3_textColor_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_text_TextField_textColor_set, ::avmshell::TextFieldObject::AS3_textColor_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_TextField_textHeight_get, ::avmshell::TextFieldObject::AS3_textHeight_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_TextField_textWidth_get, ::avmshell::TextFieldObject::AS3_textWidth_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_TextField_thickness_get, ::avmshell::TextFieldObject::AS3_thickness_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_TextField_thickness_set, ::avmshell::TextFieldObject::AS3_thickness_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_TextField_type_get, ::avmshell::TextFieldObject::AS3_type_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_TextField_type_set, ::avmshell::TextFieldObject::AS3_type_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_TextField_useRichTextClipboard_get, ::avmshell::TextFieldObject::AS3_useRichTextClipboard_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_text_TextField_useRichTextClipboard_set, ::avmshell::TextFieldObject::AS3_useRichTextClipboard_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_TextField_wordWrap_get, ::avmshell::TextFieldObject::AS3_wordWrap_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_text_TextField_wordWrap_set, ::avmshell::TextFieldObject::AS3_wordWrap_set)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_text_TextField_TextField, ::avmshell::TextFieldObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_TextField_appendText, ::avmshell::TextFieldObject::AS3_appendText)
		AVMTHUNK_NATIVE_METHOD_P_I(flash_text_TextField_getCharBoundaries, ::avmshell::TextFieldObject::AS3_getCharBoundaries)
		AVMTHUNK_NATIVE_METHOD_I_DD(flash_text_TextField_getCharIndexAtPoint, ::avmshell::TextFieldObject::AS3_getCharIndexAtPoint)
		AVMTHUNK_NATIVE_METHOD_P_I(flash_text_TextField_getFirstCharInParagraph, ::avmshell::TextFieldObject::AS3_getFirstCharInParagraph)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_text_TextField_getImageReference, ::avmshell::TextFieldObject::AS3_getImageReference)
		AVMTHUNK_NATIVE_METHOD_I_DD(flash_text_TextField_getLineIndexAtPoint, ::avmshell::TextFieldObject::AS3_getLineIndexAtPoint)
		AVMTHUNK_NATIVE_METHOD_P_I(flash_text_TextField_getLineIndexOfChar, ::avmshell::TextFieldObject::AS3_getLineIndexOfChar)
		AVMTHUNK_NATIVE_METHOD_P_I(flash_text_TextField_getLineLength, ::avmshell::TextFieldObject::AS3_getLineLength)
		AVMTHUNK_NATIVE_METHOD_I_P(flash_text_TextField_getLineMetrics, ::avmshell::TextFieldObject::AS3_getLineMetrics)
		AVMTHUNK_NATIVE_METHOD_P_I(flash_text_TextField_getLineOffset, ::avmshell::TextFieldObject::AS3_getLineOffset)
		AVMTHUNK_NATIVE_METHOD_I_P(flash_text_TextField_getLineText, ::avmshell::TextFieldObject::AS3_getLineText)
		AVMTHUNK_NATIVE_METHOD_P_I(flash_text_TextField_getParagraphLength, ::avmshell::TextFieldObject::AS3_getParagraphLength)
		AVMTHUNK_NATIVE_METHOD_P_II(flash_text_TextField_getTextFormat, ::avmshell::TextFieldObject::AS3_getTextFormat)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_TextField_replaceSelectedText, ::avmshell::TextFieldObject::AS3_replaceSelectedText)
		AVMTHUNK_NATIVE_METHOD_VOID_III(flash_text_TextField_replaceText, ::avmshell::TextFieldObject::AS3_replaceText)
		AVMTHUNK_NATIVE_METHOD_VOID_II(flash_text_TextField_setSelection, ::avmshell::TextFieldObject::AS3_setSelection)
		AVMTHUNK_NATIVE_METHOD_VOID_PII(flash_text_TextField_setTextFormat, ::avmshell::TextFieldObject::AS3_setTextFormat)
		//new adds
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_TextField_textInteractionMode_get, ::avmshell::TextFieldObject::AS3_textInteractionMode_get)

		AVMTHUNK_NATIVE_METHOD_B_SS(flash_text_TextField_isFontCompatible, ::avmshell::TextFieldClass::AS3_isFontCompatible)
		//new adds end

		//Class Loader
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Loader_root_get, ::avmshell::LoaderObject::AS3_root_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Loader_content_get, ::avmshell::LoaderObject::AS3_content_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Loader_contentLoaderInfo_get, ::avmshell::LoaderObject::AS3_contentLoaderInfo_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Loader_Loader, ::avmshell::LoaderObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_Loader_close, ::avmshell::LoaderObject::AS3_close)
		AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_display_Loader_load, ::avmshell::LoaderObject::AS3_load)
		AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_display_Loader_loadBytes, ::avmshell::LoaderObject::AS3_loadBytes)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_Loader_unload, ::avmshell::LoaderObject::AS3_unload)
		//new adds
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Loader_uncaughtErrorEvents_get, ::avmshell::LoaderObject::AS3_uncaughtErrorEvents_get)

		AVMTHUNK_NATIVE_METHOD_EX(flash_display_Loader_loadFilePromise, ::avmshell::LoaderObject::AS3_loadFilePromise)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_display_Loader_unloadAndStop, ::avmshell::LoaderObject::AS3_unloadAndStop)
		//new adds end

		//Class Sprite
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_Sprite_buttonMode_get, ::avmshell::SpriteObject::AS3_buttonMode_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_Sprite_buttonMode_set, ::avmshell::SpriteObject::AS3_buttonMode_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Sprite_dropTarget_get, ::avmshell::SpriteObject::AS3_dropTarget_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Sprite_graphics_get, ::avmshell::SpriteObject::AS3_graphics_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Sprite_hitArea_get, ::avmshell::SpriteObject::AS3_hitArea_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_Sprite_hitArea_set, ::avmshell::SpriteObject::AS3_hitArea_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Sprite_soundTransform_get, ::avmshell::SpriteObject::AS3_soundTransform_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_Sprite_soundTransform_set, ::avmshell::SpriteObject::AS3_soundTransform_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_Sprite_useHandCursor_get, ::avmshell::SpriteObject::AS3_useHandCursor_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_Sprite_useHandCursor_set, ::avmshell::SpriteObject::AS3_useHandCursor_set)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_Sprite_Sprite, ::avmshell::SpriteObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_BP(flash_display_Sprite_startDrag, ::avmshell::SpriteObject::AS3_startDrag)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_Sprite_stopDrag, ::avmshell::SpriteObject::AS3_stopDrag)
		//new adds
		AVMTHUNK_NATIVE_METHOD_VOID_IBP(flash_display_Sprite_startTouchDrag, ::avmshell::SpriteObject::AS3_startTouchDrag)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_display_Sprite_stopTouchDrag, ::avmshell::SpriteObject::AS3_stopTouchDrag)
		//new adds end

		//Class Stage
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Stage_loaderInfo_get, ::avmshell::StageObject::AS3_loaderinfo_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Stage_root_get, ::avmshell::StageObject::AS3_root_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Stage_align_get, ::avmshell::StageObject::AS3_align_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_Stage_align_set, ::avmshell::StageObject::AS3_align_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Stage_displayState_get, ::avmshell::StageObject::AS3_displayState_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_Stage_displayState_set, ::avmshell::StageObject::AS3_displayState_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Stage_focus_get, ::avmshell::StageObject::AS3_focus_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_Stage_focus_set, ::avmshell::StageObject::AS3_focus_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_Stage_frameRate_get, ::avmshell::StageObject::AS3_frameRate_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_Stage_frameRate_set, ::avmshell::StageObject::AS3_frameRate_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_Stage_height_get, ::avmshell::StageObject::AS3_height_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_Stage_height_set, ::avmshell::StageObject::AS3_height_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_Stage_mouseChildren_get, ::avmshell::StageObject::AS3_mouseChildren_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_Stage_mouseChildren_set, ::avmshell::StageObject::AS3_mouseChildren_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_display_Stage_numChildren_get, ::avmshell::StageObject::AS3_numChildren_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Stage_quality_get, ::avmshell::StageObject::AS3_quality_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_Stage_quality_set, ::avmshell::StageObject::AS3_quality_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Stage_scaleMode_get, ::avmshell::StageObject::AS3_scaleMode_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_Stage_scaleMode_set, ::avmshell::StageObject::AS3_scaleMode_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_Stage_showDefaultContextMenu_get, ::avmshell::StageObject::AS3_showDefaultContextMenu_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_Stage_showDefaultContextMenu_set, ::avmshell::StageObject::AS3_showDefaultContextMenu_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_Stage_stageFocusRect_get, ::avmshell::StageObject::AS3_stageFocusRect_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_Stage_stageFocusRect_set, ::avmshell::StageObject::AS3_stageFocusRect_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_display_Stage_stageHeight_get, ::avmshell::StageObject::AS3_stageHeight_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_display_Stage_stageHeight_set, ::avmshell::StageObject::AS3_stageHeight_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_display_Stage_stageWidth_get, ::avmshell::StageObject::AS3_stageWidth_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_display_Stage_stageWidth_set, ::avmshell::StageObject::AS3_stageWidth_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_Stage_tabChildren_get, ::avmshell::StageObject::AS3_tabChildren_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_Stage_tabChildren_set, ::avmshell::StageObject::AS3_tabChildren_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Stage_textSnapshot_get, ::avmshell::StageObject::AS3_textSnapshot_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_Stage_width_get, ::avmshell::StageObject::AS3_width_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_Stage_width_set, ::avmshell::StageObject::AS3_width_set)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_display_Stage_addChild, ::avmshell::StageObject::AS3_addChild)
		AVMTHUNK_NATIVE_METHOD_P_PI(flash_display_Stage_addChildAt, ::avmshell::StageObject::AS3_addChildAt)
		AVMTHUNK_NATIVE_METHOD_VOID_SPBIB(flash_display_Stage_addEventListener, ::avmshell::StageObject::AS3_addEventListener)
		AVMTHUNK_NATIVE_METHOD_B_P(flash_display_Stage_dispatchEvent, ::avmshell::StageObject::AS3_dispatchEvent)
		AVMTHUNK_NATIVE_METHOD_B_P(flash_display_Stage_hasEventListener, ::avmshell::StageObject::AS3_hasEventListener)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_Stage_invalidate, ::avmshell::StageObject::AS3_invalidate)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_Stage_isFocusInaccessible, ::avmshell::StageObject::AS3_isFocusInaccessible)
		AVMTHUNK_NATIVE_METHOD_P_I(flash_display_Stage_removeChildAt, ::avmshell::StageObject::AS3_removeChildAt)
		AVMTHUNK_NATIVE_METHOD_VOID_PI(flash_display_Stage_setChildIndex, ::avmshell::StageObject::AS3_setChildIndex)
		AVMTHUNK_NATIVE_METHOD_VOID_II(flash_display_Stage_swapChildrenAt, ::avmshell::StageObject::AS3_swapChildrenAt)
		AVMTHUNK_NATIVE_METHOD_B_P(flash_display_Stage_willTrigger, ::avmshell::StageObject::AS3_willTrigger)
		//new adds
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_Stage_allowsFullScreen_get, ::avmshell::StageObject::AS3_allowsFullScreen_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_Stage_autoOrients_get, ::avmshell::StageObject::AS3_autoOrients_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_Stage_autoOrients_set, ::avmshell::StageObject::AS3_autoOrients_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_display_Stage_color_get, ::avmshell::StageObject::AS3_color_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_display_Stage_color_set, ::avmshell::StageObject::AS3_color_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Stage_colorCorrection_get, ::avmshell::StageObject::AS3_colorCorrection_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_display_Stage_colorCorrection_set, ::avmshell::StageObject::AS3_colorCorrection_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Stage_colorCorrectionSupport_get, ::avmshell::StageObject::AS3_colorCorrectionSupport_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Stage_deviceOrientation_get, ::avmshell::StageObject::AS3_deviceOrientation_get)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_display_Stage_fullScreenHeight_get, ::avmshell::StageObject::AS3_fullScreenHeight_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Stage_fullScreenSourceRect_get, ::avmshell::StageObject::AS3_fullScreenSourceRect_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_Stage_fullScreenSourceRect_set, ::avmshell::StageObject::AS3_fullScreenSourceRect_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_display_Stage_fullScreenWidth_get, ::avmshell::StageObject::AS3_fullScreenWidth_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Stage_nativeWindow_get, ::avmshell::StageObject::AS3_nativeWindow_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Stage_orientation_get, ::avmshell::StageObject::AS3_orientation_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Stage_softKeyboardRect_get, ::avmshell::StageObject::AS3_softKeyboardRect_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Stage_stageVideos_get, ::avmshell::StageObject::AS3_stageVideos_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Stage_supportedOrientations_get, ::avmshell::StageObject::AS3_supportedOrientations_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_Stage_wmodeGPU_get, ::avmshell::StageObject::AS3_wmodeGPU_get)

		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_Stage_supportsOrientationChange_get, ::avmshell::StageClass::AS3_supportsOrientationChange_get)

		AVMTHUNK_NATIVE_METHOD_VOID_PS(flash_display_Stage_assignFocus, ::avmshell::StageObject::AS3_assignFocus)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_display_Stage_setAspectRatio, ::avmshell::StageObject::AS3_setAspectRatio)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_display_Stage_setOrientation, ::avmshell::StageObject::AS3_setOrientation)
		//new adds end

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_Stage_allowsFullScreenInteractive_get, ::avmshell::StageObject::AS3_allowsFullScreenInteractive_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Stage_constructor_get, ::avmshell::StageObject::AS3_constructor_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_Stage_constructor_set, ::avmshell::StageObject::AS3_constructor_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_Stage_contentsScaleFactor_get, ::avmshell::StageObject::AS3_contentsScaleFactor_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_Stage_mouseLock_get, ::avmshell::StageObject::AS3_mouseLock_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_Stage_mouseLock_set, ::avmshell::StageObject::AS3_mouseLock_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Stage_stage3Ds_get, ::avmshell::StageObject::AS3_stage3Ds_get)
		//new adds 11 end
		//Class MovieClip
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_display_MovieClip_currentFrame_get, ::avmshell::MovieClipObject::AS3_currentFrame_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_MovieClip_currentLabel_get, ::avmshell::MovieClipObject::AS3_currentLabel_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_MovieClip_currentFrameLabel_get, ::avmshell::MovieClipObject::AS3_currentFrameLabel_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_MovieClip_currentLabels_get, ::avmshell::MovieClipObject::AS3_currentLabels_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_MovieClip_currentScene_get, ::avmshell::MovieClipObject::AS3_currentScene_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_MovieClip_enabled_get, ::avmshell::MovieClipObject::AS3_enabled_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_MovieClip_enabled_set, ::avmshell::MovieClipObject::AS3_enabled_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_display_MovieClip_framesLoaded_get, ::avmshell::MovieClipObject::AS3_framesLoaded_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_MovieClip_scenes_get, ::avmshell::MovieClipObject::AS3_scenes_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_display_MovieClip_totalFrames_get, ::avmshell::MovieClipObject::AS3_totalFrames_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_MovieClip_trackAsMenu_get, ::avmshell::MovieClipObject::AS3_trackAsMenu_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_MovieClip_trackAsMenu_set, ::avmshell::MovieClipObject::AS3_trackAsMenu_set)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_MovieClip_MovieClip, ::avmshell::MovieClipObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_display_MovieClip_gotoAndPlay, ::avmshell::MovieClipObject::AS3_gotoAndPlay)
		AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_display_MovieClip_gotoAndStop, ::avmshell::MovieClipObject::AS3_gotoAndStop)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_MovieClip_nextFrame, ::avmshell::MovieClipObject::AS3_nextFrame)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_MovieClip_nextScene, ::avmshell::MovieClipObject::AS3_nextScene)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_MovieClip_play, ::avmshell::MovieClipObject::AS3_play)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_MovieClip_prevFrame, ::avmshell::MovieClipObject::AS3_prevFrame)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_MovieClip_prevScene, ::avmshell::MovieClipObject::AS3_prevScene)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_MovieClip_stop, ::avmshell::MovieClipObject::AS3_stop)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_MovieClip_nAddFrameScript, ::avmshell::MovieClipObject::AS3_addFrameScript)

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_MovieClip_isPlaying_get, ::avmshell::MovieClipObject::AS3_isPlaying_get)
		//new adds 11 end

		//new adds
		//Class GraphicsBitmapFill
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_GraphicsBitmapFill_bitmapData_get, ::avmshell::GraphicsBitmapFillObject::AS3_bitmapData_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_GraphicsBitmapFill_bitmapData_set, ::avmshell::GraphicsBitmapFillObject::AS3_bitmapData_set)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_GraphicsBitmapFill_matrix_get, ::avmshell::GraphicsBitmapFillObject::AS3_matrix_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_GraphicsBitmapFill_matrix_set, ::avmshell::GraphicsBitmapFillObject::AS3_matrix_set)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_GraphicsBitmapFill_repeat_get, ::avmshell::GraphicsBitmapFillObject::AS3_repeat_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_GraphicsBitmapFill_repeat_set, ::avmshell::GraphicsBitmapFillObject::AS3_repeat_set)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_GraphicsBitmapFill_smooth_get, ::avmshell::GraphicsBitmapFillObject::AS3_smooth_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_GraphicsBitmapFill_smooth_set, ::avmshell::GraphicsBitmapFillObject::AS3_smooth_set)
		//AVMTHUNK_NATIVE_METHOD_VOID_PPBB(flash_display_GraphicsBitmapFill_GraphicsBitmapFill, ::avmshell::GraphicsBitmapFillObject::AS3_constructor)

		//Class GraphicsEndFill
//		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_GraphicsEndFill_GraphicsEndFill, ::avmshell::GraphicsEndFillObject::AS3_constructor)

		//Class GraphicsGradientFill
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_GraphicsGradientFill_alphas_get, ::avmshell::GraphicsGradientFillObject::AS3_alphas_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_GraphicsGradientFill_alphas_set, ::avmshell::GraphicsGradientFillObject::AS3_alphas_set)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_GraphicsGradientFill_colors_get, ::avmshell::GraphicsGradientFillObject::AS3_colors_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_GraphicsGradientFill_colors_set, ::avmshell::GraphicsGradientFillObject::AS3_colors_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_GraphicsGradientFill_focalPointRatio_get, ::avmshell::GraphicsGradientFillObject::AS3_focalPointRatio_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_GraphicsGradientFill_focalPointRatio_set, ::avmshell::GraphicsGradientFillObject::AS3_focalPointRatio_set)

		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_GraphicsGradientFill_interpolationMethod_get, ::avmshell::GraphicsGradientFillObject::AS3_interpolationMethod_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_S(flash_display_GraphicsGradientFill_interpolationMethod_set, ::avmshell::GraphicsGradientFillObject::AS3_interpolationMethod_set)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_GraphicsGradientFill_matrix_get, ::avmshell::GraphicsGradientFillObject::AS3_matrix_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_GraphicsGradientFill_matrix_set, ::avmshell::GraphicsGradientFillObject::AS3_matrix_set)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_GraphicsGradientFill_ratios_get, ::avmshell::GraphicsGradientFillObject::AS3_ratios_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_GraphicsGradientFill_ratios_set, ::avmshell::GraphicsGradientFillObject::AS3_ratios_set)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_GraphicsGradientFill_spreadMethod_get, ::avmshell::GraphicsGradientFillObject::AS3_spreadMethod_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_GraphicsGradientFill_spreadMethod_set, ::avmshell::GraphicsGradientFillObject::AS3_spreadMethod_set)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_GraphicsGradientFill_type_get, ::avmshell::GraphicsGradientFillObject::AS3_type_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_GraphicsGradientFill_type_set, ::avmshell::GraphicsGradientFillObject::AS3_type_set)
		//AVMTHUNK_NATIVE_METHOD_VOID_SPPPPPSD(flash_display_GraphicsGradientFill_GraphicsGradientFill, ::avmshell::GraphicsGradientFillObject::AS3_constructor)

		//Class GraphicsPath
		//AVMTHUNK_NATIVE_METHOD_EX(flash_display_GraphicsPath_commands_get, ::avmshell::GraphicsPathObject::AS3_commands_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_display_GraphicsPath_commands_set, ::avmshell::GraphicsPathObject::AS3_commands_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_display_GraphicsPath_data_get, ::avmshell::GraphicsPathObject::AS3_data_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_display_GraphicsPath_data_set, ::avmshell::GraphicsPathObject::AS3_data_set)

		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_GraphicsPath_winding_get, ::avmshell::GraphicsPathObject::AS3_winding_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_GraphicsPath_winding_set, ::avmshell::GraphicsPathObject::AS3_winding_set)

		//AVMTHUNK_NATIVE_METHOD_EX(flash_display_GraphicsPath_GraphicsPath, ::avmshell::GraphicsPathObject::AS3_constructor)

		//AVMTHUNK_NATIVE_METHOD_VOID_DDDD(flash_display_GraphicsPath_curveTo, ::avmshell::GraphicsPathObject::AS3_curveTo)
		//AVMTHUNK_NATIVE_METHOD_VOID_DD(flash_display_GraphicsPath_lineTo, ::avmshell::GraphicsPathObject::AS3_lineTo)
		//AVMTHUNK_NATIVE_METHOD_VOID_DD(flash_display_GraphicsPath_moveTo, ::avmshell::GraphicsPathObject::AS3_moveTo)
		//AVMTHUNK_NATIVE_METHOD_VOID_DD(flash_display_GraphicsPath_wideLineTo, ::avmshell::GraphicsPathObject::AS3_wideLineTo)
		//AVMTHUNK_NATIVE_METHOD_VOID_DD(flash_display_GraphicsPath_wideMoveTo, ::avmshell::GraphicsPathObject::AS3_wideMoveTo)

		//Class GraphicsShaderFill
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_GraphicsShaderFill_matrix_get, ::avmshell::GraphicsShaderFillObject::AS3_matrix_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_GraphicsShaderFill_matrix_set, ::avmshell::GraphicsShaderFillObject::AS3_matrix_set)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_GraphicsShaderFill_shader_get, ::avmshell::GraphicsShaderFillObject::AS3_shader_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_GraphicsShaderFill_shader_set, ::avmshell::GraphicsShaderFillObject::AS3_shader_set)
		//AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_display_GraphicsShaderFill_GraphicsShaderFill, ::avmshell::GraphicsShaderFillObject::AS3_constructor)

		//Class GraphicsSolidFill
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_GraphicsSolidFill_alpha_get, ::avmshell::GraphicsSolidFillObject::AS3_alpha_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_GraphicsSolidFill_alpha_set, ::avmshell::GraphicsSolidFillObject::AS3_alpha_set)
		//AVMTHUNK_NATIVE_METHOD_U_VOID(flash_display_GraphicsSolidFill_color_get, ::avmshell::GraphicsSolidFillObject::AS3_color_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_U(flash_display_GraphicsSolidFill_color_set, ::avmshell::GraphicsSolidFillObject::AS3_color_set)
		//AVMTHUNK_NATIVE_METHOD_VOID_UD(flash_display_GraphicsSolidFill_GraphicsSolidFill, ::avmshell::GraphicsSolidFillObject::AS3_constructor)

		//Class GraphicsStroke
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_GraphicsStroke_caps_get, ::avmshell::GraphicsStrokeObject::AS3_caps_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_S(flash_display_GraphicsStroke_caps_set, ::avmshell::GraphicsStrokeObject::AS3_caps_set)

		//AVMTHUNK_NATIVE_METHOD_EX(flash_display_GraphicsStroke_fill_get, ::avmshell::GraphicsStrokeObject::AS3_fill_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_display_GraphicsStroke_fill_set, ::avmshell::GraphicsStrokeObject::AS3_fill_set)

		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_GraphicsStroke_joints_get, ::avmshell::GraphicsStrokeObject::AS3_joints_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_S(flash_display_GraphicsStroke_joints_set, ::avmshell::GraphicsStrokeObject::AS3_joints_set)

		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_GraphicsStroke_miterLimit_get, ::avmshell::GraphicsStrokeObject::AS3_miterLimit_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_GraphicsStroke_miterLimit_set, ::avmshell::GraphicsStrokeObject::AS3_miterLimit_set)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_GraphicsStroke_pixelHinting_get, ::avmshell::GraphicsStrokeObject::AS3_pixelHinting_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_GraphicsStroke_pixelHinting_set, ::avmshell::GraphicsStrokeObject::AS3_pixelHinting_set)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_GraphicsStroke_scaleMode_get, ::avmshell::GraphicsStrokeObject::AS3_scaleMode_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_S(flash_display_GraphicsStroke_scaleMode_set, ::avmshell::GraphicsStrokeObject::AS3_scaleMode_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_GraphicsStroke_thickness_get, ::avmshell::GraphicsStrokeObject::AS3_thickness_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_GraphicsStroke_thickness_set, ::avmshell::GraphicsStrokeObject::AS3_thickness_set)

		//AVMTHUNK_NATIVE_METHOD_EX(flash_display_GraphicsStroke_GraphicsStroke, ::avmshell::GraphicsStrokeObject::AS3_constructor)

		//Class GraphicsTrianglePath
		//AVMTHUNK_NATIVE_METHOD_P_VOID(ash_display_GraphicsTrianglePath_culling_get, ::avmshell::GraphicsTrianglePathObject::AS3_culling_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(ash_display_GraphicsTrianglePath_culling_set, ::avmshell::GraphicsTrianglePathObject::AS3_culling_set)

		//AVMTHUNK_NATIVE_METHOD_EX(ash_display_GraphicsTrianglePath_indices_get, ::avmshell::GraphicsTrianglePathObject::AS3_indices_get)
		//AVMTHUNK_NATIVE_METHOD_EX(ash_display_GraphicsTrianglePath_indices_set, ::avmshell::GraphicsTrianglePathObject::AS3_indices_set)
		//AVMTHUNK_NATIVE_METHOD_EX(ash_display_GraphicsTrianglePath_uvtData_get, ::avmshell::GraphicsTrianglePathObject::AS3_uvtData_get)
		//AVMTHUNK_NATIVE_METHOD_EX(ash_display_GraphicsTrianglePath_uvtData_set, ::avmshell::GraphicsTrianglePathObject::AS3_uvtData_set)
		//AVMTHUNK_NATIVE_METHOD_EX(ash_display_GraphicsTrianglePath_vertices_get, ::avmshell::GraphicsTrianglePathObject::AS3_vertices_get)
		//AVMTHUNK_NATIVE_METHOD_EX(ash_display_GraphicsTrianglePath_vertices_set, ::avmshell::GraphicsTrianglePathObject::AS3_vertices_set)

		//AVMTHUNK_NATIVE_METHOD_EX(ash_display_GraphicsTrianglePath_GraphicsTrianglePath, ::avmshell::GraphicsTrianglePathObject::AS3_constructor)

		//Class NativeMenu
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_NativeMenu_isSupported_get, ::avmshell::NativeMenuObject::AS3_isSupported_get)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeMenu_items_get, ::avmshell::NativeMenuObject::AS3_items_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_NativeMenu_items_set, ::avmshell::NativeMenuObject::AS3_items_set)
		//AVMTHUNK_NATIVE_METHOD_I_VOID(flash_display_NativeMenu_numItems_get, ::avmshell::NativeMenuObject::AS3_numItems_get)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeMenu_parent_get, ::avmshell::NativeMenuObject::AS3_parent_get)

		//AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_NativeMenu_NativeMenu, ::avmshell::NativeMenuObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_P_P(flash_display_NativeMenu_addItem, ::avmshell::NativeMenuObject::AS3_addItem)
		//AVMTHUNK_NATIVE_METHOD_P_PI(flash_display_NativeMenu_addItemAt, ::avmshell::NativeMenuObject::AS3_addItemAt)
		//AVMTHUNK_NATIVE_METHOD_P_PS(flash_display_NativeMenu_addSubmenu, ::avmshell::NativeMenuObject::AS3_addSubmenu)
		//AVMTHUNK_NATIVE_METHOD_P_PIS(flash_display_NativeMenu_addSubmenuAt, ::avmshell::NativeMenuObject::AS3_addSubmenuAt)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeMenu_clone, ::avmshell::NativeMenuObject::AS3_clone)
		//AVMTHUNK_NATIVE_METHOD_B_P(flash_display_NativeMenu_containsItem, ::avmshell::NativeMenuObject::AS3_containsItem)

		//AVMTHUNK_NATIVE_METHOD_VOID_SDD(flash_display_NativeMenu_display, ::avmshell::NativeMenuObject::AS3_display)
		//AVMTHUNK_NATIVE_METHOD_P_I(flash_display_NativeMenu_getItemAt, ::avmshell::NativeMenuObject::AS3_getItemAt)
		//AVMTHUNK_NATIVE_METHOD_P_S(flash_display_NativeMenu_getItemByName, ::avmshell::NativeMenuObject::AS3_getItemByName)
		//AVMTHUNK_NATIVE_METHOD_I_P(flash_display_NativeMenu_getItemIndex, ::avmshell::NativeMenuObject::AS3_getItemIndex)
		//AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_NativeMenu_removeAllItems, ::avmshell::NativeMenuObject::AS3_removeAllItems)

		//AVMTHUNK_NATIVE_METHOD_P_P(flash_display_NativeMenu_removeItem, ::avmshell::NativeMenuObject::AS3_removeItem)
		//AVMTHUNK_NATIVE_METHOD_P_I(flash_display_NativeMenu_removeItemAt, ::avmshell::NativeMenuObject::AS3_removeItemAt)
		//AVMTHUNK_NATIVE_METHOD_VOID_PI(flash_display_NativeMenu_setItemIndex, ::avmshell::NativeMenuObject::AS3_setItemIndex)

		//Class NativeMenuItem
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_NativeMenuItem_checked_get, ::avmshell::NativeMenuItemObject::AS3_checked_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_NativeMenuItem_checked_set, ::avmshell::NativeMenuItemObject::AS3_checked_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeMenuItem_data_get, ::avmshell::NativeMenuItemObject::AS3_data_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_NativeMenuItem_data_set, ::avmshell::NativeMenuItemObject::AS3_data_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_NativeMenuItem_enabled_get, ::avmshell::NativeMenuItemObject::AS3_enabled_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_NativeMenuItem_enabled_set, ::avmshell::NativeMenuItemObject::AS3_enabled_set)

		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_NativeMenuItem_isSeparator_get, ::avmshell::NativeMenuItemObject::AS3_isSeparator_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeMenuItem_keyEquivalent_get, ::avmshell::NativeMenuItemObject::AS3_keyEquivalent_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_display_NativeMenuItem_keyEquivalent_set, ::avmshell::NativeMenuItemObject::AS3_keyEquivalent_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeMenuItem_keyEquivalentModifiers_get, ::avmshell::NativeMenuItemObject::AS3_keyEquivalentModifiers_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_NativeMenuItem_keyEquivalentModifiers_set, ::avmshell::NativeMenuItemObject::AS3_keyEquivalentModifiers_set)

		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeMenuItem_label_get, ::avmshell::NativeMenuItemObject::AS3_label_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_NativeMenuItem_label_set, ::avmshell::NativeMenuItemObject::AS3_label_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeMenuItem_menu_get, ::avmshell::NativeMenuItemObject::AS3_menu_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_display_NativeMenuItem_mnemonicIndex_get, ::avmshell::NativeMenuItemObject::AS3_mnemonicIndex_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_display_NativeMenuItem_mnemonicIndex_set, ::avmshell::NativeMenuItemObject::AS3_mnemonicIndex_set)

		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeMenuItem_name_get, ::avmshell::NativeMenuItemObject::AS3_name_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_display_NativeMenuItem_name_set, ::avmshell::NativeMenuItemObject::AS3_name_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeMenuItem_submenu_get, ::avmshell::NativeMenuItemObject::AS3_submenu_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_NativeMenuItem_submenu_set, ::avmshell::NativeMenuItemObject::AS3_submenu_set)

		AVMTHUNK_NATIVE_METHOD_VOID_SB_NATIVEMENUITEM(flash_display_NativeMenuItem_NativeMenuItem, ::avmshell::NativeMenuItemObject::AS3_constructor)

		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeMenuItem_clone, ::avmshell::NativeMenuItemObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeMenuItem_toString, ::avmshell::NativeMenuItemObject::AS3_toString)

		//Class NativeWindow
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_NativeWindow_isSupported_get, ::avmshell::NativeWindowObject::AS3_isSupported_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_NativeWindow_supportsMenu_get, ::avmshell::NativeWindowObject::AS3_supportsMenu_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_NativeWindow_supportsNotification_get, ::avmshell::NativeWindowObject::AS3_supportsNotification_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_NativeWindow_supportsTransparency_get, ::avmshell::NativeWindowObject::AS3_supportsTransparency_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeWindow_systemMaxSize_get, ::avmshell::NativeWindowObject::AS3_systemMaxSize_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeWindow_systemMinSize_get, ::avmshell::NativeWindowObject::AS3_systemMinSize_get)

		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_NativeWindow_active_get, ::avmshell::NativeWindowObject::AS3_active_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_NativeWindow_alwaysInFront_get, ::avmshell::NativeWindowObject::AS3_alwaysInFront_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_NativeWindow_alwaysInFront_set, ::avmshell::NativeWindowObject::AS3_alwaysInFront_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeWindow_bounds_get, ::avmshell::NativeWindowObject::AS3_bounds_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_NativeWindow_bounds_set, ::avmshell::NativeWindowObject::AS3_bounds_set)

		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_NativeWindow_closed_get, ::avmshell::NativeWindowObject::AS3_closed_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeWindow_displayState_get, ::avmshell::NativeWindowObject::AS3_displayState_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_NativeWindow_height_get, ::avmshell::NativeWindowObject::AS3_height_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_NativeWindow_height_set, ::avmshell::NativeWindowObject::AS3_height_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_NativeWindow_maximizable_get, ::avmshell::NativeWindowObject::AS3_maximizable_get)

		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeWindow_maxSize_get, ::avmshell::NativeWindowObject::AS3_maxSize_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_NativeWindow_maxSize_set, ::avmshell::NativeWindowObject::AS3_maxSize_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeWindow_menu_get, ::avmshell::NativeWindowObject::AS3_menu_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_NativeWindow_menu_set, ::avmshell::NativeWindowObject::AS3_menu_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_NativeWindow_minimizable_get, ::avmshell::NativeWindowObject::AS3_minimizable_get)

		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeWindow_minSize_get, ::avmshell::NativeWindowObject::AS3_minSize_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_NativeWindow_minSize_set, ::avmshell::NativeWindowObject::AS3_minSize_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeWindow_owner_get, ::avmshell::NativeWindowObject::AS3_owner_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_NativeWindow_resizable_get, ::avmshell::NativeWindowObject::AS3_resizable_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeWindow_stage_get, ::avmshell::NativeWindowObject::AS3_stage_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeWindow_systemChrome_get, ::avmshell::NativeWindowObject::AS3_systemChrome_get)

		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeWindow_title_get, ::avmshell::NativeWindowObject::AS3_title_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_display_NativeWindow_title_set, ::avmshell::NativeWindowObject::AS3_title_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_NativeWindow_transparent_get, ::avmshell::NativeWindowObject::AS3_transparent_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeWindow_type_get, ::avmshell::NativeWindowObject::AS3_type_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_NativeWindow_visible_get, ::avmshell::NativeWindowObject::AS3_visible_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_NativeWindow_visible_set, ::avmshell::NativeWindowObject::AS3_visible_set)

		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_NativeWindow_width_get, ::avmshell::NativeWindowObject::AS3_width_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_NativeWindow_width_set, ::avmshell::NativeWindowObject::AS3_width_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_NativeWindow_x_get, ::avmshell::NativeWindowObject::AS3_x_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_NativeWindow_x_set, ::avmshell::NativeWindowObject::AS3_x_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_NativeWindow_y_get, ::avmshell::NativeWindowObject::AS3_y_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_NativeWindow_y_set, ::avmshell::NativeWindowObject::AS3_y_set)

		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_NativeWindow_NativeWindow, ::avmshell::NativeWindowObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_NativeWindow_activate, ::avmshell::NativeWindowObject::AS3_activate)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_NativeWindow_close, ::avmshell::NativeWindowObject::AS3_close)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_display_NativeWindow_globalToScreen, ::avmshell::NativeWindowObject::AS3_globalToScreen)

		AVMTHUNK_NATIVE_METHOD_EX(flash_display_NativeWindow_listOwnedWindows, ::avmshell::NativeWindowObject::AS3_listOwnedWindows)

		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_NativeWindow_maximize, ::avmshell::NativeWindowObject::AS3_maximize)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_NativeWindow_minimize, ::avmshell::NativeWindowObject::AS3_minimize)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_display_NativeWindow_notifyUser, ::avmshell::NativeWindowObject::AS3_notifyUser)
		AVMTHUNK_NATIVE_METHOD_B_P(flash_display_NativeWindow_orderInBackOf, ::avmshell::NativeWindowObject::AS3_orderInBackOf)
		AVMTHUNK_NATIVE_METHOD_B_P(flash_display_NativeWindow_orderInFrontOf, ::avmshell::NativeWindowObject::AS3_orderInFrontOf)

		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_NativeWindow_orderToBack, ::avmshell::NativeWindowObject::AS3_orderToBack)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_NativeWindow_orderToFront, ::avmshell::NativeWindowObject::AS3_orderToFront)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_NativeWindow_restore, ::avmshell::NativeWindowObject::AS3_restore)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_NativeWindow_startMove, ::avmshell::NativeWindowObject::AS3_startMove)
		AVMTHUNK_NATIVE_METHOD_B_S_NATIVEWINDOW(flash_display_NativeWindow_startResize, ::avmshell::NativeWindowObject::AS3_startResize)
		//new adds 11	
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_display_NativeWindow_renderMode_get,::avmshell::NativeWindowObject::AS3_renderMode_get)
		//new adds 11 end

		//Class NativeWindowInitOptions
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_NativeWindowInitOptions_maximizable_get, ::avmshell::NativeWindowInitOptionsObject::AS3_maximizable_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_NativeWindowInitOptions_maximizable_set, ::avmshell::NativeWindowInitOptionsObject::AS3_maximizable_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_NativeWindowInitOptions_minimizable_get, ::avmshell::NativeWindowInitOptionsObject::AS3_minimizable_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_NativeWindowInitOptions_minimizable_set, ::avmshell::NativeWindowInitOptionsObject::AS3_minimizable_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeWindowInitOptions_owner_get, ::avmshell::NativeWindowInitOptionsObject::AS3_owner_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_NativeWindowInitOptions_owner_set, ::avmshell::NativeWindowInitOptionsObject::AS3_owner_set)

		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_NativeWindowInitOptions_resizable_get, ::avmshell::NativeWindowInitOptionsObject::AS3_resizable_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_NativeWindowInitOptions_resizable_set, ::avmshell::NativeWindowInitOptionsObject::AS3_resizable_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeWindowInitOptions_systemChrome_get, ::avmshell::NativeWindowInitOptionsObject::AS3_systemChrome_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_display_NativeWindowInitOptions_systemChrome_set, ::avmshell::NativeWindowInitOptionsObject::AS3_systemChrome_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_NativeWindowInitOptions_transparent_get, ::avmshell::NativeWindowInitOptionsObject::AS3_transparent_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_NativeWindowInitOptions_transparent_set, ::avmshell::NativeWindowInitOptionsObject::AS3_transparent_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_NativeWindowInitOptions_type_get, ::avmshell::NativeWindowInitOptionsObject::AS3_type_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_display_NativeWindowInitOptions_type_set, ::avmshell::NativeWindowInitOptionsObject::AS3_type_set)

		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_NativeWindowInitOptions_NativeWindowInitOptions, ::avmshell::NativeWindowInitOptionsObject::AS3_constructor)
		//new adds 11
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_display_NativeWindowInitOptions_renderMode_get,::avmshell::NativeWindowInitOptionsObject::AS3_renderMode_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_display_NativeWindowInitOptions_renderMode_set,::avmshell::NativeWindowInitOptionsObject::AS3_renderMode_set)
		//new adds 11 end
		//Class Screen
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Screen_mainScreen_get, ::avmshell::ScreenClass::AS3_mainScreen_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Screen_screens_get, ::avmshell::ScreenClass::AS3_screens_get)

		AVMTHUNK_NATIVE_METHOD_P_P(flash_display_Screen_getScreensForRectangle, ::avmshell::ScreenObject::AS3_getScreensForRectangle)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Screen_bounds_get, ::avmshell::ScreenObject::AS3_bounds_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_display_Screen_colorDepth_get, ::avmshell::ScreenObject::AS3_colorDepth_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Screen_visibleBounds_get, ::avmshell::ScreenObject::AS3_visibleBounds_get)

		//Class Shader
//		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Shader_byteCode_set, ::avmshell::ShaderObject::AS3_byteCode_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Shader_data_get, ::avmshell::ShaderObject::AS3_data_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_Shader_data_set, ::avmshell::ShaderObject::AS3_data_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_Shader_precisionHint_get, ::avmshell::ShaderObject::AS3_precisionHint_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_display_Shader_precisionHint_set, ::avmshell::ShaderObject::AS3_precisionHint_set)
//		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_Shader_Shader, ::avmshell::ShaderObject::AS3_constructor)

		//Class ShaderData
//		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_ShaderData_ShaderData, ::avmshell::ShaderDataObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_ShaderData_private_SetByteCode, ::avmshell::ShaderDataObject::AS3_setByteCode)

		//Class ShaderInput
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_display_ShaderInput_channels_get, ::avmshell::ShaderInputObject::AS3_channels_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_display_ShaderInput_height_get, ::avmshell::ShaderInputObject::AS3_height_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_display_ShaderInput_height_set, ::avmshell::ShaderInputObject::AS3_height_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_display_ShaderInput_index_get, ::avmshell::ShaderInputObject::AS3_index_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_ShaderInput_input_get, ::avmshell::ShaderInputObject::AS3_input_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_ShaderInput_input_set, ::avmshell::ShaderInputObject::AS3_input_set)

		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_display_ShaderInput_width_get, ::avmshell::ShaderInputObject::AS3_width_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_display_ShaderInput_width_set, ::avmshell::ShaderInputObject::AS3_width_set)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_ShaderInput_ShaderInput, ::avmshell::ShaderInputObject::AS3_constructor)

		//Class ShaderJob
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_display_ShaderJob_height_get, ::avmshell::ShaderJobObject::AS3_height_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_display_ShaderJob_height_set, ::avmshell::ShaderJobObject::AS3_height_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_ShaderJob_progress_get, ::avmshell::ShaderJobObject::AS3_progress_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_ShaderJob_shader_get, ::avmshell::ShaderJobObject::AS3_shader_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_ShaderJob_shader_set, ::avmshell::ShaderJobObject::AS3_shader_set)

		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_ShaderJob_target_get, ::avmshell::ShaderJobObject::AS3_target_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_ShaderJob_target_set, ::avmshell::ShaderJobObject::AS3_target_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_display_ShaderJob_width_get, ::avmshell::ShaderJobObject::AS3_width_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_display_ShaderJob_width_set, ::avmshell::ShaderJobObject::AS3_width_set)

//		AVMTHUNK_NATIVE_METHOD_VOID_PPII(flash_display_ShaderJob_ShaderJob, ::avmshell::ShaderJobObject::AS3_constructor)

		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_ShaderJob_cancel, ::avmshell::ShaderJobObject::AS3_cancel)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_ShaderJob_start, ::avmshell::ShaderJobObject::AS3_start)

		//Class ShaderParameter
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_display_ShaderParameter_index_get, ::avmshell::ShaderParameterObject::AS3_index_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_ShaderParameter_type_get, ::avmshell::ShaderParameterObject::AS3_type_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_display_ShaderParameter_value_get, ::avmshell::ShaderParameterObject::AS3_value_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_display_ShaderParameter_value_set, ::avmshell::ShaderParameterObject::AS3_value_set)

//		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_display_ShaderParameter_ShaderParameter, ::avmshell::ShaderParameterObject::AS3_constructor)

		//Class DRMManagerError
		//AVMTHUNK_NATIVE_METHOD_I_VOID(flash_errors_DRMManagerError_subErrorID_get, ::avmshell::DRMManagerErrorObject::AS3_subErrorID_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_SII(flash_errors_DRMManagerError_DRMManagerError, ::avmshell::DRMManagerErrorObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_errors_DRMManagerError_toString, ::avmshell::DRMManagerErrorObject::AS3_toString)

		//Class SQLError
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_errors_SQLError_detailArguments_get, ::avmshell::SQLErrorObject::AS3_detailArguments_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_errors_SQLError_detailID_get, ::avmshell::SQLErrorObject::AS3_detailID_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_errors_SQLError_details_get, ::avmshell::SQLErrorObject::AS3_details_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_errors_SQLError_operation_get, ::avmshell::SQLErrorObject::AS3_operation_get)

		AVMTHUNK_NATIVE_METHOD_VOID_SSSIIP_SQLERROR(flash_errors_SQLError_SQLError, ::avmshell::SQLErrorObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_errors_SQLError_toString, ::avmshell::SQLErrorObject::AS3_toString)

		//Class AccelerometerEvent
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_AccelerometerEvent_accelerationX_get, ::avmshell::AccelerometerEventObject::AS3_accelerationX_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_AccelerometerEvent_accelerationX_set, ::avmshell::AccelerometerEventObject::AS3_accelerationX_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_AccelerometerEvent_accelerationY_get, ::avmshell::AccelerometerEventObject::AS3_accelerationY_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_AccelerometerEvent_accelerationY_set, ::avmshell::AccelerometerEventObject::AS3_accelerationY_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_AccelerometerEvent_accelerationZ_get, ::avmshell::AccelerometerEventObject::AS3_accelerationZ_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_AccelerometerEvent_accelerationZ_set, ::avmshell::AccelerometerEventObject::AS3_accelerationZ_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_AccelerometerEvent_timestamp_get, ::avmshell::AccelerometerEventObject::AS3_timestamp_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_AccelerometerEvent_timestamp_set, ::avmshell::AccelerometerEventObject::AS3_timestamp_set)

		//AVMTHUNK_NATIVE_METHOD_VOID_SBBDDDD(flash_events_AccelerometerEvent_AccelerometerEvent, ::avmshell::AccelerometerEventObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_AccelerometerEvent_toString, ::avmshell::AccelerometerEventObject::AS3_toString)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_AccelerometerEvent_clone, ::avmshell::AccelerometerEventObject::AS3_clone)

		//Class BrowserInvokeEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_BrowserInvokeEvent_arguments_get, ::avmshell::BrowserInvokeEventObject::AS3_arguments_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_BrowserInvokeEvent_isHTTPS_get, ::avmshell::BrowserInvokeEventObject::AS3_isHTTPS_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_BrowserInvokeEvent_isUserEvent_get, ::avmshell::BrowserInvokeEventObject::AS3_isUserEvent_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_BrowserInvokeEvent_sandboxType_get, ::avmshell::BrowserInvokeEventObject::AS3_sandboxType_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_BrowserInvokeEvent_securityDomain_get, ::avmshell::BrowserInvokeEventObject::AS3_securityDomain_get)

		AVMTHUNK_NATIVE_METHOD_VOID_SBBPSSBB(flash_events_BrowserInvokeEvent_BrowserInvokeEvent, ::avmshell::BrowserInvokeEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_BrowserInvokeEvent_clone, ::avmshell::BrowserInvokeEventObject::AS3_clone)

		//Class DatagramSocketDataEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DatagramSocketDataEvent_data_get, ::avmshell::DatagramSocketDataEventObject::AS3_data_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_DatagramSocketDataEvent_data_set, ::avmshell::DatagramSocketDataEventObject::AS3_data_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DatagramSocketDataEvent_dstAddress_get, ::avmshell::DatagramSocketDataEventObject::AS3_dstAddress_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_events_DatagramSocketDataEvent_dstAddress_set, ::avmshell::DatagramSocketDataEventObject::AS3_dstAddress_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_events_DatagramSocketDataEvent_dstPort_get, ::avmshell::DatagramSocketDataEventObject::AS3_dstPort_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_events_DatagramSocketDataEvent_dstPort_set, ::avmshell::DatagramSocketDataEventObject::AS3_dstPort_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DatagramSocketDataEvent_srcAddress_get, ::avmshell::DatagramSocketDataEventObject::AS3_srcAddress_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_events_DatagramSocketDataEvent_srcAddress_set, ::avmshell::DatagramSocketDataEventObject::AS3_srcAddress_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_events_DatagramSocketDataEvent_srcPort_get, ::avmshell::DatagramSocketDataEventObject::AS3_srcPort_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_events_DatagramSocketDataEvent_srcPort_set, ::avmshell::DatagramSocketDataEventObject::AS3_srcPort_set)

		AVMTHUNK_NATIVE_METHOD_VOID_SBBSISIP(flash_events_DatagramSocketDataEvent_DatagramSocketDataEvent, ::avmshell::DatagramSocketDataEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DatagramSocketDataEvent_clone, ::avmshell::DatagramSocketDataEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DatagramSocketDataEvent_toString, ::avmshell::DatagramSocketDataEventObject::AS3_toString)

		//Class DNSResolverEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DNSResolverEvent_host_get, ::avmshell::DNSResolverEventObject::AS3_host_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_events_DNSResolverEvent_host_set, ::avmshell::DNSResolverEventObject::AS3_host_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DNSResolverEvent_resourceRecords_get, ::avmshell::DNSResolverEventObject::AS3_resourceRecords_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_DNSResolverEvent_resourceRecords_set, ::avmshell::DNSResolverEventObject::AS3_resourceRecords_set)

		AVMTHUNK_NATIVE_METHOD_VOID_SBBSP(flash_events_DNSResolverEvent_DNSResolverEvent, ::avmshell::DNSResolverEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DNSResolverEvent_clone, ::avmshell::DNSResolverEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DNSResolverEvent_toString, ::avmshell::DNSResolverEventObject::AS3_toString)

		//Class DRMAuthenticateEvent
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMAuthenticateEvent_authenticationType_get, ::avmshell::DRMAuthenticateEventObject::AS3_authenticationType_get)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMAuthenticateEvent_header_get, ::avmshell::DRMAuthenticateEventObject::AS3_header_get)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMAuthenticateEvent_netstream_get, ::avmshell::DRMAuthenticateEventObject::AS3_netstream_get)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMAuthenticateEvent_passwordPrompt_get, ::avmshell::DRMAuthenticateEventObject::AS3_passwordPrompt_get)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMAuthenticateEvent_urlPrompt_get, ::avmshell::DRMAuthenticateEventObject::AS3_urlPrompt_get)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMAuthenticateEvent_usernamePrompt_get, ::avmshell::DRMAuthenticateEventObject::AS3_usernamePrompt_get)

		//AVMTHUNK_NATIVE_METHOD_VOID_SBBSSSSSP(flash_events_DRMAuthenticateEvent_DRMAuthenticateEvent, ::avmshell::DRMAuthenticateEventObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMAuthenticateEvent_clone, ::avmshell::DRMAuthenticateEventObject::AS3_clone)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMAuthenticateEvent_toString, ::avmshell::DRMAuthenticateEventObject::AS3_toString)

		//Class DRMAuthenticationCompleteEvent
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMAuthenticationCompleteEvent_domain_get, ::avmshell::DRMAuthenticationCompleteEventObject::AS3_domain_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_S(flash_events_DRMAuthenticationCompleteEvent_domain_set, ::avmshell::DRMAuthenticationCompleteEventObject::AS3_domain_set)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMAuthenticationCompleteEvent_serverURL_get, ::avmshell::DRMAuthenticationCompleteEventObject::AS3_serverURL_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_S(flash_events_DRMAuthenticationCompleteEvent_serverURL_set, ::avmshell::DRMAuthenticationCompleteEventObject::AS3_serverURL_set)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMAuthenticationCompleteEvent_token_get, ::avmshell::DRMAuthenticationCompleteEventObject::AS3_token_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_DRMAuthenticationCompleteEvent_token_set, ::avmshell::DRMAuthenticationCompleteEventObject::AS3_token_set)

		//AVMTHUNK_NATIVE_METHOD_VOID_SBBSSP(flash_events_DRMAuthenticationCompleteEvent_DRMAuthenticationCompleteEvent, ::avmshell::DRMAuthenticationCompleteEventObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMAuthenticationCompleteEvent_clone, ::avmshell::DRMAuthenticationCompleteEventObject::AS3_clone)

		//Class DRMAuthenticationErrorEvent
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMAuthenticationErrorEvent_domain_get, ::avmshell::DRMAuthenticationErrorEventObject::AS3_domain_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_S(flash_events_DRMAuthenticationErrorEvent_domain_set, ::avmshell::DRMAuthenticationErrorEventObject::AS3_domain_set)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMAuthenticationErrorEvent_serverURL_get, ::avmshell::DRMAuthenticationErrorEventObject::AS3_serverURL_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_S(flash_events_DRMAuthenticationErrorEvent_serverURL_set, ::avmshell::DRMAuthenticationErrorEventObject::AS3_serverURL_set)
		//AVMTHUNK_NATIVE_METHOD_I_VOID(flash_events_DRMAuthenticationErrorEvent_subErrorID_get, ::avmshell::DRMAuthenticationErrorEventObject::AS3_subErrorID_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_I(flash_events_DRMAuthenticationErrorEvent_subErrorID_set, ::avmshell::DRMAuthenticationErrorEventObject::AS3_subErrorID_set)

		//AVMTHUNK_NATIVE_METHOD_VOID_SBBSIISS(flash_events_DRMAuthenticationErrorEvent_DRMAuthenticationErrorEvent, ::avmshell::DRMAuthenticationErrorEventObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMAuthenticationErrorEvent_clone, ::avmshell::DRMAuthenticationErrorEventObject::AS3_clone)

		//Class DRMErrorEvent
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMErrorEvent_contentData_get, ::avmshell::DRMErrorEventObject::AS3_contentData_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_DRMErrorEvent_contentData_set, ::avmshell::DRMErrorEventObject::AS3_contentData_set)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_DRMErrorEvent_drmUpdateNeeded_get, ::avmshell::DRMErrorEventObject::AS3_drmUpdateNeeded_get)
		//AVMTHUNK_NATIVE_METHOD_I_VOID(flash_events_DRMErrorEvent_subErrorID_get, ::avmshell::DRMErrorEventObject::AS3_subErrorID_get)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_DRMErrorEvent_systemUpdateNeeded_get, ::avmshell::DRMErrorEventObject::AS3_systemUpdateNeeded_get)

		//AVMTHUNK_NATIVE_METHOD_VOID_SBBSIIPBB(flash_events_DRMErrorEvent_DRMErrorEvent, ::avmshell::DRMErrorEventObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMErrorEvent_clone, ::avmshell::DRMErrorEventObject::AS3_clone)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMErrorEvent_toString, ::avmshell::DRMErrorEventObject::AS3_toString)

		//Class DRMStatusEvent
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMStatusEvent_contentData_get, ::avmshell::DRMStatusEventObject::AS3_contentData_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_DRMStatusEvent_contentData_set, ::avmshell::DRMStatusEventObject::AS3_contentData_set)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMStatusEvent_detail_get, ::avmshell::DRMStatusEventObject::AS3_detail_get)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_DRMStatusEvent_isAnonymous_get, ::avmshell::DRMStatusEventObject::AS3_isAnonymous_get)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_DRMStatusEvent_isAvailableOffline_get, ::avmshell::DRMStatusEventObject::AS3_isAvailableOffline_get)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_DRMStatusEvent_isLocal_get, ::avmshell::DRMStatusEventObject::AS3_isLocal_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_DRMStatusEvent_isLocal_set, ::avmshell::DRMStatusEventObject::AS3_isLocal_set)

		//AVMTHUNK_NATIVE_METHOD_U_VOID(flash_events_DRMStatusEvent_offlineLeasePeriod_get, ::avmshell::DRMStatusEventObject::AS3_offlineLeasePeriod_get)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMStatusEvent_policies_get, ::avmshell::DRMStatusEventObject::AS3_policies_get)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMStatusEvent_voucher_get, ::avmshell::DRMStatusEventObject::AS3_voucher_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_DRMStatusEvent_voucher_set, ::avmshell::DRMStatusEventObject::AS3_voucher_set)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMStatusEvent_voucherEndDate_get, ::avmshell::DRMStatusEventObject::AS3_voucherEndDate_get)

		//AVMTHUNK_NATIVE_METHOD_VOID_SBBPPB(flash_events_DRMStatusEvent_DRMStatusEvent, ::avmshell::DRMStatusEventObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMStatusEvent_clone, ::avmshell::DRMStatusEventObject::AS3_clone)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMStatusEvent_toString, ::avmshell::DRMStatusEventObject::AS3_toString)

		//Class FileListEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_FileListEvent_files_get, ::avmshell::FileListEventObject::AS3_files_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_FileListEvent_files_set, ::avmshell::FileListEventObject::AS3_files_set)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBP(flash_events_FileListEvent_FileListEvent, ::avmshell::FileListEventObject::AS3_constructor)

		//Class GeolocationEvent
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_GeolocationEvent_altitude_get, ::avmshell::GeolocationEventObject::AS3_altitude_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_GeolocationEvent_altitude_set, ::avmshell::GeolocationEventObject::AS3_altitude_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_GeolocationEvent_heading_get, ::avmshell::GeolocationEventObject::AS3_heading_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_GeolocationEvent_heading_set, ::avmshell::GeolocationEventObject::AS3_heading_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_GeolocationEvent_horizontalAccuracy_get, ::avmshell::GeolocationEventObject::AS3_horizontalAccuracy_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_GeolocationEvent_horizontalAccuracy_set, ::avmshell::GeolocationEventObject::AS3_horizontalAccuracy_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_GeolocationEvent_latitude_get, ::avmshell::GeolocationEventObject::AS3_latitude_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_GeolocationEvent_latitude_set, ::avmshell::GeolocationEventObject::AS3_latitude_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_GeolocationEvent_longitude_get, ::avmshell::GeolocationEventObject::AS3_longitude_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_GeolocationEvent_longitude_set, ::avmshell::GeolocationEventObject::AS3_longitude_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_GeolocationEvent_speed_get, ::avmshell::GeolocationEventObject::AS3_speed_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_GeolocationEvent_speed_set, ::avmshell::GeolocationEventObject::AS3_speed_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_GeolocationEvent_timestamp_get, ::avmshell::GeolocationEventObject::AS3_timestamp_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_GeolocationEvent_timestamp_set, ::avmshell::GeolocationEventObject::AS3_timestamp_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_GeolocationEvent_verticalAccuracy_get, ::avmshell::GeolocationEventObject::AS3_verticalAccuracy_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_GeolocationEvent_verticalAccuracy_set, ::avmshell::GeolocationEventObject::AS3_verticalAccuracy_set)

		//AVMTHUNK_NATIVE_METHOD_VOID_SBBDDDDDDDD(flash_events_GeolocationEvent_GeolocationEvent, ::avmshell::GeolocationEventObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_GeolocationEvent_clone, ::avmshell::GeolocationEventObject::AS3_clone)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_GeolocationEvent_toString, ::avmshell::GeolocationEventObject::AS3_toString)

		//Class GestureEvent
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_GestureEvent_altKey_get, ::avmshell::GestureEventObject::AS3_altKey_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_GestureEvent_altKey_set, ::avmshell::GestureEventObject::AS3_altKey_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_GestureEvent_commandKey_get, ::avmshell::GestureEventObject::AS3_commandKey_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_GestureEvent_commandKey_set, ::avmshell::GestureEventObject::AS3_commandKey_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_GestureEvent_controlKey_get, ::avmshell::GestureEventObject::AS3_controlKey_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_GestureEvent_controlKey_set, ::avmshell::GestureEventObject::AS3_controlKey_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_GestureEvent_ctrlKey_get, ::avmshell::GestureEventObject::AS3_ctrlKey_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_GestureEvent_ctrlKey_set, ::avmshell::GestureEventObject::AS3_ctrlKey_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_GestureEvent_localX_get, ::avmshell::GestureEventObject::AS3_localX_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_GestureEvent_localX_set, ::avmshell::GestureEventObject::AS3_localX_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_GestureEvent_localY_get, ::avmshell::GestureEventObject::AS3_localY_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_GestureEvent_localY_set, ::avmshell::GestureEventObject::AS3_localY_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_GestureEvent_phase_get, ::avmshell::GestureEventObject::AS3_phase_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_events_GestureEvent_phase_set, ::avmshell::GestureEventObject::AS3_phase_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_GestureEvent_shiftKey_get, ::avmshell::GestureEventObject::AS3_shiftKey_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_GestureEvent_shiftKey_set, ::avmshell::GestureEventObject::AS3_shiftKey_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_GestureEvent_stageX_get, ::avmshell::GestureEventObject::AS3_stageX_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_GestureEvent_stageY_get, ::avmshell::GestureEventObject::AS3_stageY_get)

		AVMTHUNK_NATIVE_METHOD_VOID_SBBSDDBBBBB(flash_events_GestureEvent_GestureEvent, ::avmshell::GestureEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_GestureEvent_clone, ::avmshell::GestureEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_GestureEvent_toString, ::avmshell::GestureEventObject::AS3_toString)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_events_GestureEvent_updateAfterEvent, ::avmshell::GestureEventObject::AS3_updateAfterEvent)

		//Class HTMLUncaughtScriptExceptionEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_HTMLUncaughtScriptExceptionEvent_exceptionValue_get, ::avmshell::HTMLUncaughtScriptExceptionEventObject::AS3_exceptionValue_get)
		AVMTHUNK_NATIVE_METHOD_VOID_A(flash_events_HTMLUncaughtScriptExceptionEvent_exceptionValue_set, ::avmshell::HTMLUncaughtScriptExceptionEventObject::AS3_exceptionValue_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_HTMLUncaughtScriptExceptionEvent_stackTrace_get, ::avmshell::HTMLUncaughtScriptExceptionEventObject::AS3_stackTrace_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_HTMLUncaughtScriptExceptionEvent_stackTrace_set, ::avmshell::HTMLUncaughtScriptExceptionEventObject::AS3_stackTrace_set)

		AVMTHUNK_NATIVE_METHOD_VOID_A(flash_events_HTMLUncaughtScriptExceptionEvent_HTMLUncaughtScriptExceptionEvent, ::avmshell::HTMLUncaughtScriptExceptionEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_HTMLUncaughtScriptExceptionEvent_clone, ::avmshell::HTMLUncaughtScriptExceptionEventObject::AS3_clone)

		//Class InvokeEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_InvokeEvent_arguments_get, ::avmshell::InvokeEventObject::AS3_arguments_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_InvokeEvent_currentDirectory_get, ::avmshell::InvokeEventObject::AS3_currentDirectory_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_InvokeEvent_reason_get, ::avmshell::InvokeEventObject::AS3_reason_get)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBPPS_INVOKEEVENT(flash_events_InvokeEvent_InvokeEvent, ::avmshell::InvokeEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_InvokeEvent_clone, ::avmshell::InvokeEventObject::AS3_clone)

		//Class LocationChangeEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_LocationChangeEvent_location_get, ::avmshell::LocationChangeEventObject::AS3_location_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_events_LocationChangeEvent_location_set, ::avmshell::LocationChangeEventObject::AS3_location_set)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBS(flash_events_LocationChangeEvent_LocationChangeEvent, ::avmshell::LocationChangeEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_LocationChangeEvent_clone, ::avmshell::LocationChangeEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_LocationChangeEvent_toString, ::avmshell::LocationChangeEventObject::AS3_toString)

		//Class MediaEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_MediaEvent_data_get, ::avmshell::MediaEventObject::AS3_data_get)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBP(flash_events_MediaEvent_MediaEvent, ::avmshell::MediaEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_MediaEvent_clone, ::avmshell::MediaEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_MediaEvent_toString, ::avmshell::MediaEventObject::AS3_toString)

		//Class NativeDragEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_NativeDragEvent_allowedActions_get, ::avmshell::NativeDragEventObject::AS3_allowedActions_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_NativeDragEvent_allowedActions_set, ::avmshell::NativeDragEventObject::AS3_allowedActions_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_NativeDragEvent_clipboard_get, ::avmshell::NativeDragEventObject::AS3_clipboard_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_NativeDragEvent_clipboard_set, ::avmshell::NativeDragEventObject::AS3_clipboard_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_NativeDragEvent_dropAction_get, ::avmshell::NativeDragEventObject::AS3_dropAction_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_events_NativeDragEvent_dropAction_set, ::avmshell::NativeDragEventObject::AS3_dropAction_set)

		AVMTHUNK_NATIVE_METHOD_VOID_SBBDDPPPSBBBB(flash_events_NativeDragEvent_NativeDragEvent, ::avmshell::NativeDragEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_NativeDragEvent_clone, ::avmshell::NativeDragEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_NativeDragEvent_toString, ::avmshell::NativeDragEventObject::AS3_toString)

		//Class NativeProcessExitEvent
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_NativeProcessExitEvent_exitCode_get, ::avmshell::NativeProcessExitEventObject::AS3_exitCode_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_NativeProcessExitEvent_exitCode_set, ::avmshell::NativeProcessExitEventObject::AS3_exitCode_set)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBD(flash_events_NativeProcessExitEvent_NativeProcessExitEvent, ::avmshell::NativeProcessExitEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_NativeProcessExitEvent_clone, ::avmshell::NativeProcessExitEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_NativeProcessExitEvent_toString, ::avmshell::NativeProcessExitEventObject::AS3_toString)

		//Class NativeWindowBoundsEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_NativeWindowBoundsEvent_afterBounds_get, ::avmshell::NativeWindowBoundsEventObject::AS3_afterBounds_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_NativeWindowBoundsEvent_beforeBounds_get, ::avmshell::NativeWindowBoundsEventObject::AS3_beforeBounds_get)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBPP(flash_events_NativeWindowBoundsEvent_NativeWindowBoundsEvent, ::avmshell::NativeWindowBoundsEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_NativeWindowBoundsEvent_clone, ::avmshell::NativeWindowBoundsEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_NativeWindowBoundsEvent_toString, ::avmshell::NativeWindowBoundsEventObject::AS3_toString)

		//Class NetDataEvent
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_NetDataEvent_info_get, ::avmshell::NetDataEventObject::AS3_info_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_NetDataEvent_timestamp_get, ::avmshell::NetDataEventObject::AS3_timestamp_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_SBBDP(flash_events_NetDataEvent_NetDataEvent, ::avmshell::NetDataEventObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_NetDataEvent_clone, ::avmshell::NetDataEventObject::AS3_clone)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_NetDataEvent_toString, ::avmshell::NetDataEventObject::AS3_toString)

		//Class NetMonitorEvent
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_NetMonitorEvent_netStream_get, ::avmshell::NetMonitorEventObject::AS3_netStream_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_SBBP(flash_events_NetMonitorEvent_NetMonitorEvent, ::avmshell::NetMonitorEventObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_NetMonitorEvent_clone, ::avmshell::NetMonitorEventObject::AS3_clone)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_NetMonitorEvent_toString, ::avmshell::NetMonitorEventObject::AS3_toString)

		//Class OutputProgressEvent
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_OutputProgressEvent_bytesPending_get, ::avmshell::OutputProgressEventObject::AS3_bytesPending_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_OutputProgressEvent_bytesPending_set, ::avmshell::OutputProgressEventObject::AS3_bytesPending_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_OutputProgressEvent_bytesTotal_get, ::avmshell::OutputProgressEventObject::AS3_bytesTotal_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_OutputProgressEvent_bytesTotal_set, ::avmshell::OutputProgressEventObject::AS3_bytesTotal_set)
		//AVMTHUNK_NATIVE_METHOD_VOID_SBBDD(flash_events_OutputProgressEvent_OutputProgressEvent, ::avmshell::OutputProgressEventObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_OutputProgressEvent_clone, ::avmshell::OutputProgressEventObject::AS3_clone)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_OutputProgressEvent_toString, ::avmshell::OutputProgressEventObject::AS3_toString)

		//Class PressAndTapGestureEvent
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_PressAndTapGestureEvent_tapLocalX_get, ::avmshell::PressAndTapGestureEventObject::AS3_tapLocalX_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_PressAndTapGestureEvent_tapLocalX_set, ::avmshell::PressAndTapGestureEventObject::AS3_tapLocalX_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_PressAndTapGestureEvent_tapLocalY_get, ::avmshell::PressAndTapGestureEventObject::AS3_tapLocalY_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_PressAndTapGestureEvent_tapLocalY_set, ::avmshell::PressAndTapGestureEventObject::AS3_tapLocalY_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_PressAndTapGestureEvent_private_getTapStageX, ::avmshell::PressAndTapGestureEventObject::AS3_tapStageX_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_PressAndTapGestureEvent_private_getTapStageY, ::avmshell::PressAndTapGestureEventObject::AS3_tapStageY_get)

		//AVMTHUNK_NATIVE_METHOD_VOID_SBBSDDDDBBBBB(flash_events_PressAndTapGestureEvent_PressAndTapGestureEvent, ::avmshell::PressAndTapGestureEventObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_PressAndTapGestureEvent_clone, ::avmshell::PressAndTapGestureEventObject::AS3_clone)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_PressAndTapGestureEvent_toString, ::avmshell::PressAndTapGestureEventObject::AS3_toString)

		//AVMTHUNK_NATIVE_METHOD_EX(flash_events_SampleDataEvent_data_get, ::avmshell::SampleDataEventObject::AS3_data_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_events_SampleDataEvent_data_set, ::avmshell::SampleDataEventObject::AS3_data_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_events_SampleDataEvent_position_get, ::avmshell::SampleDataEventObject::AS3_position_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_events_SampleDataEvent_position_set, ::avmshell::SampleDataEventObject::AS3_position_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_events_SampleDataEvent_SampleDataEvent, ::avmshell::SampleDataEventObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_events_SampleDataEvent_clone, ::avmshell::SampleDataEventObject::AS3_clone)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_events_SampleDataEvent_toString, ::avmshell::SampleDataEventObject::AS3_toString)

		//Class ScreenMouseEvent
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_ScreenMouseEvent_screenX_get, ::avmshell::ScreenMouseEventObject::AS3_screenX_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_ScreenMouseEvent_screenY_get, ::avmshell::ScreenMouseEventObject::AS3_screenY_get)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBDDBBBBBB(flash_events_ScreenMouseEvent_ScreenMouseEvent, ::avmshell::ScreenMouseEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_ScreenMouseEvent_clone, ::avmshell::ScreenMouseEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_ScreenMouseEvent_toString, ::avmshell::ScreenMouseEventObject::AS3_toString)

		//Class ServerSocketConnectEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_ServerSocketConnectEvent_socket_get, ::avmshell::ServerSocketConnectEventObject::AS3_socket_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_ServerSocketConnectEvent_socket_set, ::avmshell::ServerSocketConnectEventObject::AS3_socket_set)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBP(flash_events_ServerSocketConnectEvent_ServerSocketConnectEvent, ::avmshell::ServerSocketConnectEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_ServerSocketConnectEvent_clone, ::avmshell::ServerSocketConnectEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_ServerSocketConnectEvent_toString, ::avmshell::ServerSocketConnectEventObject::AS3_toString)

		//Class ShaderEvent
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_ShaderEvent_bitmapData_get, ::avmshell::ShaderEventObject::AS3_bitmapData_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_ShaderEvent_bitmapData_set, ::avmshell::ShaderEventObject::AS3_bitmapData_set)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_ShaderEvent_byteArray_get, ::avmshell::ShaderEventObject::AS3_byteArray_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_ShaderEvent_byteArray_set, ::avmshell::ShaderEventObject::AS3_byteArray_set)

		//AVMTHUNK_NATIVE_METHOD_EX(flash_events_ShaderEvent_vector_get, ::avmshell::ShaderEventObject::AS3_vector_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_events_ShaderEvent_vector_set, ::avmshell::ShaderEventObject::AS3_vector_set)

//		AVMTHUNK_NATIVE_METHOD_EX(flash_events_ShaderEvent_ShaderEvent, ::avmshell::ShaderEventObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_VOID_S(flash_events_ShaderEvent_ShaderEvent, ::avmshell::ShaderEventObject::AS3_constructor)

		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_ShaderEvent_clone, ::avmshell::ShaderEventObject::AS3_clone)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_ShaderEvent_toString, ::avmshell::ShaderEventObject::AS3_toString)

		//Class SoftKeyboardEvent
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_SoftKeyboardEvent_relatedObject_get, ::avmshell::SoftKeyboardEventObject::AS3_relatedObject_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_SoftKeyboardEvent_relatedObject_set, ::avmshell::SoftKeyboardEventObject::AS3_relatedObject_set)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_SoftKeyboardEvent_triggerType_get, ::avmshell::SoftKeyboardEventObject::AS3_triggerType_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_SBBPS(flash_events_SoftKeyboardEvent_SoftKeyboardEvent, ::avmshell::SoftKeyboardEventObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_SoftKeyboardEvent_clone, ::avmshell::SoftKeyboardEventObject::AS3_clone)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_SoftKeyboardEvent_toString, ::avmshell::SoftKeyboardEventObject::AS3_toString)

		//Class SQLErrorEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_SQLErrorEvent_error_get, ::avmshell::SQLErrorEventObject::AS3_error_get)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBP(flash_events_SQLErrorEvent_SQLErrorEvent, ::avmshell::SQLErrorEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_SQLErrorEvent_clone, ::avmshell::SQLErrorEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_SQLErrorEvent_toString, ::avmshell::SQLErrorEventObject::AS3_toString)

		//Class SQLEvent
		AVMTHUNK_NATIVE_METHOD_VOID_SBB(flash_events_SQLEvent_SQLEvent, ::avmshell::SQLEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_SQLEvent_clone, ::avmshell::SQLEventObject::AS3_clone)

		//Class SQLUpdateEvent
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_SQLUpdateEvent_rowID_get, ::avmshell::SQLUpdateEventObject::AS3_rowID_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_SQLUpdateEvent_table_get, ::avmshell::SQLUpdateEventObject::AS3_table_get)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBSD(flash_events_SQLUpdateEvent_SQLUpdateEvent, ::avmshell::SQLUpdateEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_SQLUpdateEvent_clone, ::avmshell::SQLUpdateEventObject::AS3_clone)

		//Class StageOrientationEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_StageOrientationEvent_afterOrientation_get, ::avmshell::StageOrientationEventObject::AS3_afterOrientation_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_StageOrientationEvent_beforeOrientation_get, ::avmshell::StageOrientationEventObject::AS3_beforeOrientation_get)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBSS(flash_events_StageOrientationEvent_StageOrientationEvent, ::avmshell::StageOrientationEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_StageOrientationEvent_clone, ::avmshell::StageOrientationEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_StageOrientationEvent_toString, ::avmshell::StageOrientationEventObject::AS3_toString)

		//Class StageVideoAvailabilityEvent
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_StageVideoAvailabilityEvent_availability_get, ::avmshell::StageVideoAvailabilityEventObject::AS3_availability_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_SBBS(flash_events_StageVideoAvailabilityEvent_StageVideoAvailabilityEvent, ::avmshell::StageVideoAvailabilityEventObject::AS3_constructor)

		//Class StageVideoEvent
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_StageVideoEvent_colorSpace_get, ::avmshell::StageVideoEventObject::AS3_colorSpace_get)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_StageVideoEvent_status_get, ::avmshell::StageVideoEventObject::AS3_status_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_SBBSS(flash_events_StageVideoEvent_StageVideoEvent, ::avmshell::StageVideoEventObject::AS3_constructor)

		//Class StorageVolumeChangeEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_StorageVolumeChangeEvent_rootDirectory_get, ::avmshell::StorageVolumeChangeEventObject::AS3_rootDirectory_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_StorageVolumeChangeEvent_storageVolume_get, ::avmshell::StorageVolumeChangeEventObject::AS3_storageVolume_get)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBPP(flash_events_StorageVolumeChangeEvent_StorageVolumeChangeEvent, ::avmshell::StorageVolumeChangeEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_StorageVolumeChangeEvent_clone, ::avmshell::StorageVolumeChangeEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_StorageVolumeChangeEvent_toString, ::avmshell::StorageVolumeChangeEventObject::AS3_toString)

		//Class TouchEvent
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_TouchEvent_altKey_get, ::avmshell::TouchEventObject::AS3_altKey_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_TouchEvent_altKey_set, ::avmshell::TouchEventObject::AS3_altKey_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_TouchEvent_commandKey_get, ::avmshell::TouchEventObject::AS3_commandKey_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_TouchEvent_commandKey_set, ::avmshell::TouchEventObject::AS3_commandKey_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_TouchEvent_controlKey_get, ::avmshell::TouchEventObject::AS3_controlKey_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_TouchEvent_controlKey_set, ::avmshell::TouchEventObject::AS3_controlKey_set)

		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_TouchEvent_ctrlKey_get, ::avmshell::TouchEventObject::AS3_ctrlKey_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_TouchEvent_ctrlKey_set, ::avmshell::TouchEventObject::AS3_ctrlKey_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_TouchEvent_isPrimaryTouchPoint_get, ::avmshell::TouchEventObject::AS3_isPrimaryTouchPoint_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_TouchEvent_isPrimaryTouchPoint_set, ::avmshell::TouchEventObject::AS3_isPrimaryTouchPoint_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_TouchEvent_isRelatedObjectInaccessible_get, ::avmshell::TouchEventObject::AS3_isRelatedObjectInaccessible_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_TouchEvent_isRelatedObjectInaccessible_set, ::avmshell::TouchEventObject::AS3_isRelatedObjectInaccessible_set)

		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_TouchEvent_localX_get, ::avmshell::TouchEventObject::AS3_localX_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_TouchEvent_localX_set, ::avmshell::TouchEventObject::AS3_localX_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_TouchEvent_localY_get, ::avmshell::TouchEventObject::AS3_localY_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_TouchEvent_localY_set, ::avmshell::TouchEventObject::AS3_localY_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_TouchEvent_pressure_get, ::avmshell::TouchEventObject::AS3_pressure_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_TouchEvent_pressure_set, ::avmshell::TouchEventObject::AS3_pressure_set)

		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_TouchEvent_relatedObject_get, ::avmshell::TouchEventObject::AS3_relatedObject_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_TouchEvent_relatedObject_set, ::avmshell::TouchEventObject::AS3_relatedObject_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_TouchEvent_shiftKey_get, ::avmshell::TouchEventObject::AS3_shiftKey_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_TouchEvent_shiftKey_set, ::avmshell::TouchEventObject::AS3_shiftKey_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_TouchEvent_sizeX_get, ::avmshell::TouchEventObject::AS3_sizeX_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_TouchEvent_sizeX_set, ::avmshell::TouchEventObject::AS3_sizeX_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_TouchEvent_sizeY_get, ::avmshell::TouchEventObject::AS3_sizeY_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_TouchEvent_sizeY_set, ::avmshell::TouchEventObject::AS3_sizeY_set)

		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_TouchEvent_stageX_get, ::avmshell::TouchEventObject::AS3_stageX_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_TouchEvent_stageY_get, ::avmshell::TouchEventObject::AS3_stageY_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_events_TouchEvent_touchPointID_get, ::avmshell::TouchEventObject::AS3_touchPointID_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_events_TouchEvent_touchPointID_set, ::avmshell::TouchEventObject::AS3_touchPointID_set)

		AVMTHUNK_NATIVE_METHOD_VOID_SBBIBDDDDDPBBBBBDSB(flash_events_TouchEvent_TouchEvent, ::avmshell::TouchEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_TouchEvent_clone, ::avmshell::TouchEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_TouchEvent_toString, ::avmshell::TouchEventObject::AS3_toString)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_events_TouchEvent_updateAfterEvent, ::avmshell::TouchEventObject::AS3_updateAfterEvent)

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_TouchEvent_isTouchPointCanceled_get, ::avmshell::TouchEventObject::AS3_isTouchPointCanceled_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_events_TouchEvent_isTouchPointCanceled_set, ::avmshell::TouchEventObject::AS3_isTouchPointCanceled_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_TouchEvent_timestamp_get, ::avmshell::TouchEventObject::AS3_timestamp_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_TouchEvent_timestamp_set, ::avmshell::TouchEventObject::AS3_timestamp_set)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_events_TouchEvent_touchIntent_get, ::avmshell::TouchEventObject::AS3_touchIntent_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_events_TouchEvent_touchIntent_set, ::avmshell::TouchEventObject::AS3_touchIntent_set)
		AVMTHUNK_NATIVE_METHOD_U_PB(flash_events_TouchEvent_getSamples, ::avmshell::TouchEventObject::AS3_getSamples)
		AVMTHUNK_NATIVE_METHOD_B_I(flash_events_TouchEvent_isToolButtonDown, ::avmshell::TouchEventObject::AS3_isToolButtonDown)
		//new adds 11 end

		//Class TransformGestureEvent
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_TransformGestureEvent_offsetX_get, ::avmshell::TransformGestureEventObject::AS3_offsetX_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_TransformGestureEvent_offsetX_set, ::avmshell::TransformGestureEventObject::AS3_offsetX_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_TransformGestureEvent_offsetY_get, ::avmshell::TransformGestureEventObject::AS3_offsetY_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_TransformGestureEvent_offsetY_set, ::avmshell::TransformGestureEventObject::AS3_offsetY_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_TransformGestureEvent_rotation_get, ::avmshell::TransformGestureEventObject::AS3_rotation_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_TransformGestureEvent_rotation_set, ::avmshell::TransformGestureEventObject::AS3_rotation_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_TransformGestureEvent_scaleX_get, ::avmshell::TransformGestureEventObject::AS3_scaleX_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_TransformGestureEvent_scaleX_set, ::avmshell::TransformGestureEventObject::AS3_scaleX_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_TransformGestureEvent_scaleY_get, ::avmshell::TransformGestureEventObject::AS3_scaleY_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_events_TransformGestureEvent_scaleY_set, ::avmshell::TransformGestureEventObject::AS3_scaleY_set)

		//AVMTHUNK_NATIVE_METHOD_VOID_SBBSDDDDDDDBBBBB(flash_events_TransformGestureEvent_TransformGestureEvent, ::avmshell::TransformGestureEventObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_TransformGestureEvent_clone, ::avmshell::TransformGestureEventObject::AS3_clone)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_TransformGestureEvent_toString, ::avmshell::TransformGestureEventObject::AS3_toString)

		//Class UncaughtErrorEvent
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_UncaughtErrorEvent_error_get, ::avmshell::UncaughtErrorEventObject::AS3_error_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_SBBP(flash_events_UncaughtErrorEvent_UncaughtErrorEvent, ::avmshell::UncaughtErrorEventObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_UncaughtErrorEvent_clone, ::avmshell::UncaughtErrorEventObject::AS3_clone)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_UncaughtErrorEvent_toString, ::avmshell::UncaughtErrorEventObject::AS3_toString)

		//Class UncaughtErrorEvents
//		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_events_UncaughtErrorEvents_UncaughtErrorEvents, ::avmshell::UncaughtErrorEventsObject::AS3_constructor)

		//Class VideoEvent
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_VideoEvent_status_get, ::avmshell::VideoEventObject::AS3_status_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_SBBS(flash_events_VideoEvent_VideoEvent, ::avmshell::VideoEventObject::AS3_constructor)

		//Class ExtensionContext
		AVMTHUNK_NATIVE_METHOD_P_SS(flash_external_ExtensionContext_createExtensionContext, ::avmshell::ExtensionContextClass::AS3_createExtensionContext)
		AVMTHUNK_NATIVE_METHOD_P_S(flash_external_ExtensionContext_getExtensionDirectory, ::avmshell::ExtensionContextClass::AS3_getExtensionDirectory)

		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_external_ExtensionContext_actionScriptData_get, ::avmshell::ExtensionContextObject::AS3_actionScriptData_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_external_ExtensionContext_actionScriptData_set, ::avmshell::ExtensionContextObject::AS3_actionScriptData_set)
		AVMTHUNK_NATIVE_METHOD_P_SP(flash_external_ExtensionContext_call, ::avmshell::ExtensionContextObject::AS3_call)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_external_ExtensionContext_dispose, ::avmshell::ExtensionContextObject::AS3_dispose)

		//Class ShaderFilter
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_filters_ShaderFilter_bottomExtension_get, ::avmshell::ShaderFilterObject::AS3_bottomExtension_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_filters_ShaderFilter_bottomExtension_set, ::avmshell::ShaderFilterObject::AS3_bottomExtension_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_filters_ShaderFilter_leftExtension_get, ::avmshell::ShaderFilterObject::AS3_leftExtension_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_filters_ShaderFilter_leftExtension_set, ::avmshell::ShaderFilterObject::AS3_leftExtension_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_filters_ShaderFilter_rightExtension_get, ::avmshell::ShaderFilterObject::AS3_rightExtension_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_filters_ShaderFilter_rightExtension_set, ::avmshell::ShaderFilterObject::AS3_rightExtension_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_filters_ShaderFilter_shader_get, ::avmshell::ShaderFilterObject::AS3_shader_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_filters_ShaderFilter_shader_set, ::avmshell::ShaderFilterObject::AS3_shader_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_filters_ShaderFilter_topExtension_get, ::avmshell::ShaderFilterObject::AS3_topExtension_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_filters_ShaderFilter_topExtension_set, ::avmshell::ShaderFilterObject::AS3_topExtension_set)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_filters_ShaderFilter_ShaderFilter, ::avmshell::ShaderFilterObject::AS3_constructor)

		//Class Matrix3D
		AVMTHUNK_NATIVE_METHOD_P_PPD(flash_geom_Matrix3D_interpolate, ::avmshell::Matrix3DClass::AS3_interpolate)

		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_geom_Matrix3D_determinant_get, ::avmshell::Matrix3DObject::AS3_determinant_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_geom_Matrix3D_position_get, ::avmshell::Matrix3DObject::AS3_position_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_geom_Matrix3D_position_set, ::avmshell::Matrix3DObject::AS3_position_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_geom_Matrix3D_rawData_get, ::avmshell::Matrix3DObject::AS3_rawData_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_geom_Matrix3D_rawData_set, ::avmshell::Matrix3DObject::AS3_rawData_set)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_geom_Matrix3D_Matrix3D, ::avmshell::Matrix3DObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_geom_Matrix3D_append, ::avmshell::Matrix3DObject::AS3_append)
		AVMTHUNK_NATIVE_METHOD_VOID_DPP(flash_geom_Matrix3D_appendRotation, ::avmshell::Matrix3DObject::AS3_appendRotation)
		AVMTHUNK_NATIVE_METHOD_VOID_DDD(flash_geom_Matrix3D_appendScale, ::avmshell::Matrix3DObject::AS3_appendScale)
		AVMTHUNK_NATIVE_METHOD_VOID_DDD(flash_geom_Matrix3D_appendTranslation, ::avmshell::Matrix3DObject::AS3_appendTranslation)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_geom_Matrix3D_clone, ::avmshell::Matrix3DObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_S_MATRIX(flash_geom_Matrix3D_decompose, ::avmshell::Matrix3DObject::AS3_decompose)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_geom_Matrix3D_deltaTransformVector, ::avmshell::Matrix3DObject::AS3_deltaTransformVector)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_geom_Matrix3D_identity, ::avmshell::Matrix3DObject::AS3_identity)
		AVMTHUNK_NATIVE_METHOD_VOID_PD(flash_geom_Matrix3D_interpolateTo, ::avmshell::Matrix3DObject::AS3_interpolateTo)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_geom_Matrix3D_invert, ::avmshell::Matrix3DObject::AS3_invert)
		AVMTHUNK_NATIVE_METHOD_VOID_PPP(flash_geom_Matrix3D_pointAt, ::avmshell::Matrix3DObject::AS3_pointAt)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_geom_Matrix3D_prepend, ::avmshell::Matrix3DObject::AS3_prepend)
		AVMTHUNK_NATIVE_METHOD_VOID_DPP(flash_geom_Matrix3D_prependRotation, ::avmshell::Matrix3DObject::AS3_prependRotation)
		AVMTHUNK_NATIVE_METHOD_VOID_DDD(flash_geom_Matrix3D_prependScale, ::avmshell::Matrix3DObject::AS3_prependScale)
		AVMTHUNK_NATIVE_METHOD_VOID_DDD(flash_geom_Matrix3D_prependTranslation, ::avmshell::Matrix3DObject::AS3_prependTranslation)
		AVMTHUNK_NATIVE_METHOD_B_PS_MATRIX3D(flash_geom_Matrix3D_recompose, ::avmshell::Matrix3DObject::AS3_recompose)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_geom_Matrix3D_transformVector, ::avmshell::Matrix3DObject::AS3_transformVector)
		AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_geom_Matrix3D_transformVectors, ::avmshell::Matrix3DObject::AS3_transformVectors)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_geom_Matrix3D_transpose, ::avmshell::Matrix3DObject::AS3_transpose)

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_VOID_UP(flash_geom_Matrix3D_copyColumnFrom, ::avmshell::Matrix3DObject::AS3_copyColumnFrom)
		AVMTHUNK_NATIVE_METHOD_VOID_UP(flash_geom_Matrix3D_copyColumnTo, ::avmshell::Matrix3DObject::AS3_copyColumnTo)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_geom_Matrix3D_copyFrom, ::avmshell::Matrix3DObject::AS3_copyFrom)
		AVMTHUNK_NATIVE_METHOD_VOID_PUB(flash_geom_Matrix3D_copyRawDataFrom, ::avmshell::Matrix3DObject::AS3_copyRawDataFrom)
		AVMTHUNK_NATIVE_METHOD_VOID_PUB(flash_geom_Matrix3D_copyRawDataTo, ::avmshell::Matrix3DObject::AS3_copyRawDataTo)
		AVMTHUNK_NATIVE_METHOD_VOID_UP(flash_geom_Matrix3D_copyRowFrom, ::avmshell::Matrix3DObject::AS3_copyRowFrom)
		AVMTHUNK_NATIVE_METHOD_VOID_UP(flash_geom_Matrix3D_copyRowTo, ::avmshell::Matrix3DObject::AS3_copyRowTo)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_geom_Matrix3D_copyToMatrix3D, ::avmshell::Matrix3DObject::AS3_copyToMatrix3D)
		//new adds 11 end

		//Class PerspectiveProjection
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_geom_PerspectiveProjection_fieldOfView_get, ::avmshell::PerspectiveProjectionObject::AS3_fieldOfView_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_geom_PerspectiveProjection_fieldOfView_set, ::avmshell::PerspectiveProjectionObject::AS3_fieldOfView_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_geom_PerspectiveProjection_focalLength_get, ::avmshell::PerspectiveProjectionObject::AS3_focalLength_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_geom_PerspectiveProjection_focalLength_set, ::avmshell::PerspectiveProjectionObject::AS3_focalLength_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_geom_PerspectiveProjection_projectionCenter_get, ::avmshell::PerspectiveProjectionObject::AS3_projectionCenter_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_geom_PerspectiveProjection_projectionCenter_set, ::avmshell::PerspectiveProjectionObject::AS3_projectionCenter_set)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_geom_PerspectiveProjection_PerspectiveProjection, ::avmshell::PerspectiveProjectionObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_geom_PerspectiveProjection_toMatrix3D, ::avmshell::PerspectiveProjectionObject::AS3_toMatrix3D)

		AVMTHUNK_NATIVE_METHOD_P_DPPPP(flash_geom_Utils3D_pointTowards, ::avmshell::Utils3DObject::AS3_pointTowards)
		AVMTHUNK_NATIVE_METHOD_P_PP(flash_geom_Utils3D_projectVector, ::avmshell::Utils3DObject::AS3_projectVector)
		AVMTHUNK_NATIVE_METHOD_VOID_PPPP(flash_geom_Utils3D_projectVectors, ::avmshell::Utils3DObject::AS3_projectVectors)


		//class Vector3D
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_angleBetween, ::avmshell::Vector3DObject::AS3_angleBetween)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_distance, ::avmshell::Vector3DObject::AS3_distance)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_length_get, ::avmshell::Vector3DObject::AS3_length_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_lengthSquared_get, ::avmshell::Vector3DObject::AS3_lengthSquared_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_w_get, ::avmshell::Vector3DObject::AS3_w_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_w_set, ::avmshell::Vector3DObject::AS3_w_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_x_get, ::avmshell::Vector3DObject::AS3_x_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_x_set, ::avmshell::Vector3DObject::AS3_x_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_y_get, ::avmshell::Vector3DObject::AS3_y_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_y_set, ::avmshell::Vector3DObject::AS3_y_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_z_get, ::avmshell::Vector3DObject::AS3_z_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_z_set, ::avmshell::Vector3DObject::AS3_z_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_Vector3D, ::avmshell::Vector3DObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_add, ::avmshell::Vector3DObject::AS3_add)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_clone, ::avmshell::Vector3DObject::AS3_clone)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_crossProduct, ::avmshell::Vector3DObject::AS3_crossProduct)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_decrementBy, ::avmshell::Vector3DObject::AS3_decrementBy)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_dotProduct, ::avmshell::Vector3DObject::AS3_dotProduct)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_equals, ::avmshell::Vector3DObject::AS3_equals)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_incrementBy, ::avmshell::Vector3DObject::AS3_incrementBy)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_nearEquals, ::avmshell::Vector3DObject::AS3_nearEquals)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_negate, ::avmshell::Vector3DObject::AS3_negate)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_normalize, ::avmshell::Vector3DObject::AS3_normalize)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_project, ::avmshell::Vector3DObject::AS3_project)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_scaleBy, ::avmshell::Vector3DObject::AS3_scaleBy)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_subtract, ::avmshell::Vector3DObject::AS3_subtract)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_toString, ::avmshell::Vector3DObject::AS3_toString)

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_CopyFrom, ::avmshell::Vector3DObject::AS3_copyFrom)
		AVMTHUNK_NATIVE_METHOD_EX(flash_geom_Vector3D_SetTo, ::avmshell::Vector3DObject::AS3_setTo)
		//new adds 11 end

		//Class CameraRoll
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_media_CameraRoll_supportsAddBitmapData_get, ::avmshell::CameraRollObject::AS3_supportsAddBitmapData_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_media_CameraRoll_supportsBrowseForImage_get, ::avmshell::CameraRollObject::AS3_supportsBrowseForImage_get)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_media_CameraRoll_CameraRoll, ::avmshell::CameraRollObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_media_CameraRoll_addBitmapData, ::avmshell::CameraRollObject::AS3_addBitmapData)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_media_CameraRoll_browseForImage, ::avmshell::CameraRollObject::AS3_browseForImage)

		//Class CameraUI
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_media_CameraUI_isSupported_get, ::avmshell::CameraUIObject::AS3_isSupported_get)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_media_CameraUI_CameraUI, ::avmshell::CameraUIObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_media_CameraUI_launch, ::avmshell::CameraUIObject::AS3_launch)

		//Class MediaPromise
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_MediaPromise_file_get, ::avmshell::MediaPromiseObject::AS3_file_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_media_MediaPromise_isAsync_get, ::avmshell::MediaPromiseObject::AS3_isAsync_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_MediaPromise_mediaType_get, ::avmshell::MediaPromiseObject::AS3_mediaType_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_MediaPromise_relativePath_get, ::avmshell::MediaPromiseObject::AS3_relativePath_get)

		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_media_MediaPromise_close, ::avmshell::MediaPromiseObject::AS3_close)

		AVMTHUNK_NATIVE_METHOD_EX(flash_media_MediaPromise_open, ::avmshell::MediaPromiseObject::AS3_open)

		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_media_MediaPromise_reportError, ::avmshell::MediaPromiseObject::AS3_reportError)

		//Class MicrophoneEnhancedOptions
		//AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_MicrophoneEnhancedOptions_echoPath_get, ::avmshell::MicrophoneEnhancedOptionsObject::AS3_echoPath_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_I(flash_media_MicrophoneEnhancedOptions_echoPath_set, ::avmshell::MicrophoneEnhancedOptionsObject::AS3_echoPath_set)
		//AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_MicrophoneEnhancedOptions_isVoiceDetected_get, ::avmshell::MicrophoneEnhancedOptionsObject::AS3_isVoiceDetected_get)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_MicrophoneEnhancedOptions_mode_get, ::avmshell::MicrophoneEnhancedOptionsObject::AS3_mode_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_P(flash_media_MicrophoneEnhancedOptions_mode_set, ::avmshell::MicrophoneEnhancedOptionsObject::AS3_mode_set)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_media_MicrophoneEnhancedOptions_nonLinearProcessing_get, ::avmshell::MicrophoneEnhancedOptionsObject::AS3_nonLinearProcessing_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_media_MicrophoneEnhancedOptions_nonLinearProcessing_set, ::avmshell::MicrophoneEnhancedOptionsObject::AS3_nonLinearProcessing_set)

		//Class StageVideo
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_StageVideo_colorSpaces_get, ::avmshell::StageVideoObject::AS3_colorSpaces_get)

		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_StageVideo_depth_get, ::avmshell::StageVideoObject::AS3_depth_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_media_StageVideo_depth_set, ::avmshell::StageVideoObject::AS3_depth_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_StageVideo_pan_get, ::avmshell::StageVideoObject::AS3_pan_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_media_StageVideo_pan_set, ::avmshell::StageVideoObject::AS3_pan_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_StageVideo_videoHeight_get, ::avmshell::StageVideoObject::AS3_videoHeight_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_StageVideo_videoWidth_get, ::avmshell::StageVideoObject::AS3_videoWidth_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_StageVideo_viewPort_get, ::avmshell::StageVideoObject::AS3_viewPort_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_media_StageVideo_viewPort_set, ::avmshell::StageVideoObject::AS3_viewPort_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_StageVideo_zoom_get, ::avmshell::StageVideoObject::AS3_zoom_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_media_StageVideo_zoom_set, ::avmshell::StageVideoObject::AS3_zoom_set)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_media_StageVideo_attachNetStream, ::avmshell::StageVideoObject::AS3_attachNetStream)

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_media_StageVideo_attachCamera, ::avmshell::StageVideoObject::AS3_attachCamera)
		//new adds 11 end

		//Class StageWebView
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_media_StageWebView_isSupported_get, ::avmshell::StageWebViewObject::AS3_isSupported_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_media_StageWebView_isHistoryBackEnabled_get, ::avmshell::StageWebViewObject::AS3_isHistoryBackEnabled_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_media_StageWebView_isHistoryForwardEnabled_get, ::avmshell::StageWebViewObject::AS3_isHistoryForwardEnabled_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_StageWebView_location_get, ::avmshell::StageWebViewObject::AS3_location_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_StageWebView_stage_get, ::avmshell::StageWebViewObject::AS3_stage_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_media_StageWebView_stage_set, ::avmshell::StageWebViewObject::AS3_stage_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_StageWebView_title_get, ::avmshell::StageWebViewObject::AS3_title_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_StageWebView_viewPort_get, ::avmshell::StageWebViewObject::AS3_viewPort_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_media_StageWebView_viewPort_set, ::avmshell::StageWebViewObject::AS3_viewPort_set)

		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_media_StageWebView_StageWebView, ::avmshell::StageWebViewObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_media_StageWebView_assignFocus, ::avmshell::StageWebViewObject::AS3_assignFocus)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_media_StageWebView_dispose, ::avmshell::StageWebViewObject::AS3_dispose)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_media_StageWebView_drawViewPortToBitmapData, ::avmshell::StageWebViewObject::AS3_drawViewPortToBitmapData)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_media_StageWebView_historyBack, ::avmshell::StageWebViewObject::AS3_historyBack)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_media_StageWebView_historyForward, ::avmshell::StageWebViewObject::AS3_historyForward)
		AVMTHUNK_NATIVE_METHOD_VOID_SS(flash_media_StageWebView_loadString, ::avmshell::StageWebViewObject::AS3_loadString)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_media_StageWebView_loadURL, ::avmshell::StageWebViewObject::AS3_loadURL)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_media_StageWebView_reload, ::avmshell::StageWebViewObject::AS3_reload)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_media_StageWebView_stop, ::avmshell::StageWebViewObject::AS3_stop)

		//Class DatagramSocket
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_DatagramSocket_isSupported_get, ::avmshell::DatagramSocketObject::AS3_isSupported_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_DatagramSocket_bound_get, ::avmshell::DatagramSocketObject::AS3_bound_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_DatagramSocket_connected_get, ::avmshell::DatagramSocketObject::AS3_connected_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_DatagramSocket_localAddress_get, ::avmshell::DatagramSocketObject::AS3_localAddress_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_net_DatagramSocket_localPort_get, ::avmshell::DatagramSocketObject::AS3_localPort_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_DatagramSocket_remoteAddress_get, ::avmshell::DatagramSocketObject::AS3_remoteAddress_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_net_DatagramSocket_remotePort_get, ::avmshell::DatagramSocketObject::AS3_remotePort_get)

		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_DatagramSocket_DatagramSocket, ::avmshell::DatagramSocketObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_IS(flash_net_DatagramSocket_bind, ::avmshell::DatagramSocketObject::AS3_bind)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_DatagramSocket_close, ::avmshell::DatagramSocketObject::AS3_close)
		AVMTHUNK_NATIVE_METHOD_VOID_SI(flash_net_DatagramSocket_connect, ::avmshell::DatagramSocketObject::AS3_connect)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_DatagramSocket_receive, ::avmshell::DatagramSocketObject::AS3_receive)
		AVMTHUNK_NATIVE_METHOD_VOID_PUUSI(flash_net_DatagramSocket_send, ::avmshell::DatagramSocketObject::AS3_send)

		//Class GroupSpecifier
		//AVMTHUNK_NATIVE_METHOD_P_S(flash_net_GroupSpecifier_encodeBootstrapPeerIDSpec, ::avmshell::GroupSpecifierObject::AS3_encodeBootstrapPeerIDSpec)
		//AVMTHUNK_NATIVE_METHOD_P_SPS(flash_net_GroupSpecifier_encodeIPMulticastAddressSpec, ::avmshell::GroupSpecifierObject::AS3_encodeIPMulticastAddressSpec)
		//AVMTHUNK_NATIVE_METHOD_P_S(flash_net_GroupSpecifier_encodePostingAuthorization, ::avmshell::GroupSpecifierObject::AS3_encodePostingAuthorization)
		//AVMTHUNK_NATIVE_METHOD_P_S(flash_net_GroupSpecifier_encodePublishAuthorization, ::avmshell::GroupSpecifierObject::AS3_encodePublishAuthorization)

		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_GroupSpecifier_ipMulticastMemberUpdatesEnabled_get, ::avmshell::GroupSpecifierObject::AS3_ipMulticastMemberUpdatesEnabled_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_GroupSpecifier_ipMulticastMemberUpdatesEnabled_set, ::avmshell::GroupSpecifierObject::AS3_ipMulticastMemberUpdatesEnabled_set)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_GroupSpecifier_multicastEnabled_get, ::avmshell::GroupSpecifierObject::AS3_multicastEnabled_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_GroupSpecifier_multicastEnabled_set, ::avmshell::GroupSpecifierObject::AS3_multicastEnabled_set)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_GroupSpecifier_objectReplicationEnabled_get, ::avmshell::GroupSpecifierObject::AS3_objectReplicationEnabled_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_GroupSpecifier_objectReplicationEnabled_set, ::avmshell::GroupSpecifierObject::AS3_objectReplicationEnabled_set)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_GroupSpecifier_peerToPeerDisabled_get, ::avmshell::GroupSpecifierObject::AS3_peerToPeerDisabled_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_GroupSpecifier_peerToPeerDisabled_set, ::avmshell::GroupSpecifierObject::AS3_peerToPeerDisabled_set)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_GroupSpecifier_postingEnabled_get, ::avmshell::GroupSpecifierObject::AS3_postingEnabled_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_GroupSpecifier_postingEnabled_set, ::avmshell::GroupSpecifierObject::AS3_postingEnabled_set)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_GroupSpecifier_routingEnabled_get, ::avmshell::GroupSpecifierObject::AS3_routingEnabled_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_GroupSpecifier_routingEnabled_set, ::avmshell::GroupSpecifierObject::AS3_routingEnabled_set)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_GroupSpecifier_serverChannelEnabled_get, ::avmshell::GroupSpecifierObject::AS3_serverChannelEnabled_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_GroupSpecifier_serverChannelEnabled_set, ::avmshell::GroupSpecifierObject::AS3_serverChannelEnabled_set)

		//AVMTHUNK_NATIVE_METHOD_VOID_S(flash_net_GroupSpecifier_GroupSpecifier, ::avmshell::GroupSpecifierObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_VOID_S(flash_net_GroupSpecifier_addBootstrapPeer, ::avmshell::GroupSpecifierObject::AS3_addBootstrapPeer)
		//AVMTHUNK_NATIVE_METHOD_VOID_SPS(flash_net_GroupSpecifier_addIPMulticastAddress, ::avmshell::GroupSpecifierObject::AS3_addIPMulticastAddress)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_GroupSpecifier_authorizations, ::avmshell::GroupSpecifierObject::AS3_authorizations)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_GroupSpecifier_groupspecWithAuthorizations, ::avmshell::GroupSpecifierObject::AS3_groupspecWithAuthorizations)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_GroupSpecifier_groupspecWithoutAuthorizations, ::avmshell::GroupSpecifierObject::AS3_groupspecWithoutAuthorizations)
		//AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_GroupSpecifier_makeUnique, ::avmshell::GroupSpecifierObject::AS3_makeUnique)
		//AVMTHUNK_NATIVE_METHOD_VOID_SS(flash_net_GroupSpecifier_setPostingPassword, ::avmshell::GroupSpecifierObject::AS3_setPostingPassword)
		//AVMTHUNK_NATIVE_METHOD_VOID_SS(flash_net_GroupSpecifier_setPublishPassword, ::avmshell::GroupSpecifierObject::AS3_setPublishPassword)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_GroupSpecifier_toString, ::avmshell::GroupSpecifierObject::AS3_toString)

		AVMTHUNK_NATIVE_METHOD_P_P(flash_net_GroupSpecifier_private_calcSHA256Digest, ::avmshell::GroupSpecifierClass::AS3_calcSHA256Digest)
		AVMTHUNK_NATIVE_METHOD_P_U(flash_net_GroupSpecifier_private_GetCryptoRandomString, ::avmshell::GroupSpecifierClass::AS3_GetCryptoRandomString)

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_net_GroupSpecifier_maxSupportedGroupspecVersion_get, ::avmshell::GroupSpecifierClass::AS3_maxSupportedGroupspecVersion_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_net_GroupSpecifier_minGroupspecVersion_get, ::avmshell::GroupSpecifierObject::AS3_minGroupspecVersion_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_net_GroupSpecifier_minGroupspecVersion_set, ::avmshell::GroupSpecifierObject::AS3_minGroupspecVersion_set)
		//new adds 11 end

		//Class InterfaceAddress
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_InterfaceAddress_address_get, ::avmshell::InterfaceAddressObject::AS3_address_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_net_InterfaceAddress_address_set, ::avmshell::InterfaceAddressObject::AS3_address_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_InterfaceAddress_broadcast_get, ::avmshell::InterfaceAddressObject::AS3_broadcast_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_net_InterfaceAddress_broadcast_set, ::avmshell::InterfaceAddressObject::AS3_broadcast_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_InterfaceAddress_ipVersion_get, ::avmshell::InterfaceAddressObject::AS3_ipVersion_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_net_InterfaceAddress_ipVersion_set, ::avmshell::InterfaceAddressObject::AS3_ipVersion_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_net_InterfaceAddress_prefixLength_get, ::avmshell::InterfaceAddressObject::AS3_prefixLength_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_net_InterfaceAddress_prefixLength_set, ::avmshell::InterfaceAddressObject::AS3_prefixLength_set)

		//Class NetGroup
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetGroup_estimatedMemberCount_get, ::avmshell::NetGroupObject::AS3_estimatedMemberCount_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetGroup_neighborCount_get, ::avmshell::NetGroupObject::AS3_neighborCount_get)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetGroup_receiveMode_get, ::avmshell::NetGroupObject::AS3_receiveMode_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_S(flash_net_NetGroup_receiveMode_set, ::avmshell::NetGroupObject::AS3_receiveMode_set)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetGroup_replicationStrategy_get, ::avmshell::NetGroupObject::AS3_replicationStrategy_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_S(flash_net_NetGroup_replicationStrategy_set, ::avmshell::NetGroupObject::AS3_replicationStrategy_set)

		//AVMTHUNK_NATIVE_METHOD_VOID_DD(flash_net_NetGroup_addHaveObjects, ::avmshell::NetGroupObject::AS3_addHaveObjects)
		//AVMTHUNK_NATIVE_METHOD_B_S(flash_net_NetGroup_addMemberHint, ::avmshell::NetGroupObject::AS3_addMemberHint)
		//AVMTHUNK_NATIVE_METHOD_B_S(flash_net_NetGroup_addNeighbor, ::avmshell::NetGroupObject::AS3_addNeighbor)
		//AVMTHUNK_NATIVE_METHOD_VOID_DD(flash_net_NetGroup_addWantObjects, ::avmshell::NetGroupObject::AS3_addWantObjects)
		//AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_NetGroup_close, ::avmshell::NetGroupObject::AS3_close)
		//AVMTHUNK_NATIVE_METHOD_VOID_I(flash_net_NetGroup_denyRequestedObject, ::avmshell::NetGroupObject::AS3_denyRequestedObject)
		//AVMTHUNK_NATIVE_METHOD_P_P(flash_net_NetGroup_post, ::avmshell::NetGroupObject::AS3_post)
		//AVMTHUNK_NATIVE_METHOD_VOID_DD(flash_net_NetGroup_removeHaveObjects, ::avmshell::NetGroupObject::AS3_removeHaveObjects)
		//AVMTHUNK_NATIVE_METHOD_VOID_DD(flash_net_NetGroup_removeWantObjects, ::avmshell::NetGroupObject::AS3_removeWantObjects)
		//AVMTHUNK_NATIVE_METHOD_P_P(flash_net_NetGroup_sendToAllNeighbors, ::avmshell::NetGroupObject::AS3_sendToAllNeighbors)
		//AVMTHUNK_NATIVE_METHOD_P_PS(flash_net_NetGroup_sendToNearest, ::avmshell::NetGroupObject::AS3_sendToNearest)
		//AVMTHUNK_NATIVE_METHOD_P_PS(flash_net_NetGroup_sendToNeighbor, ::avmshell::NetGroupObject::AS3_sendToNeighbor)
		//AVMTHUNK_NATIVE_METHOD_VOID_IP(flash_net_NetGroup_writeRequestedObject, ::avmshell::NetGroupObject::AS3_writeRequestedObject)

		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetGroup_info_get, ::avmshell::NetGroupObject::AS3_info_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetGroup_localCoverageFrom_get, ::avmshell::NetGroupObject::AS3_localCoverageFrom_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetGroup_localCoverageTo_get, ::avmshell::NetGroupObject::AS3_localCoverageTo_get)

		AVMTHUNK_NATIVE_METHOD_VOID_PS(flash_net_NetGroup_NetGroup, ::avmshell::NetGroupObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_S(flash_net_NetGroup_convertPeerIDToGroupAddress, ::avmshell::NetGroupObject::AS3_convertPeerIDToGroupAddress)
		AVMTHUNK_NATIVE_METHOD_A_UP(flash_net_NetGroup_private_invoke, ::avmshell::NetGroupObject::AS3_invoke)

		//Class NetGroupInfo
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetGroupInfo_objectReplicationReceiveBytesPerSecond_get, ::avmshell::NetGroupInfoObject::AS3_objectReplicationReceiveBytesPerSecond_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetGroupInfo_objectReplicationSendBytesPerSecond_get, ::avmshell::NetGroupInfoObject::AS3_objectReplicationSendBytesPerSecond_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetGroupInfo_postingReceiveControlBytesPerSecond_get, ::avmshell::NetGroupInfoObject::AS3_postingReceiveControlBytesPerSecond_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetGroupInfo_postingReceiveDataBytesPerSecond_get, ::avmshell::NetGroupInfoObject::AS3_postingReceiveDataBytesPerSecond_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetGroupInfo_postingSendControlBytesPerSecond_get, ::avmshell::NetGroupInfoObject::AS3_postingSendControlBytesPerSecond_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetGroupInfo_postingSendDataBytesPerSecond_get, ::avmshell::NetGroupInfoObject::AS3_postingSendDataBytesPerSecond_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetGroupInfo_routingReceiveBytesPerSecond_get, ::avmshell::NetGroupInfoObject::AS3_routingReceiveBytesPerSecond_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetGroupInfo_routingSendBytesPerSecond_get, ::avmshell::NetGroupInfoObject::AS3_routingSendBytesPerSecond_get)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetGroupInfo_toString, ::avmshell::NetGroupInfoObject::AS3_toString)

		//class NetMonitor
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetMonitor_listStreams, ::avmshell::NetMonitorObject::AS3_listStreams)

		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_resetDRMVouchers, ::avmshell::NetStreamObject::AS3_resetDRMVouchers)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_bufferLength_get, ::avmshell::NetStreamObject::AS3_bufferLength_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_bufferTime_get, ::avmshell::NetStreamObject::AS3_bufferTime_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_bufferTime_set, ::avmshell::NetStreamObject::AS3_bufferTime_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_bytesLoaded_get, ::avmshell::NetStreamObject::AS3_bytesLoaded_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_bytesTotal_get, ::avmshell::NetStreamObject::AS3_bytesTotal_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_checkPolicyFile_get, ::avmshell::NetStreamObject::AS3_checkPolicyFile_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_checkPolicyFile_set, ::avmshell::NetStreamObject::AS3_checkPolicyFile_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_client_get, ::avmshell::NetStreamObject::AS3_client_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_client_set, ::avmshell::NetStreamObject::AS3_client_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_currentFPS_get, ::avmshell::NetStreamObject::AS3_currentFPS_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_liveDelay_get, ::avmshell::NetStreamObject::AS3_liveDelay_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_objectEncoding_get, ::avmshell::NetStreamObject::AS3_objectEncoding_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_soundTransform_get, ::avmshell::NetStreamObject::AS3_soundTransform_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_soundTransform_set, ::avmshell::NetStreamObject::AS3_soundTransform_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_time_get, ::avmshell::NetStreamObject::AS3_time_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_audioReliable_get, ::avmshell::NetStreamObject::AS3_audioReliable_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_audioReliable_set, ::avmshell::NetStreamObject::AS3_audioReliable_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_audioSampleAccess_get, ::avmshell::NetStreamObject::AS3_audioSampleAccess_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_audioSampleAccess_set, ::avmshell::NetStreamObject::AS3_audioSampleAccess_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_backBufferLength_get, ::avmshell::NetStreamObject::AS3_backBufferLength_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_backBufferTime_get, ::avmshell::NetStreamObject::AS3_backBufferTime_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_backBufferTime_set, ::avmshell::NetStreamObject::AS3_backBufferTime_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_bufferTimeMax_get, ::avmshell::NetStreamObject::AS3_bufferTimeMax_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_bufferTimeMax_set, ::avmshell::NetStreamObject::AS3_bufferTimeMax_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_dataReliable_get, ::avmshell::NetStreamObject::AS3_dataReliable_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_dataReliable_set, ::avmshell::NetStreamObject::AS3_dataReliable_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_farID_get, ::avmshell::NetStreamObject::AS3_farID_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_farNonce_get, ::avmshell::NetStreamObject::AS3_farNonce_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_inBufferSeek_get, ::avmshell::NetStreamObject::AS3_inBufferSeek_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_inBufferSeek_set, ::avmshell::NetStreamObject::AS3_inBufferSeek_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_info_get, ::avmshell::NetStreamObject::AS3_info_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_maxPauseBufferTime_get, ::avmshell::NetStreamObject::AS3_maxPauseBufferTime_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_maxPauseBufferTime_set, ::avmshell::NetStreamObject::AS3_maxPauseBufferTime_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_multicastAvailabilitySendToAll_get, ::avmshell::NetStreamObject::AS3_multicastAvailabilitySendToAll_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_multicastAvailabilitySendToAll_set, ::avmshell::NetStreamObject::AS3_multicastAvailabilitySendToAll_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_multicastAvailabilityUpdatePeriod_get, ::avmshell::NetStreamObject::AS3_multicastAvailabilityUpdatePeriod_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_multicastAvailabilityUpdatePeriod_set, ::avmshell::NetStreamObject::AS3_multicastAvailabilityUpdatePeriod_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_multicastFetchPeriod_get, ::avmshell::NetStreamObject::AS3_multicastFetchPeriod_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_multicastFetchPeriod_set, ::avmshell::NetStreamObject::AS3_multicastFetchPeriod_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_multicastInfo_get, ::avmshell::NetStreamObject::AS3_multicastInfo_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_multicastPushNeighborLimit_get, ::avmshell::NetStreamObject::AS3_multicastPushNeighborLimit_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_multicastPushNeighborLimit_set, ::avmshell::NetStreamObject::AS3_multicastPushNeighborLimit_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_multicastRelayMarginDuration_get, ::avmshell::NetStreamObject::AS3_multicastRelayMarginDuration_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_multicastRelayMarginDuration_set, ::avmshell::NetStreamObject::AS3_multicastRelayMarginDuration_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_multicastWindowDuration_get, ::avmshell::NetStreamObject::AS3_multicastWindowDuration_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_multicastWindowDuration_set, ::avmshell::NetStreamObject::AS3_multicastWindowDuration_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_nearNonce_get, ::avmshell::NetStreamObject::AS3_nearNonce_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_peerStreams_get, ::avmshell::NetStreamObject::AS3_peerStreams_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_videoReliable_get, ::avmshell::NetStreamObject::AS3_videoReliable_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_videoReliable_set, ::avmshell::NetStreamObject::AS3_videoReliable_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_videoSampleAccess_get, ::avmshell::NetStreamObject::AS3_videoSampleAccess_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_videoSampleAccess_set, ::avmshell::NetStreamObject::AS3_videoSampleAccess_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_NetStream, ::avmshell::NetStreamObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_attachAudio, ::avmshell::NetStreamObject::AS3_attachAudio)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_attachCamera, ::avmshell::NetStreamObject::AS3_attachCamera)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_close, ::avmshell::NetStreamObject::AS3_close)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_pause, ::avmshell::NetStreamObject::AS3_pause)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_play, ::avmshell::NetStreamObject::AS3_play)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_publish, ::avmshell::NetStreamObject::AS3_publish)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_receiveAudio, ::avmshell::NetStreamObject::AS3_receiveAudio)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_receiveVideo, ::avmshell::NetStreamObject::AS3_receiveVideo)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_resume, ::avmshell::NetStreamObject::AS3_resume)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_seek, ::avmshell::NetStreamObject::AS3_seek)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_send, ::avmshell::NetStreamObject::AS3_send)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_togglePause, ::avmshell::NetStreamObject::AS3_togglePause)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_appendBytes, ::avmshell::NetStreamObject::AS3_appendBytes)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_appendBytesAction, ::avmshell::NetStreamObject::AS3_appendBytesAction)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_attach, ::avmshell::NetStreamObject::AS3_attach)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_onPeerConnect, ::avmshell::NetStreamObject::AS3_onPeerConnect)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_play2, ::avmshell::NetStreamObject::AS3_play2)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_preloadEmbeddedData, ::avmshell::NetStreamObject::AS3_preloadEmbeddedData)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_receiveVideoFPS, ::avmshell::NetStreamObject::AS3_receiveVideoFPS)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_setDRMAuthenticationCredentials, ::avmshell::NetStreamObject::AS3_setDRMAuthenticationCredentials)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetStream_step, ::avmshell::NetStreamObject::AS3_step)

		//Class NetStreamInfo
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamInfo_audioBufferByteLength_get, ::avmshell::NetStreamInfoObject::AS3_audioBufferByteLength_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamInfo_audioBufferLength_get, ::avmshell::NetStreamInfoObject::AS3_audioBufferLength_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamInfo_audioByteCount_get, ::avmshell::NetStreamInfoObject::AS3_audioByteCount_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamInfo_audioBytesPerSecond_get, ::avmshell::NetStreamInfoObject::AS3_audioBytesPerSecond_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamInfo_audioLossRate_get, ::avmshell::NetStreamInfoObject::AS3_audioLossRate_get)

		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamInfo_byteCount_get, ::avmshell::NetStreamInfoObject::AS3_byteCount_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamInfo_currentBytesPerSecond_get, ::avmshell::NetStreamInfoObject::AS3_currentBytesPerSecond_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamInfo_dataBufferByteLength_get, ::avmshell::NetStreamInfoObject::AS3_dataBufferByteLength_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamInfo_dataBufferLength_get, ::avmshell::NetStreamInfoObject::AS3_dataBufferLength_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamInfo_dataByteCount_get, ::avmshell::NetStreamInfoObject::AS3_dataByteCount_get)

		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamInfo_dataBytesPerSecond_get, ::avmshell::NetStreamInfoObject::AS3_dataBytesPerSecond_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamInfo_droppedFrames_get, ::avmshell::NetStreamInfoObject::AS3_droppedFrames_get)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_NetStreamInfo_isLive_get, ::avmshell::NetStreamInfoObject::AS3_isLive_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamInfo_maxBytesPerSecond_get, ::avmshell::NetStreamInfoObject::AS3_maxBytesPerSecond_get)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetStreamInfo_metaData_get, ::avmshell::NetStreamInfoObject::AS3_metaData_get)

		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamInfo_playbackBytesPerSecond_get, ::avmshell::NetStreamInfoObject::AS3_playbackBytesPerSecond_get)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetStreamInfo_resourceName_get, ::avmshell::NetStreamInfoObject::AS3_resourceName_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamInfo_SRTT_get, ::avmshell::NetStreamInfoObject::AS3_SRTT_get)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetStreamInfo_uri_get, ::avmshell::NetStreamInfoObject::AS3_uri_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamInfo_videoBufferByteLength_get, ::avmshell::NetStreamInfoObject::AS3_videoBufferByteLength_get)

		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamInfo_videoBufferLength_get, ::avmshell::NetStreamInfoObject::AS3_videoBufferLength_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamInfo_videoByteCount_get, ::avmshell::NetStreamInfoObject::AS3_videoByteCount_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamInfo_videoBytesPerSecond_get, ::avmshell::NetStreamInfoObject::AS3_videoBytesPerSecond_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamInfo_videoLossRate_get, ::avmshell::NetStreamInfoObject::AS3_videoLossRate_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamInfo_xmpData_get, ::avmshell::NetStreamInfoObject::AS3_xmpData_get)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetStreamInfo_toString, ::avmshell::NetStreamInfoObject::AS3_toString)

		//Class NetStreamMulticastInfo
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamMulticastInfo_bytesPushedFromPeers_get, ::avmshell::NetStreamMulticastInfoObject::AS3_bytesPushedFromPeers_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamMulticastInfo_bytesPushedToPeers_get, ::avmshell::NetStreamMulticastInfoObject::AS3_bytesPushedToPeers_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamMulticastInfo_bytesReceivedFromIPMulticast_get, ::avmshell::NetStreamMulticastInfoObject::AS3_bytesReceivedFromIPMulticast_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamMulticastInfo_bytesReceivedFromServer_get, ::avmshell::NetStreamMulticastInfoObject::AS3_bytesReceivedFromServer_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamMulticastInfo_bytesRequestedByPeers_get, ::avmshell::NetStreamMulticastInfoObject::AS3_bytesRequestedByPeers_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamMulticastInfo_bytesRequestedFromPeers_get, ::avmshell::NetStreamMulticastInfoObject::AS3_bytesRequestedFromPeers_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamMulticastInfo_fragmentsPushedFromPeers_get, ::avmshell::NetStreamMulticastInfoObject::AS3_fragmentsPushedFromPeers_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamMulticastInfo_fragmentsPushedToPeers_get, ::avmshell::NetStreamMulticastInfoObject::AS3_fragmentsPushedToPeers_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamMulticastInfo_fragmentsReceivedFromIPMulticast_get, ::avmshell::NetStreamMulticastInfoObject::AS3_fragmentsReceivedFromIPMulticast_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamMulticastInfo_fragmentsReceivedFromServer_get, ::avmshell::NetStreamMulticastInfoObject::AS3_fragmentsReceivedFromServer_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamMulticastInfo_fragmentsRequestedByPeers_get, ::avmshell::NetStreamMulticastInfoObject::AS3_fragmentsRequestedByPeers_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamMulticastInfo_fragmentsRequestedFromPeers_get, ::avmshell::NetStreamMulticastInfoObject::AS3_fragmentsRequestedFromPeers_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamMulticastInfo_receiveControlBytesPerSecond_get, ::avmshell::NetStreamMulticastInfoObject::AS3_receiveControlBytesPerSecond_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamMulticastInfo_receiveDataBytesPerSecond_get, ::avmshell::NetStreamMulticastInfoObject::AS3_receiveDataBytesPerSecond_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamMulticastInfo_receiveDataBytesPerSecondFromIPMulticast_get, ::avmshell::NetStreamMulticastInfoObject::AS3_receiveDataBytesPerSecondFromIPMulticast_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamMulticastInfo_receiveDataBytesPerSecondFromServer_get, ::avmshell::NetStreamMulticastInfoObject::AS3_receiveDataBytesPerSecondFromServer_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamMulticastInfo_sendControlBytesPerSecond_get, ::avmshell::NetStreamMulticastInfoObject::AS3_sendControlBytesPerSecond_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamMulticastInfo_sendControlBytesPerSecondToServer_get, ::avmshell::NetStreamMulticastInfoObject::AS3_sendControlBytesPerSecondToServer_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamMulticastInfo_sendDataBytesPerSecond_get, ::avmshell::NetStreamMulticastInfoObject::AS3_sendDataBytesPerSecond_get)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetStreamMulticastInfo_toString, ::avmshell::NetStreamMulticastInfoObject::AS3_toString)

		//Class NetStreamPlayOptions
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamPlayOptions_len_get, ::avmshell::NetStreamPlayOptionsObject::AS3_len_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_net_NetStreamPlayOptions_len_set, ::avmshell::NetStreamPlayOptionsObject::AS3_len_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamPlayOptions_offset_get, ::avmshell::NetStreamPlayOptionsObject::AS3_offset_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_net_NetStreamPlayOptions_offset_set, ::avmshell::NetStreamPlayOptionsObject::AS3_offset_set)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetStreamPlayOptions_oldStreamName_get, ::avmshell::NetStreamPlayOptionsObject::AS3_oldStreamName_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_S(flash_net_NetStreamPlayOptions_oldStreamName_set, ::avmshell::NetStreamPlayOptionsObject::AS3_oldStreamName_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_NetStreamPlayOptions_start_get, ::avmshell::NetStreamPlayOptionsObject::AS3_start_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_net_NetStreamPlayOptions_start_set, ::avmshell::NetStreamPlayOptionsObject::AS3_start_set)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetStreamPlayOptions_streamName_get, ::avmshell::NetStreamPlayOptionsObject::AS3_streamName_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_S(flash_net_NetStreamPlayOptions_streamName_set, ::avmshell::NetStreamPlayOptionsObject::AS3_streamName_set)
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetStreamPlayOptions_transition_get, ::avmshell::NetStreamPlayOptionsObject::AS3_transition_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_S(flash_net_NetStreamPlayOptions_transition_set, ::avmshell::NetStreamPlayOptionsObject::AS3_transition_set)
		//AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_NetStreamPlayOptions_NetStreamPlayOptions, ::avmshell::NetStreamPlayOptionsObject::AS3_constructor)

		//Class NetworkInfo
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_NetworkInfo_isSupported_get, ::avmshell::NetworkInfoObject::AS3_isSupported_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetworkInfo_networkInfo_get, ::avmshell::NetworkInfoObject::AS3_networkInfo_get)

		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetworkInfo_findInterfaces, ::avmshell::NetworkInfoObject::AS3_findInterfaces)

		//Class NetworkInterface
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_NetworkInterface_active_get, ::avmshell::NetworkInterfaceObject::AS3_active_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_NetworkInterface_active_set, ::avmshell::NetworkInterfaceObject::AS3_active_set)

		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetworkInterface_addresses_get, ::avmshell::NetworkInterfaceObject::AS3_addresses_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetworkInterface_addresses_set, ::avmshell::NetworkInterfaceObject::AS3_addresses_set)

		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetworkInterface_displayName_get, ::avmshell::NetworkInterfaceObject::AS3_displayName_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_net_NetworkInterface_displayName_set, ::avmshell::NetworkInterfaceObject::AS3_displayName_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetworkInterface_hardwareAddress_get, ::avmshell::NetworkInterfaceObject::AS3_hardwareAddress_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_net_NetworkInterface_hardwareAddress_set, ::avmshell::NetworkInterfaceObject::AS3_hardwareAddress_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_net_NetworkInterface_mtu_get, ::avmshell::NetworkInterfaceObject::AS3_mtu_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_net_NetworkInterface_mtu_set, ::avmshell::NetworkInterfaceObject::AS3_mtu_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetworkInterface_name_get, ::avmshell::NetworkInterfaceObject::AS3_name_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_net_NetworkInterface_name_set, ::avmshell::NetworkInterfaceObject::AS3_name_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_NetworkInterface_parent_get, ::avmshell::NetworkInterfaceObject::AS3_parent_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_NetworkInterface_parent_set, ::avmshell::NetworkInterfaceObject::AS3_parent_set)

		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetworkInterface_subInterfaces_get, ::avmshell::NetworkInterfaceObject::AS3_subInterfaces_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_NetworkInterface_subInterfaces_set, ::avmshell::NetworkInterfaceObject::AS3_subInterfaces_set)

		//Class SecureSocket
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_SecureSocket_isSupported_get, ::avmshell::SecureSocketClass::AS3_isSupported_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_SecureSocket_serverCertificateStatus_get, ::avmshell::SecureSocketObject::AS3_serverCertificateStatus_get)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_SecureSocket_SecureSocket, ::avmshell::SecureSocketObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_SI(flash_net_SecureSocket_connect, ::avmshell::SecureSocketObject::AS3_connect)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_SecureSocket_serverCertificate_get, ::avmshell::SecureSocketObject::AS3_serverCertificate_get)
		AVMTHUNK_NATIVE_METHOD_VOID_PB(flash_net_SecureSocket_addBinaryChainBuildingCertificate, ::avmshell::SecureSocketObject::AS3_addBinaryChainBuildingCertificate)

		//Class ServerSocket
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_ServerSocket_isSupported_get, ::avmshell::ServerSocketObject::AS3_isSupported_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_ServerSocket_bound_get, ::avmshell::ServerSocketObject::AS3_bound_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_ServerSocket_listening_get, ::avmshell::ServerSocketObject::AS3_listening_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_ServerSocket_localAddress_get, ::avmshell::ServerSocketObject::AS3_localAddress_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_net_ServerSocket_localPort_get, ::avmshell::ServerSocketObject::AS3_localPort_get)

		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_ServerSocket_ServerSocket, ::avmshell::ServerSocketObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_IS(flash_net_ServerSocket_bind, ::avmshell::ServerSocketObject::AS3_bind)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_ServerSocket_close, ::avmshell::ServerSocketObject::AS3_close)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_net_ServerSocket_listen, ::avmshell::ServerSocketObject::AS3_listen)

		//Class URLRequestDefaults
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_URLRequestDefaults_authenticate_get, ::avmshell::URLRequestDefaultsClass::AS3_authenticate_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_URLRequestDefaults_authenticate_set, ::avmshell::URLRequestDefaultsClass::AS3_authenticate_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_URLRequestDefaults_cacheResponse_get, ::avmshell::URLRequestDefaultsClass::AS3_cacheResponse_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_URLRequestDefaults_cacheResponse_set, ::avmshell::URLRequestDefaultsClass::AS3_cacheResponse_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_URLRequestDefaults_followRedirects_get, ::avmshell::URLRequestDefaultsClass::AS3_followRedirects_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_URLRequestDefaults_followRedirects_set, ::avmshell::URLRequestDefaultsClass::AS3_followRedirects_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_URLRequestDefaults_idleTimeout_get, ::avmshell::URLRequestDefaultsClass::AS3_idleTimeout_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_net_URLRequestDefaults_idleTimeout_set, ::avmshell::URLRequestDefaultsClass::AS3_idleTimeout_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_URLRequestDefaults_manageCookies_get, ::avmshell::URLRequestDefaultsClass::AS3_manageCookies_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_URLRequestDefaults_manageCookies_set, ::avmshell::URLRequestDefaultsClass::AS3_manageCookies_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_URLRequestDefaults_useCache_get, ::avmshell::URLRequestDefaultsClass::AS3_useCache_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_net_URLRequestDefaults_useCache_set, ::avmshell::URLRequestDefaultsClass::AS3_useCache_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_URLRequestDefaults_userAgent_get, ::avmshell::URLRequestDefaultsClass::AS3_userAgent_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_net_URLRequestDefaults_userAgent_set, ::avmshell::URLRequestDefaultsClass::AS3_userAgent_set)
		AVMTHUNK_NATIVE_METHOD_P_SSS(flash_net_URLRequestDefaults_setLoginCredentialsForHost, ::avmshell::URLRequestDefaultsClass::AS3_setLoginCredentialsForHost)

		//Class PrintUIOptions
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_printing_PrintUIOptions_disablePageRange_get, ::avmshell::PrintUIOptionsObject::AS3_disablePageRange_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_printing_PrintUIOptions_disablePageRange_set, ::avmshell::PrintUIOptionsObject::AS3_disablePageRange_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_printing_PrintUIOptions_maxPage_get, ::avmshell::PrintUIOptionsObject::AS3_maxPage_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_printing_PrintUIOptions_maxPage_set, ::avmshell::PrintUIOptionsObject::AS3_maxPage_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_printing_PrintUIOptions_minPage_get, ::avmshell::PrintUIOptionsObject::AS3_minPage_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_printing_PrintUIOptions_minPage_set, ::avmshell::PrintUIOptionsObject::AS3_minPage_set)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_printing_PrintUIOptions_PrintUIOptions, ::avmshell::PrintUIOptionsObject::AS3_constructor)

		//Class JPEGLoaderContext
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_system_JPEGLoaderContext_deblockingFilter_get, ::avmshell::JPEGLoaderContextObject::AS3_deblockingFilter_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_system_JPEGLoaderContext_deblockingFilter_set, ::avmshell::JPEGLoaderContextObject::AS3_deblockingFilter_set)
		//AVMTHUNK_NATIVE_METHOD_VOID_DBPP(flash_system_JPEGLoaderContext_JPEGLoaderContext, ::avmshell::JPEGLoaderContextObject::AS3_constructor)

		//Class SystemUpdater
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_system_SystemUpdater_SystemUpdater, ::avmshell::SystemUpdaterObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_system_SystemUpdater_cancel, ::avmshell::SystemUpdaterObject::AS3_cancel)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_system_SystemUpdater_update, ::avmshell::SystemUpdaterObject::AS3_update)

		//Class TextExtent
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_TextExtent_ascent_get, ::avmshell::TextExtentObject::AS3_ascent_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_TextExtent_ascent_set, ::avmshell::TextExtentObject::AS3_ascent_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_TextExtent_descent_get, ::avmshell::TextExtentObject::AS3_descent_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_TextExtent_descent_set, ::avmshell::TextExtentObject::AS3_descent_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_TextExtent_height_get, ::avmshell::TextExtentObject::AS3_height_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_TextExtent_height_set, ::avmshell::TextExtentObject::AS3_height_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_TextExtent_textFieldHeight_get, ::avmshell::TextExtentObject::AS3_textFieldHeight_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_TextExtent_textFieldHeight_set, ::avmshell::TextExtentObject::AS3_textFieldHeight_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_TextExtent_textFieldWidth_get, ::avmshell::TextExtentObject::AS3_textFieldWidth_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_TextExtent_textFieldWidth_set, ::avmshell::TextExtentObject::AS3_textFieldWidth_set)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_TextExtent_width_get, ::avmshell::TextExtentObject::AS3_width_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_TextExtent_width_set, ::avmshell::TextExtentObject::AS3_width_set)
		//AVMTHUNK_NATIVE_METHOD_VOID_DDDDDD(flash_text_TextExtent_TextExtent, ::avmshell::TextExtentObject::AS3_constructor)

		//Class ContextMenuClipboardItems
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_ui_ContextMenuClipboardItems_clear_get, ::avmshell::ContextMenuClipboardItemsObject::AS3_clear_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_ui_ContextMenuClipboardItems_clear_set, ::avmshell::ContextMenuClipboardItemsObject::AS3_clear_set)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_ui_ContextMenuClipboardItems_copy_get, ::avmshell::ContextMenuClipboardItemsObject::AS3_copy_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_ui_ContextMenuClipboardItems_copy_set, ::avmshell::ContextMenuClipboardItemsObject::AS3_copy_set)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_ui_ContextMenuClipboardItems_cut_get, ::avmshell::ContextMenuClipboardItemsObject::AS3_cut_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_ui_ContextMenuClipboardItems_cut_set, ::avmshell::ContextMenuClipboardItemsObject::AS3_cut_set)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_ui_ContextMenuClipboardItems_paste_get, ::avmshell::ContextMenuClipboardItemsObject::AS3_paste_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_ui_ContextMenuClipboardItems_paste_set, ::avmshell::ContextMenuClipboardItemsObject::AS3_paste_set)
		//AVMTHUNK_NATIVE_METHOD_B_VOID(flash_ui_ContextMenuClipboardItems_selectAll_get, ::avmshell::ContextMenuClipboardItemsObject::AS3_selectAll_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_B(flash_ui_ContextMenuClipboardItems_selectAll_set, ::avmshell::ContextMenuClipboardItemsObject::AS3_selectAll_set)
		//AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_ui_ContextMenuClipboardItems_ContextMenuClipboardItems, ::avmshell::ContextMenuClipboardItemsObject::AS3_constructor)

		//Class MouseCursorData
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_ui_MouseCursorData_data_get, ::avmshell::MouseCursorDataObject::AS3_data_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_ui_MouseCursorData_data_set, ::avmshell::MouseCursorDataObject::AS3_data_set)

		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_ui_MouseCursorData_frameRate_get, ::avmshell::MouseCursorDataObject::AS3_frameRate_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_ui_MouseCursorData_frameRate_set, ::avmshell::MouseCursorDataObject::AS3_frameRate_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_ui_MouseCursorData_hotSpot_get, ::avmshell::MouseCursorDataObject::AS3_hotSpot_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_ui_MouseCursorData_hotSpot_set, ::avmshell::MouseCursorDataObject::AS3_hotSpot_set)
//		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_ui_MouseCursorData_MouseCursorData, ::avmshell::MouseCursorDataObject::AS3_constructor)

		//Class Multitouch
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_ui_Multitouch_inputMode_get, ::avmshell::MultitouchClass::AS3_inputMode_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_ui_Multitouch_inputMode_set, ::avmshell::MultitouchClass::AS3_inputMode_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_ui_Multitouch_maxTouchPoints_get, ::avmshell::MultitouchClass::AS3_maxTouchPoints_get)

		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_ui_Multitouch_supportedGestures_get, ::avmshell::MultitouchClass::AS3_supportedGestures_get)

		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_ui_Multitouch_supportsGestureEvents_get, ::avmshell::MultitouchClass::AS3_supportsGestureEvents_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_ui_Multitouch_supportsTouchEvents_get, ::avmshell::MultitouchClass::AS3_supportsTouchEvents_get)

		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_ui_Multitouch_mapTouchToMouse_get, ::avmshell::MultitouchClass::AS3_mapTouchToMouse_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_ui_Multitouch_mapTouchToMouse_set, ::avmshell::MultitouchClass::AS3_mapTouchToMouse_set)

		//Class DockIcon--
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_DockIcon_bitmaps_get, ::avmshell::DockIconObject::AS3_bitmaps_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_DockIcon_bitmaps_set, ::avmshell::DockIconObject::AS3_bitmaps_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_DockIcon_height_get, ::avmshell::DockIconObject::AS3_height_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_DockIcon_menu_get, ::avmshell::DockIconObject::AS3_menu_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_DockIcon_menu_set, ::avmshell::DockIconObject::AS3_menu_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_DockIcon_width_get, ::avmshell::DockIconObject::AS3_width_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_DockIcon_bounce, ::avmshell::DockIconObject::AS3_bounce)

		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_Icon_bitmaps_get, ::avmshell::IconObject::AS3_bitmaps_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_Icon_bitmaps_set, ::avmshell::IconObject::AS3_bitmaps_set)

		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_InteractiveIcon_bitmaps_get, ::avmshell::InteractiveIconObject::AS3_bitmaps_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_InteractiveIcon_bitmaps_set, ::avmshell::InteractiveIconObject::AS3_bitmaps_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_InteractiveIcon_height_get, ::avmshell::InteractiveIconObject::AS3_height_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_InteractiveIcon_width_get, ::avmshell::InteractiveIconObject::AS3_width_get)

		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_nativeApplication_get, ::avmshell::NativeApplicationObject::AS3_nativeApplication_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_supportsDefaultApplication_get, ::avmshell::NativeApplicationObject::AS3_supportsDefaultApplication_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_supportsDockIcon_get, ::avmshell::NativeApplicationObject::AS3_supportsDockIcon_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_supportsMenu_get, ::avmshell::NativeApplicationObject::AS3_supportsMenu_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_supportsStartAtLogin_get, ::avmshell::NativeApplicationObject::AS3_supportsStartAtLogin_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_supportsSystemTrayIcon_get, ::avmshell::NativeApplicationObject::AS3_supportsSystemTrayIcon_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_activeWindow_get, ::avmshell::NativeApplicationObject::AS3_activeWindow_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_applicationDescriptor_get, ::avmshell::NativeApplicationObject::AS3_applicationDescriptor_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_applicationID_get, ::avmshell::NativeApplicationObject::AS3_applicationID_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_autoExit_get, ::avmshell::NativeApplicationObject::AS3_autoExit_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_autoExit_set, ::avmshell::NativeApplicationObject::AS3_autoExit_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_icon_get, ::avmshell::NativeApplicationObject::AS3_icon_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_idleThreshold_get, ::avmshell::NativeApplicationObject::AS3_idleThreshold_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_idleThreshold_set, ::avmshell::NativeApplicationObject::AS3_idleThreshold_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_menu_get, ::avmshell::NativeApplicationObject::AS3_menu_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_menu_set, ::avmshell::NativeApplicationObject::AS3_menu_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_openedWindows_get, ::avmshell::NativeApplicationObject::AS3_openedWindows_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_publisherID_get, ::avmshell::NativeApplicationObject::AS3_publisherID_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_runtimePatchLevel_get, ::avmshell::NativeApplicationObject::AS3_runtimePatchLevel_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_runtimeVersion_get, ::avmshell::NativeApplicationObject::AS3_runtimeVersion_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_startAtLogin_get, ::avmshell::NativeApplicationObject::AS3_startAtLogin_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_startAtLogin_set, ::avmshell::NativeApplicationObject::AS3_startAtLogin_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_systemIdleMode_get, ::avmshell::NativeApplicationObject::AS3_systemIdleMode_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_systemIdleMode_set, ::avmshell::NativeApplicationObject::AS3_systemIdleMode_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_timeSinceLastUserInput_get, ::avmshell::NativeApplicationObject::AS3_timeSinceLastUserInput_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_activate, ::avmshell::NativeApplicationObject::AS3_activate)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_addEventListener, ::avmshell::NativeApplicationObject::AS3_addEventListener)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_clear, ::avmshell::NativeApplicationObject::AS3_clear)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_copy, ::avmshell::NativeApplicationObject::AS3_copy)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_cut, ::avmshell::NativeApplicationObject::AS3_cut)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_dispatchEvent, ::avmshell::NativeApplicationObject::AS3_dispatchEvent)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_exit, ::avmshell::NativeApplicationObject::AS3_exit)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_getDefaultApplication, ::avmshell::NativeApplicationObject::AS3_getDefaultApplication)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_isSetAsDefaultApplication, ::avmshell::NativeApplicationObject::AS3_isSetAsDefaultApplication)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_paste, ::avmshell::NativeApplicationObject::AS3_paste)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_removeAsDefaultApplication, ::avmshell::NativeApplicationObject::AS3_removeAsDefaultApplication)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_removeEventListener, ::avmshell::NativeApplicationObject::AS3_removeEventListener)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_selectAll, ::avmshell::NativeApplicationObject::AS3_selectAll)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_setAsDefaultApplication, ::avmshell::NativeApplicationObject::AS3_setAsDefaultApplication)
		//NativeApplication new adds 11
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_executeInBackground_get,::avmshell::NativeApplicationObject::AS3_executeInBackground_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeApplication_executeInBackground_set,::avmshell::NativeApplicationObject::AS3_executeInBackground_set)
		//NativeApplication new adds 11 end

		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeDragManager_dragInitiator_get, ::avmshell::NativeDragManagerObject::AS3_dragInitiator_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeDragManager_dropAction_get, ::avmshell::NativeDragManagerObject::AS3_dropAction_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeDragManager_dropAction_set, ::avmshell::NativeDragManagerObject::AS3_dropAction_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeDragManager_isDragging_get, ::avmshell::NativeDragManagerObject::AS3_isDragging_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeDragManager_isSupported_get, ::avmshell::NativeDragManagerObject::AS3_isSupported_get)

		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeDragOptions_allowCopy_get, ::avmshell::NativeDragOptionsObject::AS3_allowCopy_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeDragOptions_allowCopy_set, ::avmshell::NativeDragOptionsObject::AS3_allowCopy_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeDragOptions_allowLink_get, ::avmshell::NativeDragOptionsObject::AS3_allowLink_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeDragOptions_allowLink_set, ::avmshell::NativeDragOptionsObject::AS3_allowLink_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeDragOptions_allowMove_get, ::avmshell::NativeDragOptionsObject::AS3_allowMove_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeDragOptions_allowMove_set, ::avmshell::NativeDragOptionsObject::AS3_allowMove_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeDragOptions_toString, ::avmshell::NativeDragOptionsObject::AS3_toString)

		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeProcess_isSupported_get, ::avmshell::NativeProcessObject::AS3_isSupported_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeProcess_running_get, ::avmshell::NativeProcessObject::AS3_running_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeProcess_standardError_get, ::avmshell::NativeProcessObject::AS3_standardError_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeProcess_standardInput_get, ::avmshell::NativeProcessObject::AS3_standardInput_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeProcess_standardOutput_get, ::avmshell::NativeProcessObject::AS3_standardOutput_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeProcess_NativeProcess, ::avmshell::NativeProcessObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeProcess_closeInput, ::avmshell::NativeProcessObject::AS3_closeInput)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeProcess_exit, ::avmshell::NativeProcessObject::AS3_exit)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeProcess_start, ::avmshell::NativeProcessObject::AS3_start)

		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeProcessStartupInfo_arguments_get, ::avmshell::NativeProcessStartupInfoObject::AS3_arguments_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeProcessStartupInfo_arguments_set, ::avmshell::NativeProcessStartupInfoObject::AS3_arguments_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeProcessStartupInfo_executable_get, ::avmshell::NativeProcessStartupInfoObject::AS3_executable_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeProcessStartupInfo_executable_set, ::avmshell::NativeProcessStartupInfoObject::AS3_executable_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeProcessStartupInfo_workingDirectory_get, ::avmshell::NativeProcessStartupInfoObject::AS3_workingDirectory_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeProcessStartupInfo_workingDirectory_set, ::avmshell::NativeProcessStartupInfoObject::AS3_workingDirectory_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_NativeProcessStartupInfo_NativeProcessStartupInfo, ::avmshell::NativeProcessStartupInfoObject::AS3_constructor)

		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_SystemTrayIcon_bitmaps_get, ::avmshell::SystemTrayIconObject::AS3_bitmaps_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_SystemTrayIcon_bitmaps_set, ::avmshell::SystemTrayIconObject::AS3_bitmaps_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_SystemTrayIcon_height_get, ::avmshell::SystemTrayIconObject::AS3_height_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_SystemTrayIcon_menu_get, ::avmshell::SystemTrayIconObject::AS3_menu_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_SystemTrayIcon_menu_set, ::avmshell::SystemTrayIconObject::AS3_menu_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_SystemTrayIcon_tooltip_get, ::avmshell::SystemTrayIconObject::AS3_tooltip_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_SystemTrayIcon_tooltip_set, ::avmshell::SystemTrayIconObject::AS3_tooltip_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_SystemTrayIcon_width_get, ::avmshell::SystemTrayIconObject::AS3_width_get)

		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_Updater_isSupported_get, ::avmshell::UpdaterObject::AS3_isSupported_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_Updater_Updater, ::avmshell::UpdaterObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_EX(flash_desktop_Updater_update, ::avmshell::UpdaterObject::AS3_update)

		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_applicationDirectory_get, ::avmshell::FileObject::AS3_applicationDirectory_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_applicationStorageDirectory_get, ::avmshell::FileObject::AS3_applicationStorageDirectory_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_desktopDirectory_get, ::avmshell::FileObject::AS3_desktopDirectory_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_documentsDirectory_get, ::avmshell::FileObject::AS3_documentsDirectory_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_lineEnding_get, ::avmshell::FileObject::AS3_lineEnding_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_separator_get, ::avmshell::FileObject::AS3_separator_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_systemCharset_get, ::avmshell::FileObject::AS3_systemCharset_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_userDirectory_get, ::avmshell::FileObject::AS3_userDirectory_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_createTempDirectory, ::avmshell::FileObject::AS3_createTempDirectory)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_createTempFile, ::avmshell::FileObject::AS3_createTempFile)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_getRootDirectories, ::avmshell::FileObject::AS3_getRootDirectories)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_downloaded_get, ::avmshell::FileObject::AS3_downloaded_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_downloaded_set, ::avmshell::FileObject::AS3_downloaded_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_exists_get, ::avmshell::FileObject::AS3_exists_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_isDirectory_get, ::avmshell::FileObject::AS3_isDirectory_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_isHidden_get, ::avmshell::FileObject::AS3_isHidden_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_isPackage_get, ::avmshell::FileObject::AS3_isPackage_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_isSymbolicLink_get, ::avmshell::FileObject::AS3_isSymbolicLink_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_nativePath_get, ::avmshell::FileObject::AS3_nativePath_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_nativePath_set, ::avmshell::FileObject::AS3_nativePath_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_parent_get, ::avmshell::FileObject::AS3_parent_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_spaceAvailable_get, ::avmshell::FileObject::AS3_spaceAvailable_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_url_get, ::avmshell::FileObject::AS3_url_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_url_set, ::avmshell::FileObject::AS3_url_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_File, ::avmshell::FileObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_browseForDirectory, ::avmshell::FileObject::AS3_browseForDirectory)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_browseForOpen, ::avmshell::FileObject::AS3_browseForOpen)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_browseForOpenMultiple, ::avmshell::FileObject::AS3_browseForOpenMultiple)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_browseForSave, ::avmshell::FileObject::AS3_browseForSave)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_cancel, ::avmshell::FileObject::AS3_cancel)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_canonicalize, ::avmshell::FileObject::AS3_canonicalize)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_clone, ::avmshell::FileObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_copyTo, ::avmshell::FileObject::AS3_copyTo)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_copyToAsync, ::avmshell::FileObject::AS3_copyToAsync)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_createDirectory, ::avmshell::FileObject::AS3_createDirectory)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_deleteDirectory, ::avmshell::FileObject::AS3_deleteDirectory)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_deleteDirectoryAsync, ::avmshell::FileObject::AS3_deleteDirectoryAsync)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_deleteFile, ::avmshell::FileObject::AS3_deleteFile)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_deleteFileAsync, ::avmshell::FileObject::AS3_deleteFileAsync)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_getDirectoryListing, ::avmshell::FileObject::AS3_getDirectoryListing)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_getDirectoryListingAsync, ::avmshell::FileObject::AS3_getDirectoryListingAsync)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_getRelativePath, ::avmshell::FileObject::AS3_getRelativePath)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_moveTo, ::avmshell::FileObject::AS3_moveTo)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_moveToAsync, ::avmshell::FileObject::AS3_moveToAsync)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_moveToTrash, ::avmshell::FileObject::AS3_moveToTrash)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_moveToTrashAsync, ::avmshell::FileObject::AS3_moveToTrashAsync)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_openWithDefaultApplication, ::avmshell::FileObject::AS3_openWithDefaultApplication)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_resolvePath, ::avmshell::FileObject::AS3_resolvePath)

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_cacheDirectory_get, ::avmshell::FileClass::AS3_cacheDirectory_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_preventBackup_get, ::avmshell::FileObject::AS3_preventBackup_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_File_preventBackup_set, ::avmshell::FileObject::AS3_preventBackup_set)
		//new adds 11 end
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_bytesAvailable_get, ::avmshell::FileStreamObject::AS3_bytesAvailable_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_endian_get, ::avmshell::FileStreamObject::AS3_endian_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_endian_set, ::avmshell::FileStreamObject::AS3_endian_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_objectEncoding_get, ::avmshell::FileStreamObject::AS3_objectEncoding_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_objectEncoding_set, ::avmshell::FileStreamObject::AS3_objectEncoding_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_position_get, ::avmshell::FileStreamObject::AS3_position_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_position_set, ::avmshell::FileStreamObject::AS3_position_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_readAhead_get, ::avmshell::FileStreamObject::AS3_readAhead_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_readAhead_set, ::avmshell::FileStreamObject::AS3_readAhead_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_FileStream, ::avmshell::FileStreamObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_close, ::avmshell::FileStreamObject::AS3_close)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_open, ::avmshell::FileStreamObject::AS3_open)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_openAsync, ::avmshell::FileStreamObject::AS3_openAsync)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_readBoolean, ::avmshell::FileStreamObject::AS3_readBoolean)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_readByte, ::avmshell::FileStreamObject::AS3_readByte)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_readBytes, ::avmshell::FileStreamObject::AS3_readBytes)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_readDouble, ::avmshell::FileStreamObject::AS3_readDouble)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_readFloat, ::avmshell::FileStreamObject::AS3_readFloat)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_readInt, ::avmshell::FileStreamObject::AS3_readInt)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_readMultiByte, ::avmshell::FileStreamObject::AS3_readMultiByte)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_readObject, ::avmshell::FileStreamObject::AS3_readObject)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_readShort, ::avmshell::FileStreamObject::AS3_readShort)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_readUnsignedByte, ::avmshell::FileStreamObject::AS3_readUnsignedByte)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_readUnsignedInt, ::avmshell::FileStreamObject::AS3_readUnsignedInt)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_readUnsignedShort, ::avmshell::FileStreamObject::AS3_readUnsignedShort)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_readUTF, ::avmshell::FileStreamObject::AS3_readUTF)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_readUTFBytes, ::avmshell::FileStreamObject::AS3_readUTFBytes)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_truncate, ::avmshell::FileStreamObject::AS3_truncate)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_writeBoolean, ::avmshell::FileStreamObject::AS3_writeBoolean)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_writeByte, ::avmshell::FileStreamObject::AS3_writeByte)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_writeBytes, ::avmshell::FileStreamObject::AS3_writeBytes)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_writeDouble, ::avmshell::FileStreamObject::AS3_writeDouble)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_writeFloat, ::avmshell::FileStreamObject::AS3_writeFloat)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_writeInt, ::avmshell::FileStreamObject::AS3_writeInt)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_writeMultiByte, ::avmshell::FileStreamObject::AS3_writeMultiByte)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_writeObject, ::avmshell::FileStreamObject::AS3_writeObject)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_writeShort, ::avmshell::FileStreamObject::AS3_writeShort)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_writeUnsignedInt, ::avmshell::FileStreamObject::AS3_writeUnsignedInt)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_writeUTF, ::avmshell::FileStreamObject::AS3_writeUTF)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_FileStream_writeUTFBytes, ::avmshell::FileStreamObject::AS3_writeUTFBytes)

		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_StorageVolume_drive_get, ::avmshell::StorageVolumeObject::AS3_drive_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_StorageVolume_fileSystemType_get, ::avmshell::StorageVolumeObject::AS3_fileSystemType_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_StorageVolume_isRemovable_get, ::avmshell::StorageVolumeObject::AS3_isRemovable_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_StorageVolume_isWritable_get, ::avmshell::StorageVolumeObject::AS3_isWritable_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_StorageVolume_name_get, ::avmshell::StorageVolumeObject::AS3_name_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_StorageVolume_rootDirectory_get, ::avmshell::StorageVolumeObject::AS3_rootDirectory_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_StorageVolume_StorageVolume, ::avmshell::StorageVolumeObject::AS3_constructor)

		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_StorageVolumeInfo_isSupported_get, ::avmshell::StorageVolumeInfoObject::AS3_isSupported_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_StorageVolumeInfo_storageVolumeInfo_get, ::avmshell::StorageVolumeInfoObject::AS3_storageVolumeInfo_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_filesystem_StorageVolumeInfo_getStorageVolumes, ::avmshell::StorageVolumeInfoObject::AS3_getStorageVolumes)

		//Class Collator
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_Collator_getAvailableLocaleIDNames, ::avmshell::CollatorClass::AS3_getAvailableLocaleIDNames)

		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_Collator_actualLocaleIDName_get, ::avmshell::CollatorObject::AS3_actualLocaleIDName_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_globalization_Collator_ignoreCase_get, ::avmshell::CollatorObject::AS3_ignoreCase_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_globalization_Collator_ignoreCase_set, ::avmshell::CollatorObject::AS3_ignoreCase_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_globalization_Collator_ignoreCharacterWidth_get, ::avmshell::CollatorObject::AS3_ignoreCharacterWidth_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_globalization_Collator_ignoreCharacterWidth_set, ::avmshell::CollatorObject::AS3_ignoreCharacterWidth_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_globalization_Collator_ignoreDiacritics_get, ::avmshell::CollatorObject::AS3_ignoreDiacritics_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_globalization_Collator_ignoreDiacritics_set, ::avmshell::CollatorObject::AS3_ignoreDiacritics_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_globalization_Collator_ignoreKanaType_get, ::avmshell::CollatorObject::AS3_ignoreKanaType_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_globalization_Collator_ignoreKanaType_set, ::avmshell::CollatorObject::AS3_ignoreKanaType_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_globalization_Collator_ignoreSymbols_get, ::avmshell::CollatorObject::AS3_ignoreSymbols_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_globalization_Collator_ignoreSymbols_set, ::avmshell::CollatorObject::AS3_ignoreSymbols_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_Collator_lastOperationStatus_get, ::avmshell::CollatorObject::AS3_lastOperationStatus_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_globalization_Collator_numericComparison_get, ::avmshell::CollatorObject::AS3_numericComparison_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_globalization_Collator_numericComparison_set, ::avmshell::CollatorObject::AS3_numericComparison_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_Collator_requestedLocaleIDName_get, ::avmshell::CollatorObject::AS3_requestedLocaleIDName_get)
		AVMTHUNK_NATIVE_METHOD_VOID_SS_COLLATOR(flash_globalization_Collator_Collator, ::avmshell::CollatorObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_I_SS(flash_globalization_Collator_compare, ::avmshell::CollatorObject::AS3_compare)
		AVMTHUNK_NATIVE_METHOD_B_SS(flash_globalization_Collator_equals, ::avmshell::CollatorObject::AS3_equals)

		//Class CurrencyFormatter
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_CurrencyFormatter_getAvailableLocaleIDNames, ::avmshell::CurrencyFormatterClass::AS3_getAvailableLocaleIDNames)

		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_CurrencyFormatter_actualLocaleIDName_get, ::avmshell::CurrencyFormatterObject::AS3_actualLocaleIDName_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_CurrencyFormatter_currencyISOCode_get, ::avmshell::CurrencyFormatterObject::AS3_currencyISOCode_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_CurrencyFormatter_currencySymbol_get, ::avmshell::CurrencyFormatterObject::AS3_currencySymbol_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_CurrencyFormatter_decimalSeparator_get, ::avmshell::CurrencyFormatterObject::AS3_decimalSeparator_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_globalization_CurrencyFormatter_decimalSeparator_set, ::avmshell::CurrencyFormatterObject::AS3_decimalSeparator_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_globalization_CurrencyFormatter_digitsType_get, ::avmshell::CurrencyFormatterObject::AS3_digitsType_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_globalization_CurrencyFormatter_digitsType_set, ::avmshell::CurrencyFormatterObject::AS3_digitsType_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_globalization_CurrencyFormatter_fractionalDigits_get, ::avmshell::CurrencyFormatterObject::AS3_fractionalDigits_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_globalization_CurrencyFormatter_fractionalDigits_set, ::avmshell::CurrencyFormatterObject::AS3_fractionalDigits_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_CurrencyFormatter_groupingPattern_get, ::avmshell::CurrencyFormatterObject::AS3_groupingPattern_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_globalization_CurrencyFormatter_groupingPattern_set, ::avmshell::CurrencyFormatterObject::AS3_groupingPattern_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_CurrencyFormatter_groupingSeparator_get, ::avmshell::CurrencyFormatterObject::AS3_groupingSeparator_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_globalization_CurrencyFormatter_groupingSeparator_set, ::avmshell::CurrencyFormatterObject::AS3_groupingSeparator_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_CurrencyFormatter_lastOperationStatus_get, ::avmshell::CurrencyFormatterObject::AS3_lastOperationStatus_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_globalization_CurrencyFormatter_leadingZero_get, ::avmshell::CurrencyFormatterObject::AS3_leadingZero_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_globalization_CurrencyFormatter_leadingZero_set, ::avmshell::CurrencyFormatterObject::AS3_leadingZero_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_globalization_CurrencyFormatter_negativeCurrencyFormat_get, ::avmshell::CurrencyFormatterObject::AS3_negativeCurrencyFormat_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_globalization_CurrencyFormatter_negativeCurrencyFormat_set, ::avmshell::CurrencyFormatterObject::AS3_negativeCurrencyFormat_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_CurrencyFormatter_negativeSymbol_get, ::avmshell::CurrencyFormatterObject::AS3_negativeSymbol_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_globalization_CurrencyFormatter_negativeSymbol_set, ::avmshell::CurrencyFormatterObject::AS3_negativeSymbol_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_globalization_CurrencyFormatter_positiveCurrencyFormat_get, ::avmshell::CurrencyFormatterObject::AS3_positiveCurrencyFormat_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_globalization_CurrencyFormatter_positiveCurrencyFormat_set, ::avmshell::CurrencyFormatterObject::AS3_positiveCurrencyFormat_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_CurrencyFormatter_requestedLocaleIDName_get, ::avmshell::CurrencyFormatterObject::AS3_requestedLocaleIDName_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_globalization_CurrencyFormatter_trailingZeros_get, ::avmshell::CurrencyFormatterObject::AS3_trailingZeros_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_globalization_CurrencyFormatter_trailingZeros_set, ::avmshell::CurrencyFormatterObject::AS3_trailingZeros_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_globalization_CurrencyFormatter_useGrouping_get, ::avmshell::CurrencyFormatterObject::AS3_useGrouping_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_globalization_CurrencyFormatter_useGrouping_set, ::avmshell::CurrencyFormatterObject::AS3_useGrouping_set)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_globalization_CurrencyFormatter_CurrencyFormatter, ::avmshell::CurrencyFormatterObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_DB(flash_globalization_CurrencyFormatter_format, ::avmshell::CurrencyFormatterObject::AS3_format)
		AVMTHUNK_NATIVE_METHOD_B_S(flash_globalization_CurrencyFormatter_formattingWithCurrencySymbolIsSafe, ::avmshell::CurrencyFormatterObject::AS3_formattingWithCurrencySymbolIsSafe)
		AVMTHUNK_NATIVE_METHOD_P_S(flash_globalization_CurrencyFormatter_parse, ::avmshell::CurrencyFormatterObject::AS3_parse)
		AVMTHUNK_NATIVE_METHOD_VOID_SS(flash_globalization_CurrencyFormatter_setCurrency, ::avmshell::CurrencyFormatterObject::AS3_setCurrency)

		//Class CurrencyParseResult
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_CurrencyParseResult_currencyString_get, ::avmshell::CurrencyParseResultObject::AS3_currencyString_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_globalization_CurrencyParseResult_value_get, ::avmshell::CurrencyParseResultObject::AS3_value_get)
		AVMTHUNK_NATIVE_METHOD_VOID_DS_CURRENCYPARSERESULT(flash_globalization_CurrencyParseResult_CurrencyParseResult, ::avmshell::CurrencyParseResultObject::AS3_constructor)

		//Class DateTimeFormatter
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_DateTimeFormatter_getAvailableLocaleIDNames, ::avmshell::DateTimeFormatterClass::AS3_getAvailableLocaleIDNames)

		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_DateTimeFormatter_actualLocaleIDName_get, ::avmshell::DateTimeFormatterObject::AS3_actualLocaleIDName_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_DateTimeFormatter_lastOperationStatus_get, ::avmshell::DateTimeFormatterObject::AS3_lastOperationStatus_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_DateTimeFormatter_requestedLocaleIDName_get, ::avmshell::DateTimeFormatterObject::AS3_requestedLocaleIDName_get)
		AVMTHUNK_NATIVE_METHOD_VOID_SSS_DATETIMEFORMATTER(flash_globalization_DateTimeFormatter_DateTimeFormatter, ::avmshell::DateTimeFormatterObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_globalization_DateTimeFormatter_format, ::avmshell::DateTimeFormatterObject::AS3_format)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_globalization_DateTimeFormatter_formatUTC, ::avmshell::DateTimeFormatterObject::AS3_formatUTC)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_DateTimeFormatter_getDateStyle, ::avmshell::DateTimeFormatterObject::AS3_getDateStyle)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_DateTimeFormatter_getDateTimePattern, ::avmshell::DateTimeFormatterObject::AS3_getDateTimePattern)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_globalization_DateTimeFormatter_getFirstWeekday, ::avmshell::DateTimeFormatterObject::AS3_getFirstWeekday)
		AVMTHUNK_NATIVE_METHOD_P_SS_DATETIMEFORMATTER(flash_globalization_DateTimeFormatter_getMonthNames, ::avmshell::DateTimeFormatterObject::AS3_getMonthNames)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_DateTimeFormatter_getTimeStyle, ::avmshell::DateTimeFormatterObject::AS3_getTimeStyle)
		AVMTHUNK_NATIVE_METHOD_P_SS_DATETIMEFORMATTER(flash_globalization_DateTimeFormatter_getWeekdayNames, ::avmshell::DateTimeFormatterObject::AS3_getWeekdayNames)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_globalization_DateTimeFormatter_setDateTimePattern, ::avmshell::DateTimeFormatterObject::AS3_setDateTimePattern)
		AVMTHUNK_NATIVE_METHOD_VOID_SS(flash_globalization_DateTimeFormatter_setDateTimeStyles, ::avmshell::DateTimeFormatterObject::AS3_setDateTimeStyles)

		//Class LocaleID
		AVMTHUNK_NATIVE_METHOD_P_PPS_LOCALEID(flash_globalization_LocaleID_determinePreferredLocales, ::avmshell::LocaleIDClass::AS3_determinePreferredLocales)

		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_LocaleID_lastOperationStatus_get, ::avmshell::LocaleIDObject::AS3_lastOperationStatus_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_LocaleID_name_get, ::avmshell::LocaleIDObject::AS3_name_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_globalization_LocaleID_LocaleID, ::avmshell::LocaleIDObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_LocaleID_getKeysAndValues, ::avmshell::LocaleIDObject::AS3_getKeysAndValues)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_LocaleID_getLanguage, ::avmshell::LocaleIDObject::AS3_getLanguage)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_LocaleID_getRegion, ::avmshell::LocaleIDObject::AS3_getRegion)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_LocaleID_getScript, ::avmshell::LocaleIDObject::AS3_getScript)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_LocaleID_getVariant, ::avmshell::LocaleIDObject::AS3_getVariant)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_globalization_LocaleID_isRightToLeft, ::avmshell::LocaleIDObject::AS3_isRightToLeft)

		//Class NumberFormatter
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_NumberFormatter_actualLocaleIDName_get, ::avmshell::NumberFormatterObject::AS3_actualLocaleIDName_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_NumberFormatter_decimalSeparator_get, ::avmshell::NumberFormatterObject::AS3_decimalSeparator_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_globalization_NumberFormatter_decimalSeparator_set, ::avmshell::NumberFormatterObject::AS3_decimalSeparator_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_globalization_NumberFormatter_digitsType_get, ::avmshell::NumberFormatterObject::AS3_digitsType_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_globalization_NumberFormatter_digitsType_set, ::avmshell::NumberFormatterObject::AS3_digitsType_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_globalization_NumberFormatter_fractionalDigits_get, ::avmshell::NumberFormatterObject::AS3_fractionalDigits_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_globalization_NumberFormatter_fractionalDigits_set, ::avmshell::NumberFormatterObject::AS3_fractionalDigits_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_NumberFormatter_groupingPattern_get, ::avmshell::NumberFormatterObject::AS3_groupingPattern_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_globalization_NumberFormatter_groupingPattern_set, ::avmshell::NumberFormatterObject::AS3_groupingPattern_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_NumberFormatter_groupingSeparator_get, ::avmshell::NumberFormatterObject::AS3_groupingSeparator_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_globalization_NumberFormatter_groupingSeparator_set, ::avmshell::NumberFormatterObject::AS3_groupingSeparator_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_NumberFormatter_lastOperationStatus_get, ::avmshell::NumberFormatterObject::AS3_lastOperationStatus_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_globalization_NumberFormatter_leadingZero_get, ::avmshell::NumberFormatterObject::AS3_leadingZero_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_globalization_NumberFormatter_leadingZero_set, ::avmshell::NumberFormatterObject::AS3_leadingZero_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_globalization_NumberFormatter_negativeNumberFormat_get, ::avmshell::NumberFormatterObject::AS3_negativeNumberFormat_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_globalization_NumberFormatter_negativeNumberFormat_set, ::avmshell::NumberFormatterObject::AS3_negativeNumberFormat_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_NumberFormatter_negativeSymbol_get, ::avmshell::NumberFormatterObject::AS3_negativeSymbol_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_globalization_NumberFormatter_negativeSymbol_set, ::avmshell::NumberFormatterObject::AS3_negativeSymbol_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_NumberFormatter_requestedLocaleIDName_get, ::avmshell::NumberFormatterObject::AS3_requestedLocaleIDName_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_globalization_NumberFormatter_trailingZeros_get, ::avmshell::NumberFormatterObject::AS3_trailingZeros_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_globalization_NumberFormatter_trailingZeros_set, ::avmshell::NumberFormatterObject::AS3_trailingZeros_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_globalization_NumberFormatter_useGrouping_get, ::avmshell::NumberFormatterObject::AS3_useGrouping_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_globalization_NumberFormatter_useGrouping_set, ::avmshell::NumberFormatterObject::AS3_useGrouping_set)

		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_globalization_NumberFormatter_NumberFormatter, ::avmshell::NumberFormatterObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_I(flash_globalization_NumberFormatter_formatInt, ::avmshell::NumberFormatterObject::AS3_formatInt)
		AVMTHUNK_NATIVE_METHOD_P_D(flash_globalization_NumberFormatter_formatNumber, ::avmshell::NumberFormatterObject::AS3_formatNumber)
		AVMTHUNK_NATIVE_METHOD_P_U(flash_globalization_NumberFormatter_formatUint, ::avmshell::NumberFormatterObject::AS3_formatUint)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_NumberFormatter_getAvailableLocaleIDNames, ::avmshell::NumberFormatterObject::AS3_getAvailableLocaleIDNames)
		AVMTHUNK_NATIVE_METHOD_P_S(flash_globalization_NumberFormatter_parse, ::avmshell::NumberFormatterObject::AS3_parse)
		AVMTHUNK_NATIVE_METHOD_D_S(flash_globalization_NumberFormatter_parseNumber, ::avmshell::NumberFormatterObject::AS3_parseNumber)

		//Class NumberParseResult
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_globalization_NumberParseResult_endIndex_get, ::avmshell::NumberParseResultObject::AS3_endIndex_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_globalization_NumberParseResult_startIndex_get, ::avmshell::NumberParseResultObject::AS3_startIndex_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_globalization_NumberParseResult_value_get, ::avmshell::NumberParseResultObject::AS3_value_get)
		AVMTHUNK_NATIVE_METHOD_VOID_DII_NUMBERPARSERESULT(flash_globalization_NumberParseResult_NumberParseResult, ::avmshell::NumberParseResultObject::AS3_constructor)

		//Class StringTools
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_StringTools_getAvailableLocaleIDNames, ::avmshell::StringToolsClass::AS3_getAvailableLocaleIDNames)

		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_StringTools_actualLocaleIDName_get, ::avmshell::StringToolsObject::AS3_actualLocaleIDName_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_StringTools_lastOperationStatus_get, ::avmshell::StringToolsObject::AS3_lastOperationStatus_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_globalization_StringTools_requestedLocaleIDName_get, ::avmshell::StringToolsObject::AS3_requestedLocaleIDName_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_globalization_StringTools_StringTools, ::avmshell::StringToolsObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_S(flash_globalization_StringTools_toLowerCase, ::avmshell::StringToolsObject::AS3_toLowerCase)
		AVMTHUNK_NATIVE_METHOD_P_S(flash_globalization_StringTools_toUpperCase, ::avmshell::StringToolsObject::AS3_toUpperCase)

		//Class DRMContentData
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_DRMContentData_authenticationMethod_get, ::avmshell::DRMContentDataObject::AS3_authenticationMethod_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_DRMContentData_domain_get, ::avmshell::DRMContentDataObject::AS3_domain_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_DRMContentData_licenseID_get, ::avmshell::DRMContentDataObject::AS3_licenseID_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_DRMContentData_serverURL_get, ::avmshell::DRMContentDataObject::AS3_serverURL_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_DRMContentData_DRMContentData, ::avmshell::DRMContentDataObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_DRMContentData_getVoucherAccessInfo, ::avmshell::DRMContentDataObject::AS3_getVoucherAccessInfo)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_drm_DRMContentData_private_FMRMSURL_get, ::avmshell::DRMContentDataObject::AS3_FMRMSURL_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_drm_DRMContentData_authenticationMethod_get, ::avmshell::DRMContentDataObject::AS3_authenticationMethod_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_drm_DRMContentData_private_getLicenseIDInner, ::avmshell::DRMContentDataObject::AS3_getLicenseIDInner)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_drm_DRMContentData_private_getDomainInner, ::avmshell::DRMContentDataObject::AS3_getDomainInner)
		AVMTHUNK_NATIVE_METHOD_U_P(flash_net_drm_DRMContentData_private_setRawMetadataInner, ::avmshell::DRMContentDataObject::AS3_setRawMetadataInner)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_net_drm_DRMContentData_private_errorCodeToThrow, ::avmshell::DRMContentDataObject::AS3_errorCodeToThrow)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_drm_DRMContentData_private_populateVoucherAccessInfo, ::avmshell::DRMContentDataObject::AS3_populateVoucherAccessInfo)

		//Class DRMManager
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_DRMManager_isSupported_get, ::avmshell::DRMManagerObject::AS3_isSupported_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_DRMManager_getDRMManager, ::avmshell::DRMManagerObject::AS3_getDRMManager)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_DRMManager_authenticate, ::avmshell::DRMManagerObject::AS3_authenticate)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_DRMManager_loadPreviewVoucher, ::avmshell::DRMManagerObject::AS3_loadPreviewVoucher)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_DRMManager_loadVoucher, ::avmshell::DRMManagerObject::AS3_loadVoucher)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_DRMManager_resetDRMVouchers, ::avmshell::DRMManagerObject::AS3_resetDRMVouchers)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_DRMManager_setAuthenticationToken, ::avmshell::DRMManagerObject::AS3_setAuthenticationToken)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_drm_DRMManager_private_createDRMManager, ::avmshell::DRMManagerClass::AS3_createDRMManager)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_net_drm_DRMManager_private_isCalledFromRemoteSWF, ::avmshell::DRMManagerClass::AS3_isCalledFromRemoteSWF)
		
		AVMTHUNK_NATIVE_METHOD_U_SSP(flash_net_drm_DRMManager_private_setSAMLTokenInner, ::avmshell::DRMManagerObject::AS3_setSAMLTokenInner)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_net_drm_DRMManager_private_errorCodeToThrow, ::avmshell::DRMManagerObject::AS3_errorCodeToThrow)
		AVMTHUNK_NATIVE_METHOD_VOID_SPPB(flash_net_drm_DRMManager_private_issueDRMStatusEvent, ::avmshell::DRMManagerObject::AS3_issueDRMStatusEvent)
		AVMTHUNK_NATIVE_METHOD_VOID_PIIS(flash_net_drm_DRMManager_private_issueDRMErrorEvent, ::avmshell::DRMManagerObject::AS3_issueDRMErrorEvent)
		AVMTHUNK_NATIVE_METHOD_U_P(flash_net_drm_DRMManager_private_storeVoucherInner, ::avmshell::DRMManagerObject::AS3_storeVoucherInner)

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_drm_DRMManager_networkIdleTimeout_get, ::avmshell::DRMManagerClass::AS3_networkIdleTimeout_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_net_drm_DRMManager_networkIdleTimeout_set, ::avmshell::DRMManagerClass::AS3_networkIdleTimeout_set)
		AVMTHUNK_NATIVE_METHOD_VOID_PB(flash_net_drm_DRMManager_addToDeviceGroup, ::avmshell::DRMManagerObject::AS3_addToDeviceGroup)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_drm_DRMManager_removeFromDeviceGroup, ::avmshell::DRMManagerObject::AS3_removeFromDeviceGroup)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_drm_DRMManager_resetDRMVouchers, ::avmshell::DRMManagerObject::AS3_resetDRMVouchers)
		AVMTHUNK_NATIVE_METHOD_VOID_SBSS(flash_net_drm_DRMManager_returnVoucher, ::avmshell::DRMManagerObject::AS3_returnVoucher)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_net_drm_DRMManager_StoreVoucher, ::avmshell::DRMManagerObject::AS3_storeVoucher)
		//new adds 11 end


		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_DRMPlaybackTimeWindow_endDate_get, ::avmshell::DRMPlaybackTimeWindowObject::AS3_endDate_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_DRMPlaybackTimeWindow_period_get, ::avmshell::DRMPlaybackTimeWindowObject::AS3_period_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_DRMPlaybackTimeWindow_startDate_get, ::avmshell::DRMPlaybackTimeWindowObject::AS3_startDate_get)

		//Class DRMVoucher
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_DRMVoucher_offlineLeaseEndDate_get, ::avmshell::DRMVoucherObject::AS3_offlineLeaseEndDate_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_DRMVoucher_offlineLeaseStartDate_get, ::avmshell::DRMVoucherObject::AS3_offlineLeaseStartDate_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_DRMVoucher_playbackTimeWindow_get, ::avmshell::DRMVoucherObject::AS3_playbackTimeWindow_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_DRMVoucher_policies_get, ::avmshell::DRMVoucherObject::AS3_policies_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_DRMVoucher_voucherEndDate_get, ::avmshell::DRMVoucherObject::AS3_voucherEndDate_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_DRMVoucher_voucherStartDate_get, ::avmshell::DRMVoucherObject::AS3_voucherStartDate_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_drm_DRMVoucher_private_getEndDateInner, ::avmshell::DRMVoucherObject::AS3_getEndDateInner)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_drm_DRMVoucher_private_getStartDateInner, ::avmshell::DRMVoucherObject::AS3_getStartDateInner)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_drm_DRMVoucher_private_getOfflineLeaseStartDateInner, ::avmshell::DRMVoucherObject::AS3_getOfflineLeaseStartDateInner)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_drm_DRMVoucher_private_getOfflineLeaseExpirationDateInner, ::avmshell::DRMVoucherObject::AS3_getOfflineLeaseExpirationDateInner)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_net_drm_DRMVoucher_private_createCustomPolicyObject, ::avmshell::DRMVoucherObject::AS3_createCustomPolicyObject)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_drm_DRMVoucher_private_playStartTime_get, ::avmshell::DRMVoucherObject::AS3_playStartTime_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_drm_DRMVoucher_private_playbackEndTime_get, ::avmshell::DRMVoucherObject::AS3_playbackEndTime_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_net_drm_DRMVoucher_private_playbackWindow_get, ::avmshell::DRMVoucherObject::AS3_playbackWindow_get)
		AVMTHUNK_NATIVE_METHOD_P_DDD(flash_net_drm_DRMVoucher_private_createDRMPlaybackTimeWindow, ::avmshell::DRMVoucherObject::AS3_createDRMPlaybackTimeWindow)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_drm_DRMVoucher_private_toByteArrayInner, ::avmshell::DRMVoucherObject::AS3_toByteArrayInner)

		//new adds 11
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_net_drm_DRMVoucher_licenseID_get, ::avmshell::DRMVoucherObject::AS3_licenseID_get)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_net_drm_DRMVoucher_policyID_get, ::avmshell::DRMVoucherObject::AS3_policyID_get)
		//new adds 11 end

		//Class VoucherAccessInfo
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_VoucherAccessInfo_authenticationMethod_get, ::avmshell::VoucherAccessInfoObject::AS3_authenticationMethod_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_VoucherAccessInfo_displayName_get, ::avmshell::VoucherAccessInfoObject::AS3_displayName_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_net_drm_VoucherAccessInfo_domain_get, ::avmshell::VoucherAccessInfoObject::AS3_domain_get)

		//new adds 11
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_drm_VoucherAccessInfo_deviceGroup_get, ::avmshell::VoucherAccessInfoObject::AS3_deviceGroup_get)
		//AVMTHUNK_NATIVE_METHOD_S_VOID(flash_net_drm_VoucherAccessInfo_policyID_get, ::avmshell::VoucherAccessInfoObject::AS3_policyID_get)
		//new adds 11 end


		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_sampler_NewObjectSample_object_get, ::avmshell::NewObjectSampleObject::AS3_object_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_sampler_NewObjectSample_size_get, ::avmshell::NewObjectSampleObject::AS3_size_get)

//		AVMTHUNK_NATIVE_METHOD_EX(flash_sampler_StackFrame_toString, ::avmshell::StackFrameObject::AS3_toString)

		//Class Accelerometer
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_sensors_Accelerometer_isSupported_get, ::avmshell::AccelerometerObject::AS3_isSupported_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_sensors_Accelerometer_muted_get, ::avmshell::AccelerometerObject::AS3_muted_get)
//		AVMTHUNK_NATIVE_METHOD_EX(flash_sensors_Accelerometer_Accelerometer, ::avmshell::AccelerometerObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_sensors_Accelerometer_setRequestedUpdateInterval, ::avmshell::AccelerometerObject::AS3_setRequestedUpdateInterval)

		//Class Geolocation
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_sensors_Geolocation_isSupported_get, ::avmshell::GeolocationObject::AS3_isSupported_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_sensors_Geolocation_muted_get, ::avmshell::GeolocationObject::AS3_muted_get)
//		AVMTHUNK_NATIVE_METHOD_EX(flash_sensors_Geolocation_Geolocation, ::avmshell::GeolocationObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_sensors_Geolocation_setRequestedUpdateInterval, ::avmshell::GeolocationObject::AS3_setRequestedUpdateInterval)

		//Class ContentElement
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_ContentElement_elementFormat_get, ::avmshell::ContentElementObject::AS3_elementFormat_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_engine_ContentElement_elementFormat_set, ::avmshell::ContentElementObject::AS3_elementFormat_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_ContentElement_eventMirror_get, ::avmshell::ContentElementObject::AS3_eventMirror_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_engine_ContentElement_eventMirror_set, ::avmshell::ContentElementObject::AS3_eventMirror_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_ContentElement_groupElement_get, ::avmshell::ContentElementObject::AS3_groupElement_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_ContentElement_rawText_get, ::avmshell::ContentElementObject::AS3_rawText_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_ContentElement_text_get, ::avmshell::ContentElementObject::AS3_text_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_ContentElement_textBlock_get, ::avmshell::ContentElementObject::AS3_textBlock_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_text_engine_ContentElement_textBlockBeginIndex_get, ::avmshell::ContentElementObject::AS3_textBlockBeginIndex_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_ContentElement_textRotation_get, ::avmshell::ContentElementObject::AS3_textRotation_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_ContentElement_textRotation_set, ::avmshell::ContentElementObject::AS3_textRotation_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_ContentElement_userData_get, ::avmshell::ContentElementObject::AS3_userData_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_ContentElement_userData_set, ::avmshell::ContentElementObject::AS3_userData_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_ContentElement_ContentElement, ::avmshell::ContentElementObject::AS3_constructor)

		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_EastAsianJustifier_justificationStyle_get, ::avmshell::EastAsianJustifierObject::AS3_justificationStyle_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_EastAsianJustifier_justificationStyle_set, ::avmshell::EastAsianJustifierObject::AS3_justificationStyle_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_engine_EastAsianJustifier_composeTrailingIdeographicSpaces_set, ::avmshell::EastAsianJustifierObject::AS3_composeTrailingIdeographicSpaces_set)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_text_engine_EastAsianJustifier_composeTrailingIdeographicSpaces_get, ::avmshell::EastAsianJustifierObject::AS3_composeTrailingIdeographicSpaces_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_EastAsianJustifier_EastAsianJustifier, ::avmshell::EastAsianJustifierObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_EastAsianJustifier_clone, ::avmshell::EastAsianJustifierObject::AS3_clone)

		//Class ElementFormat
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_ElementFormat_alignmentBaseline_get, ::avmshell::ElementFormatObject::AS3_alignmentBaseline_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_ElementFormat_alignmentBaseline_set, ::avmshell::ElementFormatObject::AS3_alignmentBaseline_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_engine_ElementFormat_alpha_get, ::avmshell::ElementFormatObject::AS3_alpha_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_engine_ElementFormat_alpha_set, ::avmshell::ElementFormatObject::AS3_alpha_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_engine_ElementFormat_baselineShift_get, ::avmshell::ElementFormatObject::AS3_baselineShift_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_engine_ElementFormat_baselineShift_set, ::avmshell::ElementFormatObject::AS3_baselineShift_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_ElementFormat_breakOpportunity_get, ::avmshell::ElementFormatObject::AS3_breakOpportunity_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_ElementFormat_breakOpportunity_set, ::avmshell::ElementFormatObject::AS3_breakOpportunity_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_text_engine_ElementFormat_color_get, ::avmshell::ElementFormatObject::AS3_color_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_text_engine_ElementFormat_color_set, ::avmshell::ElementFormatObject::AS3_color_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_ElementFormat_digitCase_get, ::avmshell::ElementFormatObject::AS3_digitCase_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_ElementFormat_digitCase_set, ::avmshell::ElementFormatObject::AS3_digitCase_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_ElementFormat_digitWidth_get, ::avmshell::ElementFormatObject::AS3_digitWidth_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_ElementFormat_digitWidth_set, ::avmshell::ElementFormatObject::AS3_digitWidth_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_ElementFormat_dominantBaseline_get, ::avmshell::ElementFormatObject::AS3_dominantBaseline_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_ElementFormat_dominantBaseline_set, ::avmshell::ElementFormatObject::AS3_dominantBaseline_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_ElementFormat_fontDescription_get, ::avmshell::ElementFormatObject::AS3_fontDescription_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_engine_ElementFormat_fontDescription_set, ::avmshell::ElementFormatObject::AS3_fontDescription_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_engine_ElementFormat_fontSize_get, ::avmshell::ElementFormatObject::AS3_fontSize_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_engine_ElementFormat_fontSize_set, ::avmshell::ElementFormatObject::AS3_fontSize_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_ElementFormat_kerning_get, ::avmshell::ElementFormatObject::AS3_kerning_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_ElementFormat_kerning_set, ::avmshell::ElementFormatObject::AS3_kerning_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_ElementFormat_ligatureLevel_get, ::avmshell::ElementFormatObject::AS3_ligatureLevel_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_ElementFormat_ligatureLevel_set, ::avmshell::ElementFormatObject::AS3_ligatureLevel_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_ElementFormat_locale_get, ::avmshell::ElementFormatObject::AS3_locale_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_ElementFormat_locale_set, ::avmshell::ElementFormatObject::AS3_locale_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_engine_ElementFormat_locked_get, ::avmshell::ElementFormatObject::AS3_locked_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_text_engine_ElementFormat_locked_set, ::avmshell::ElementFormatObject::AS3_locked_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_ElementFormat_textRotation_get, ::avmshell::ElementFormatObject::AS3_textRotation_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_ElementFormat_textRotation_set, ::avmshell::ElementFormatObject::AS3_textRotation_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_engine_ElementFormat_trackingLeft_get, ::avmshell::ElementFormatObject::AS3_trackingLeft_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_engine_ElementFormat_trackingLeft_set, ::avmshell::ElementFormatObject::AS3_trackingLeft_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_engine_ElementFormat_trackingRight_get, ::avmshell::ElementFormatObject::AS3_trackingRight_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_engine_ElementFormat_trackingRight_set, ::avmshell::ElementFormatObject::AS3_trackingRight_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_ElementFormat_typographicCase_get, ::avmshell::ElementFormatObject::AS3_typographicCase_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_ElementFormat_typographicCase_set, ::avmshell::ElementFormatObject::AS3_typographicCase_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_ElementFormat_ElementFormat, ::avmshell::ElementFormatObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_ElementFormat_clone, ::avmshell::ElementFormatObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_ElementFormat_getFontMetrics, ::avmshell::ElementFormatObject::AS3_getFontMetrics)

		//Class FontDescription
		AVMTHUNK_NATIVE_METHOD_B_SSS(flash_text_engine_FontDescription_isDeviceFontCompatible, ::avmshell::FontDescriptionClass::AS3_isDeviceFontCompatible)
		AVMTHUNK_NATIVE_METHOD_B_SSS(flash_text_engine_FontDescription_isFontCompatible, ::avmshell::FontDescriptionClass::AS3_isFontCompatible)

		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_FontDescription_cffHinting_get, ::avmshell::FontDescriptionObject::AS3_cffHinting_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_FontDescription_cffHinting_set, ::avmshell::FontDescriptionObject::AS3_cffHinting_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_FontDescription_fontLookup_get, ::avmshell::FontDescriptionObject::AS3_fontLookup_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_FontDescription_fontLookup_set, ::avmshell::FontDescriptionObject::AS3_fontLookup_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_FontDescription_fontName_get, ::avmshell::FontDescriptionObject::AS3_fontName_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_FontDescription_fontName_set, ::avmshell::FontDescriptionObject::AS3_fontName_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_FontDescription_fontPosture_get, ::avmshell::FontDescriptionObject::AS3_fontPosture_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_FontDescription_fontPosture_set, ::avmshell::FontDescriptionObject::AS3_fontPosture_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_FontDescription_fontWeight_get, ::avmshell::FontDescriptionObject::AS3_fontWeight_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_FontDescription_fontWeight_set, ::avmshell::FontDescriptionObject::AS3_fontWeight_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_engine_FontDescription_locked_get, ::avmshell::FontDescriptionObject::AS3_locked_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_text_engine_FontDescription_locked_set, ::avmshell::FontDescriptionObject::AS3_locked_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_FontDescription_renderingMode_get, ::avmshell::FontDescriptionObject::AS3_renderingMode_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_FontDescription_renderingMode_set, ::avmshell::FontDescriptionObject::AS3_renderingMode_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_FontDescription_FontDescription, ::avmshell::FontDescriptionObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_FontDescription_clone, ::avmshell::FontDescriptionObject::AS3_clone)

		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_FontMetrics_emBox_get, ::avmshell::FontMetricsObject::AS3_emBox_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_FontMetrics_emBox_set, ::avmshell::FontMetricsObject::AS3_emBox_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_FontMetrics_strikethroughOffset_get, ::avmshell::FontMetricsObject::AS3_strikethroughOffset_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_FontMetrics_strikethroughOffset_set, ::avmshell::FontMetricsObject::AS3_strikethroughOffset_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_FontMetrics_strikethroughThickness_get, ::avmshell::FontMetricsObject::AS3_strikethroughThickness_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_FontMetrics_strikethroughThickness_set, ::avmshell::FontMetricsObject::AS3_strikethroughThickness_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_FontMetrics_subscriptOffset_get, ::avmshell::FontMetricsObject::AS3_subscriptOffset_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_FontMetrics_subscriptOffset_set, ::avmshell::FontMetricsObject::AS3_subscriptOffset_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_FontMetrics_subscriptScale_get, ::avmshell::FontMetricsObject::AS3_subscriptScale_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_FontMetrics_subscriptScale_set, ::avmshell::FontMetricsObject::AS3_subscriptScale_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_FontMetrics_superscriptOffset_get, ::avmshell::FontMetricsObject::AS3_superscriptOffset_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_FontMetrics_superscriptOffset_set, ::avmshell::FontMetricsObject::AS3_superscriptOffset_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_FontMetrics_superscriptScale_get, ::avmshell::FontMetricsObject::AS3_superscriptScale_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_FontMetrics_superscriptScale_set, ::avmshell::FontMetricsObject::AS3_superscriptScale_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_FontMetrics_underlineOffset_get, ::avmshell::FontMetricsObject::AS3_underlineOffset_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_FontMetrics_underlineOffset_set, ::avmshell::FontMetricsObject::AS3_underlineOffset_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_FontMetrics_underlineThickness_get, ::avmshell::FontMetricsObject::AS3_underlineThickness_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_FontMetrics_underlineThickness_set, ::avmshell::FontMetricsObject::AS3_underlineThickness_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_FontMetrics_FontMetrics, ::avmshell::FontMetricsObject::AS3_constructor)

		//Class GraphicElement
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_engine_GraphicElement_elementHeight_get, ::avmshell::GraphicElementObject::AS3_elementHeight_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_engine_GraphicElement_elementHeight_set, ::avmshell::GraphicElementObject::AS3_elementHeight_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_engine_GraphicElement_elementWidth_get, ::avmshell::GraphicElementObject::AS3_elementWidth_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_engine_GraphicElement_elementWidth_set, ::avmshell::GraphicElementObject::AS3_elementWidth_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_GraphicElement_graphic_get, ::avmshell::GraphicElementObject::AS3_graphic_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_engine_GraphicElement_graphic_set, ::avmshell::GraphicElementObject::AS3_graphic_set)
//		AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_GraphicElement_GraphicElement, ::avmshell::GraphicElementObject::AS3_constructor)

		//Class GroupElement
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_text_engine_GroupElement_elementCount_get, ::avmshell::GroupElementObject::AS3_elementCount_get)
//		AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_GroupElement_GroupElement, ::avmshell::GroupElementObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_I(flash_text_engine_GroupElement_getElementAt, ::avmshell::GroupElementObject::AS3_getElementAt)
		AVMTHUNK_NATIVE_METHOD_P_I(flash_text_engine_GroupElement_getElementAtCharIndex, ::avmshell::GroupElementObject::AS3_getElementAtCharIndex)
//		AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_GroupElement_getElementIndex, ::avmshell::GroupElementObject::AS3_getElementIndex)
		AVMTHUNK_NATIVE_METHOD_P_II(flash_text_engine_GroupElement_groupElements, ::avmshell::GroupElementObject::AS3_groupElements)
		AVMTHUNK_NATIVE_METHOD_P_II(flash_text_engine_GroupElement_mergeTextElements, ::avmshell::GroupElementObject::AS3_mergeTextElements)
		AVMTHUNK_NATIVE_METHOD_P_IIP(flash_text_engine_GroupElement_replaceElements, ::avmshell::GroupElementObject::AS3_replaceElements)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_engine_GroupElement_setElements, ::avmshell::GroupElementObject::AS3_setElements)
		AVMTHUNK_NATIVE_METHOD_P_II(flash_text_engine_GroupElement_splitTextElement, ::avmshell::GroupElementObject::AS3_splitTextElement)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_text_engine_GroupElement_ungroupElements, ::avmshell::GroupElementObject::AS3_ungroupElements)

		//Class SpaceJustifier
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_engine_SpaceJustifier_letterSpacing_get, ::avmshell::SpaceJustifierObject::AS3_letterSpacing_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_text_engine_SpaceJustifier_letterSpacing_set, ::avmshell::SpaceJustifierObject::AS3_letterSpacing_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_engine_SpaceJustifier_maximumSpacing_get, ::avmshell::SpaceJustifierObject::AS3_maximumSpacing_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_engine_SpaceJustifier_maximumSpacing_set, ::avmshell::SpaceJustifierObject::AS3_maximumSpacing_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_engine_SpaceJustifier_minimumSpacing_get, ::avmshell::SpaceJustifierObject::AS3_minimumSpacing_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_engine_SpaceJustifier_minimumSpacing_set, ::avmshell::SpaceJustifierObject::AS3_minimumSpacing_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_engine_SpaceJustifier_optimumSpacing_get, ::avmshell::SpaceJustifierObject::AS3_optimumSpacing_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_engine_SpaceJustifier_optimumSpacing_set, ::avmshell::SpaceJustifierObject::AS3_optimumSpacing_set)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_engine_SpaceJustifier_private_cloneSpacing, ::avmshell::SpaceJustifierObject::AS3_cloneSpacing)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_SpaceJustifier_SpaceJustifier, ::avmshell::SpaceJustifierObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_SpaceJustifier_clone, ::avmshell::SpaceJustifierObject::AS3_clone)

		//Class TabStop
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TabStop_alignment_get, ::avmshell::TabStopObject::AS3_alignment_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_TabStop_alignment_set, ::avmshell::TabStopObject::AS3_alignment_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TabStop_decimalAlignmentToken_get, ::avmshell::TabStopObject::AS3_decimalAlignmentToken_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_TabStop_decimalAlignmentToken_set, ::avmshell::TabStopObject::AS3_decimalAlignmentToken_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_engine_TabStop_position_get, ::avmshell::TabStopObject::AS3_position_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_engine_TabStop_position_set, ::avmshell::TabStopObject::AS3_position_set)
//		AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_TabStop_TabStop, ::avmshell::TabStopObject::AS3_constructor)

		//Class TextBlock
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_engine_TextBlock_applyNonLinearFontScaling_get, ::avmshell::TextBlockObject::AS3_applyNonLinearFontScaling_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_text_engine_TextBlock_applyNonLinearFontScaling_set, ::avmshell::TextBlockObject::AS3_applyNonLinearFontScaling_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextBlock_baselineFontDescription_get, ::avmshell::TextBlockObject::AS3_baselineFontDescription_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_engine_TextBlock_baselineFontDescription_set, ::avmshell::TextBlockObject::AS3_baselineFontDescription_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_engine_TextBlock_baselineFontSize_get, ::avmshell::TextBlockObject::AS3_baselineFontSize_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_text_engine_TextBlock_baselineFontSize_set, ::avmshell::TextBlockObject::AS3_baselineFontSize_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextBlock_baselineZero_get, ::avmshell::TextBlockObject::AS3_baselineZero_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_TextBlock_baselineZero_set, ::avmshell::TextBlockObject::AS3_baselineZero_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_text_engine_TextBlock_bidiLevel_get, ::avmshell::TextBlockObject::AS3_bidiLevel_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_text_engine_TextBlock_bidiLevel_set, ::avmshell::TextBlockObject::AS3_bidiLevel_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextBlock_content_get, ::avmshell::TextBlockObject::AS3_content_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_engine_TextBlock_content_set, ::avmshell::TextBlockObject::AS3_content_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextBlock_firstInvalidLine_get, ::avmshell::TextBlockObject::AS3_firstInvalidLine_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextBlock_firstLine_get, ::avmshell::TextBlockObject::AS3_firstLine_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextBlock_lastLine_get, ::avmshell::TextBlockObject::AS3_lastLine_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextBlock_lineRotation_get, ::avmshell::TextBlockObject::AS3_lineRotation_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_TextBlock_lineRotation_set, ::avmshell::TextBlockObject::AS3_lineRotation_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextBlock_textLineCreationResult_get, ::avmshell::TextBlockObject::AS3_textLineCreationResult_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextBlock_dump, ::avmshell::TextBlockObject::AS3_dump)
		AVMTHUNK_NATIVE_METHOD_I_I(flash_text_engine_TextBlock_findNextAtomBoundary, ::avmshell::TextBlockObject::AS3_findNextAtomBoundary)
		AVMTHUNK_NATIVE_METHOD_I_I(flash_text_engine_TextBlock_findNextWordBoundary, ::avmshell::TextBlockObject::AS3_findNextWordBoundary)
		AVMTHUNK_NATIVE_METHOD_I_I(flash_text_engine_TextBlock_findPreviousAtomBoundary, ::avmshell::TextBlockObject::AS3_findPreviousAtomBoundary)
		AVMTHUNK_NATIVE_METHOD_I_I(flash_text_engine_TextBlock_findPreviousWordBoundary, ::avmshell::TextBlockObject::AS3_findPreviousWordBoundary)
		AVMTHUNK_NATIVE_METHOD_P_I(flash_text_engine_TextBlock_getTextLineAtCharIndex, ::avmshell::TextBlockObject::AS3_getTextLineAtCharIndex)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_text_engine_TextBlock_releaseLineCreationData, ::avmshell::TextBlockObject::AS3_releaseLineCreationData)
		AVMTHUNK_NATIVE_METHOD_VOID_PP(flash_text_engine_TextBlock_releaseLines, ::avmshell::TextBlockObject::AS3_releaseLines)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextBlock_private_getTextJustifier, ::avmshell::TextBlockObject::AS3_getTextJustifier)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_engine_TextBlock_private_setTextJustifier, ::avmshell::TextBlockObject::AS3_setTextJustifier)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextBlock_private_getTabStops, ::avmshell::TextBlockObject::AS3_getTabStops)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_engine_TextBlock_private_setTabStops, ::avmshell::TextBlockObject::AS3_setTabStops)
		AVMTHUNK_NATIVE_METHOD_P_PDDBP(flash_text_engine_TextBlock_private_DoCreateTextLine, ::avmshell::TextBlockObject::AS3_DoCreateTextLine)

		//Class TextElement
//		AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_TextElement_text_get, ::avmshell::TextElementObject::AS3_text_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_TextElement_text_set, ::avmshell::TextElementObject::AS3_text_set)
//		AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_TextElement_TextElement, ::avmshell::TextElementObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_VOID_IIS(flash_text_engine_TextElement_replaceText, ::avmshell::TextElementObject::AS3_replaceText)

		//Class TextJustifier
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_TextJustifier_getJustifierForLocale, ::avmshell::TextJustifierObject::AS3_getJustifierForLocale)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextJustifier_lineJustification_get, ::avmshell::TextJustifierObject::AS3_lineJustification_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_TextJustifier_lineJustification_set, ::avmshell::TextJustifierObject::AS3_lineJustification_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextJustifier_locale_get, ::avmshell::TextJustifierObject::AS3_locale_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_engine_TextJustifier_private_setLocale, ::avmshell::TextJustifierObject::AS3_setLocal)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_TextJustifier_TextJustifier, ::avmshell::TextJustifierObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_engine_TextJustifier_clone, ::avmshell::TextJustifierObject::AS3_clone)

		//Class TextLine
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_engine_TextLine_ascent_get, ::avmshell::TextLineObject::AS3_ascent_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_text_engine_TextLine_atomCount_get, ::avmshell::TextLineObject::AS3_atomCount_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_engine_TextLine_descent_get, ::avmshell::TextLineObject::AS3_descent_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_engine_TextLine_hasGraphicElement_get, ::avmshell::TextLineObject::AS3_hasGraphicElement_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_engine_TextLine_hasTabs_get, ::avmshell::TextLineObject::AS3_hasTabs_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextLine_mirrorRegions_get, ::avmshell::TextLineObject::AS3_mirrorRegions_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextLine_nextLine_get, ::avmshell::TextLineObject::AS3_nextLine_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextLine_previousLine_get, ::avmshell::TextLineObject::AS3_previousLine_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_text_engine_TextLine_rawTextLength_get, ::avmshell::TextLineObject::AS3_rawTextLength_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_engine_TextLine_specifiedWidth_get, ::avmshell::TextLineObject::AS3_specifiedWidth_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextLine_textBlock_get, ::avmshell::TextLineObject::AS3_textBlock_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_text_engine_TextLine_textBlockBeginIndex_get, ::avmshell::TextLineObject::AS3_textBlockBeginIndex_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_engine_TextLine_textHeight_get, ::avmshell::TextLineObject::AS3_textHeight_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_engine_TextLine_textWidth_get, ::avmshell::TextLineObject::AS3_textWidth_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_engine_TextLine_totalAscent_get, ::avmshell::TextLineObject::AS3_totalAscent_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_engine_TextLine_totalDescent_get, ::avmshell::TextLineObject::AS3_totalDescent_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_engine_TextLine_totalHeight_get, ::avmshell::TextLineObject::AS3_totalHeight_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_text_engine_TextLine_unjustifiedTextWidth_get, ::avmshell::TextLineObject::AS3_unjustifiedTextWidth_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextLine_validity_get, ::avmshell::TextLineObject::AS3_validity_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_engine_TextLine_validity_set, ::avmshell::TextLineObject::AS3_validity_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextLine_dump, ::avmshell::TextLineObject::AS3_dump)
		AVMTHUNK_NATIVE_METHOD_I_I(flash_text_engine_TextLine_getAtomBidiLevel, ::avmshell::TextLineObject::AS3_getAtomBidiLevel)
		AVMTHUNK_NATIVE_METHOD_P_I(flash_text_engine_TextLine_getAtomBounds, ::avmshell::TextLineObject::AS3_getAtomBounds)
		AVMTHUNK_NATIVE_METHOD_D_I(flash_text_engine_TextLine_getAtomCenter, ::avmshell::TextLineObject::AS3_getAtomCenter)
		AVMTHUNK_NATIVE_METHOD_P_I(flash_text_engine_TextLine_getAtomGraphic, ::avmshell::TextLineObject::AS3_getAtomGraphic)
		AVMTHUNK_NATIVE_METHOD_I_I(flash_text_engine_TextLine_getAtomIndexAtCharIndex, ::avmshell::TextLineObject::AS3_getAtomIndexAtCharIndex)
		AVMTHUNK_NATIVE_METHOD_I_DD(flash_text_engine_TextLine_getAtomIndexAtPoint, ::avmshell::TextLineObject::AS3_getAtomIndexAtPoint)
		AVMTHUNK_NATIVE_METHOD_I_I(flash_text_engine_TextLine_getAtomTextBlockBeginIndex, ::avmshell::TextLineObject::AS3_getAtomTextBlockBeginIndex)
		AVMTHUNK_NATIVE_METHOD_I_I(flash_text_engine_TextLine_getAtomTextBlockEndIndex, ::avmshell::TextLineObject::AS3_getAtomTextBlockEndIndex)
		AVMTHUNK_NATIVE_METHOD_P_I(flash_text_engine_TextLine_getAtomTextRotation, ::avmshell::TextLineObject::AS3_getAtomTextRotation)
		AVMTHUNK_NATIVE_METHOD_B_I(flash_text_engine_TextLine_getAtomWordBoundaryOnLeft, ::avmshell::TextLineObject::AS3_getAtomWordBoundaryOnLeft)
		AVMTHUNK_NATIVE_METHOD_D_S(flash_text_engine_TextLine_getBaselinePosition, ::avmshell::TextLineObject::AS3_getBaselinePosition)

		//Class TextLineMirrorRegion
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextLineMirrorRegion_bounds_get, ::avmshell::TextLineMirrorRegionObject::AS3_bounds_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextLineMirrorRegion_element_get, ::avmshell::TextLineMirrorRegionObject::AS3_element_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextLineMirrorRegion_mirror_get, ::avmshell::TextLineMirrorRegionObject::AS3_mirror_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextLineMirrorRegion_nextRegion_get, ::avmshell::TextLineMirrorRegionObject::AS3_nextRegion_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextLineMirrorRegion_previousRegion_get, ::avmshell::TextLineMirrorRegionObject::AS3_previousRegion_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_engine_TextLineMirrorRegion_textLine_get, ::avmshell::TextLineMirrorRegionObject::AS3_textLine_get)

		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_ime_CompositionAttributeRange_converted_get, ::avmshell::CompositionAttributeRangeObject::AS3_converted_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_ime_CompositionAttributeRange_converted_set, ::avmshell::CompositionAttributeRangeObject::AS3_converted_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_ime_CompositionAttributeRange_relativeEnd_get, ::avmshell::CompositionAttributeRangeObject::AS3_relativeEnd_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_ime_CompositionAttributeRange_relativeEnd_set, ::avmshell::CompositionAttributeRangeObject::AS3_relativeEnd_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_ime_CompositionAttributeRange_relativeStart_get, ::avmshell::CompositionAttributeRangeObject::AS3_relativeStart_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_ime_CompositionAttributeRange_relativeStart_set, ::avmshell::CompositionAttributeRangeObject::AS3_relativeStart_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_ime_CompositionAttributeRange_selected_get, ::avmshell::CompositionAttributeRangeObject::AS3_selected_get)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_ime_CompositionAttributeRange_selected_set, ::avmshell::CompositionAttributeRangeObject::AS3_selected_set)
		//AVMTHUNK_NATIVE_METHOD_EX(flash_text_ime_CompositionAttributeRange_CompositionAttributeRange, ::avmshell::CompositionAttributeRangeObject::AS3_constructor)

		AVMTHUNK_NATIVE_METHOD_EX(flash_security_XMLSignatureValidator_isSupported_get, ::avmshell::XMLSignatureValidatorObject::AS3_isSupported_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_security_XMLSignatureValidator_digestStatus_get, ::avmshell::XMLSignatureValidatorObject::AS3_digestStatus_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_security_XMLSignatureValidator_identityStatus_get, ::avmshell::XMLSignatureValidatorObject::AS3_identityStatus_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_security_XMLSignatureValidator_referencesStatus_get, ::avmshell::XMLSignatureValidatorObject::AS3_referencesStatus_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_security_XMLSignatureValidator_referencesValidationSetting_get, ::avmshell::XMLSignatureValidatorObject::AS3_referencesValidationSetting_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_security_XMLSignatureValidator_referencesValidationSetting_set, ::avmshell::XMLSignatureValidatorObject::AS3_referencesValidationSetting_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_security_XMLSignatureValidator_revocationCheckSetting_get, ::avmshell::XMLSignatureValidatorObject::AS3_revocationCheckSetting_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_security_XMLSignatureValidator_revocationCheckSetting_set, ::avmshell::XMLSignatureValidatorObject::AS3_revocationCheckSetting_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_security_XMLSignatureValidator_signerCN_get, ::avmshell::XMLSignatureValidatorObject::AS3_signerCN_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_security_XMLSignatureValidator_signerDN_get, ::avmshell::XMLSignatureValidatorObject::AS3_signerDN_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_security_XMLSignatureValidator_signerExtendedKeyUsages_get, ::avmshell::XMLSignatureValidatorObject::AS3_signerExtendedKeyUsages_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_security_XMLSignatureValidator_signerTrustSettings_get, ::avmshell::XMLSignatureValidatorObject::AS3_signerTrustSettings_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_security_XMLSignatureValidator_uriDereferencer_get, ::avmshell::XMLSignatureValidatorObject::AS3_uriDereferencer_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_security_XMLSignatureValidator_uriDereferencer_set, ::avmshell::XMLSignatureValidatorObject::AS3_uriDereferencer_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_security_XMLSignatureValidator_useSystemTrustStore_get, ::avmshell::XMLSignatureValidatorObject::AS3_useSystemTrustStore_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_security_XMLSignatureValidator_useSystemTrustStore_set, ::avmshell::XMLSignatureValidatorObject::AS3_useSystemTrustStore_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_security_XMLSignatureValidator_validityStatus_get, ::avmshell::XMLSignatureValidatorObject::AS3_validityStatus_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_security_XMLSignatureValidator_XMLSignatureValidator, ::avmshell::XMLSignatureValidatorObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_EX(flash_security_XMLSignatureValidator_addCertificate, ::avmshell::XMLSignatureValidatorObject::AS3_addCertificate)
		AVMTHUNK_NATIVE_METHOD_EX(flash_security_XMLSignatureValidator_verify, ::avmshell::XMLSignatureValidatorObject::AS3_verify)

		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLHistoryItem_isPost_get, ::avmshell::HTMLHistoryItemObject::AS3_isPost_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLHistoryItem_originalUrl_get, ::avmshell::HTMLHistoryItemObject::AS3_originalUrl_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLHistoryItem_title_get, ::avmshell::HTMLHistoryItemObject::AS3_title_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLHistoryItem_url_get, ::avmshell::HTMLHistoryItemObject::AS3_url_get)

		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLHost_htmlLoader_get, ::avmshell::HTMLHostObject::AS3_htmlLoader_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLHost_windowRect_get, ::avmshell::HTMLHostObject::AS3_windowRect_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLHost_windowRect_set, ::avmshell::HTMLHostObject::AS3_windowRect_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLHost_HTMLHost, ::avmshell::HTMLHostObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLHost_createWindow, ::avmshell::HTMLHostObject::AS3_createWindow)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLHost_updateLocation, ::avmshell::HTMLHostObject::AS3_updateLocation)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLHost_updateStatus, ::avmshell::HTMLHostObject::AS3_updateStatus)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLHost_updateTitle, ::avmshell::HTMLHostObject::AS3_updateTitle)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLHost_windowBlur, ::avmshell::HTMLHostObject::AS3_windowBlur)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLHost_windowClose, ::avmshell::HTMLHostObject::AS3_windowClose)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLHost_windowFocus, ::avmshell::HTMLHostObject::AS3_windowFocus)

		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_isSupported_get, ::avmshell::HTMLLoaderObject::AS3_isSupported_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_pdfCapability_get, ::avmshell::HTMLLoaderObject::AS3_pdfCapability_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_swfCapability_get, ::avmshell::HTMLLoaderObject::AS3_swfCapability_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_createRootWindow, ::avmshell::HTMLLoaderObject::AS3_createRootWindow)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_authenticate_get, ::avmshell::HTMLLoaderObject::AS3_authenticate_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_authenticate_set, ::avmshell::HTMLLoaderObject::AS3_authenticate_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_cacheResponse_get, ::avmshell::HTMLLoaderObject::AS3_cacheResponse_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_cacheResponse_set, ::avmshell::HTMLLoaderObject::AS3_cacheResponse_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_contentHeight_get, ::avmshell::HTMLLoaderObject::AS3_contentHeight_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_contentWidth_get, ::avmshell::HTMLLoaderObject::AS3_contentWidth_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_hasFocusableContent_get, ::avmshell::HTMLLoaderObject::AS3_hasFocusableContent_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_height_get, ::avmshell::HTMLLoaderObject::AS3_height_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_height_set, ::avmshell::HTMLLoaderObject::AS3_height_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_historyLength_get, ::avmshell::HTMLLoaderObject::AS3_historyLength_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_historyPosition_get, ::avmshell::HTMLLoaderObject::AS3_historyPosition_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_historyPosition_set, ::avmshell::HTMLLoaderObject::AS3_historyPosition_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_htmlHost_get, ::avmshell::HTMLLoaderObject::AS3_htmlHost_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_htmlHost_set, ::avmshell::HTMLLoaderObject::AS3_htmlHost_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_idleTimeout_get, ::avmshell::HTMLLoaderObject::AS3_idleTimeout_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_idleTimeout_set, ::avmshell::HTMLLoaderObject::AS3_idleTimeout_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_loaded_get, ::avmshell::HTMLLoaderObject::AS3_loaded_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_location_get, ::avmshell::HTMLLoaderObject::AS3_location_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_manageCookies_get, ::avmshell::HTMLLoaderObject::AS3_manageCookies_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_manageCookies_set, ::avmshell::HTMLLoaderObject::AS3_manageCookies_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_navigateInSystemBrowser_get, ::avmshell::HTMLLoaderObject::AS3_navigateInSystemBrowser_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_navigateInSystemBrowser_set, ::avmshell::HTMLLoaderObject::AS3_navigateInSystemBrowser_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_paintsDefaultBackground_get, ::avmshell::HTMLLoaderObject::AS3_paintsDefaultBackground_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_paintsDefaultBackground_set, ::avmshell::HTMLLoaderObject::AS3_paintsDefaultBackground_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_placeLoadStringContentInApplicationSandbox_get, ::avmshell::HTMLLoaderObject::AS3_placeLoadStringContentInApplicationSandbox_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_placeLoadStringContentInApplicationSandbox_set, ::avmshell::HTMLLoaderObject::AS3_placeLoadStringContentInApplicationSandbox_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_runtimeApplicationDomain_get, ::avmshell::HTMLLoaderObject::AS3_runtimeApplicationDomain_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_runtimeApplicationDomain_set, ::avmshell::HTMLLoaderObject::AS3_runtimeApplicationDomain_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_scrollH_get, ::avmshell::HTMLLoaderObject::AS3_scrollH_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_scrollH_set, ::avmshell::HTMLLoaderObject::AS3_scrollH_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_scrollV_get, ::avmshell::HTMLLoaderObject::AS3_scrollV_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_scrollV_set, ::avmshell::HTMLLoaderObject::AS3_scrollV_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_textEncodingFallback_get, ::avmshell::HTMLLoaderObject::AS3_textEncodingFallback_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_textEncodingFallback_set, ::avmshell::HTMLLoaderObject::AS3_textEncodingFallback_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_textEncodingOverride_get, ::avmshell::HTMLLoaderObject::AS3_textEncodingOverride_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_textEncodingOverride_set, ::avmshell::HTMLLoaderObject::AS3_textEncodingOverride_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_useCache_get, ::avmshell::HTMLLoaderObject::AS3_useCache_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_useCache_set, ::avmshell::HTMLLoaderObject::AS3_useCache_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_userAgent_get, ::avmshell::HTMLLoaderObject::AS3_userAgent_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_userAgent_set, ::avmshell::HTMLLoaderObject::AS3_userAgent_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_width_get, ::avmshell::HTMLLoaderObject::AS3_width_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_width_set, ::avmshell::HTMLLoaderObject::AS3_width_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_window_get, ::avmshell::HTMLLoaderObject::AS3_window_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_HTMLLoader, ::avmshell::HTMLLoaderObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_cancelLoad, ::avmshell::HTMLLoaderObject::AS3_cancelLoad)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_getHistoryAt, ::avmshell::HTMLLoaderObject::AS3_getHistoryAt)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_historyBack, ::avmshell::HTMLLoaderObject::AS3_historyBack)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_historyForward, ::avmshell::HTMLLoaderObject::AS3_historyForward)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_historyGo, ::avmshell::HTMLLoaderObject::AS3_historyGo)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_load, ::avmshell::HTMLLoaderObject::AS3_load)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_loadString, ::avmshell::HTMLLoaderObject::AS3_loadString)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLLoader_reload, ::avmshell::HTMLLoaderObject::AS3_reload)

		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLWindowCreateOptions_fullscreen_get, ::avmshell::HTMLWindowCreateOptionsObject::AS3_fullscreen_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLWindowCreateOptions_fullscreen_set, ::avmshell::HTMLWindowCreateOptionsObject::AS3_fullscreen_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLWindowCreateOptions_height_get, ::avmshell::HTMLWindowCreateOptionsObject::AS3_height_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLWindowCreateOptions_height_set, ::avmshell::HTMLWindowCreateOptionsObject::AS3_height_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLWindowCreateOptions_locationBarVisible_get, ::avmshell::HTMLWindowCreateOptionsObject::AS3_locationBarVisible_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLWindowCreateOptions_locationBarVisible_set, ::avmshell::HTMLWindowCreateOptionsObject::AS3_locationBarVisible_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLWindowCreateOptions_menuBarVisible_get, ::avmshell::HTMLWindowCreateOptionsObject::AS3_menuBarVisible_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLWindowCreateOptions_menuBarVisible_set, ::avmshell::HTMLWindowCreateOptionsObject::AS3_menuBarVisible_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLWindowCreateOptions_resizable_get, ::avmshell::HTMLWindowCreateOptionsObject::AS3_resizable_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLWindowCreateOptions_resizable_set, ::avmshell::HTMLWindowCreateOptionsObject::AS3_resizable_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLWindowCreateOptions_scrollBarsVisible_get, ::avmshell::HTMLWindowCreateOptionsObject::AS3_scrollBarsVisible_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLWindowCreateOptions_scrollBarsVisible_set, ::avmshell::HTMLWindowCreateOptionsObject::AS3_scrollBarsVisible_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLWindowCreateOptions_statusBarVisible_get, ::avmshell::HTMLWindowCreateOptionsObject::AS3_statusBarVisible_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLWindowCreateOptions_statusBarVisible_set, ::avmshell::HTMLWindowCreateOptionsObject::AS3_statusBarVisible_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLWindowCreateOptions_toolBarVisible_get, ::avmshell::HTMLWindowCreateOptionsObject::AS3_toolBarVisible_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLWindowCreateOptions_toolBarVisible_set, ::avmshell::HTMLWindowCreateOptionsObject::AS3_toolBarVisible_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLWindowCreateOptions_width_get, ::avmshell::HTMLWindowCreateOptionsObject::AS3_width_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLWindowCreateOptions_width_set, ::avmshell::HTMLWindowCreateOptionsObject::AS3_width_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLWindowCreateOptions_x_get, ::avmshell::HTMLWindowCreateOptionsObject::AS3_x_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLWindowCreateOptions_x_set, ::avmshell::HTMLWindowCreateOptionsObject::AS3_x_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLWindowCreateOptions_y_get, ::avmshell::HTMLWindowCreateOptionsObject::AS3_y_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_html_HTMLWindowCreateOptions_y_set, ::avmshell::HTMLWindowCreateOptionsObject::AS3_y_set)

		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_AAAARecord_address_get, ::avmshell::AAAARecordObject::AS3_address_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_AAAARecord_address_set, ::avmshell::AAAARecordObject::AS3_address_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_AAAARecord_AAAARecord, ::avmshell::AAAARecordObject::AS3_constructor)

		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_ARecord_address_get, ::avmshell::ARecordObject::AS3_address_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_ARecord_address_set, ::avmshell::ARecordObject::AS3_address_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_ARecord_ARecord, ::avmshell::ARecordObject::AS3_constructor)

		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_DNSResolver_isSupported_get, ::avmshell::DNSResolverObject::AS3_isSupported_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_DNSResolver_DNSResolver, ::avmshell::DNSResolverObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_DNSResolver_lookup, ::avmshell::DNSResolverObject::AS3_lookup)

		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_MXRecord_exchange_get, ::avmshell::MXRecordObject::AS3_exchange_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_MXRecord_exchange_set, ::avmshell::MXRecordObject::AS3_exchange_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_MXRecord_preference_get, ::avmshell::MXRecordObject::AS3_preference_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_MXRecord_preference_set, ::avmshell::MXRecordObject::AS3_preference_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_MXRecord_MXRecord, ::avmshell::MXRecordObject::AS3_constructor)

		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_PTRRecord_ptrdName_get, ::avmshell::PTRRecordObject::AS3_ptrdName_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_PTRRecord_ptrdName_set, ::avmshell::PTRRecordObject::AS3_ptrdName_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_PTRRecord_PTRRecord, ::avmshell::PTRRecordObject::AS3_constructor)

		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_ResourceRecord_name_get, ::avmshell::ResourceRecordObject::AS3_name_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_ResourceRecord_name_set, ::avmshell::ResourceRecordObject::AS3_name_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_ResourceRecord_ttl_get, ::avmshell::ResourceRecordObject::AS3_ttl_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_ResourceRecord_ttl_set, ::avmshell::ResourceRecordObject::AS3_ttl_set)

		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_SRVRecord_port_get, ::avmshell::SRVRecordObject::AS3_port_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_SRVRecord_port_set, ::avmshell::SRVRecordObject::AS3_port_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_SRVRecord_priority_get, ::avmshell::SRVRecordObject::AS3_priority_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_SRVRecord_priority_set, ::avmshell::SRVRecordObject::AS3_priority_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_SRVRecord_target_get, ::avmshell::SRVRecordObject::AS3_target_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_SRVRecord_target_set, ::avmshell::SRVRecordObject::AS3_target_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_SRVRecord_weight_get, ::avmshell::SRVRecordObject::AS3_weight_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_SRVRecord_weight_set, ::avmshell::SRVRecordObject::AS3_weight_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_net_dns_SRVRecord_SRVRecord, ::avmshell::SRVRecordObject::AS3_constructor)

		AVMTHUNK_NATIVE_METHOD_EX(flash_data_EncryptedLocalStore_isSupported_get, ::avmshell::EncryptedLocalStoreObject::AS3_isSupported_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_EncryptedLocalStore_getItem, ::avmshell::EncryptedLocalStoreObject::AS3_getItem)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_EncryptedLocalStore_removeItem, ::avmshell::EncryptedLocalStoreObject::AS3_removeItem)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_EncryptedLocalStore_reset, ::avmshell::EncryptedLocalStoreObject::AS3_reset)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_EncryptedLocalStore_setItem, ::avmshell::EncryptedLocalStoreObject::AS3_setItem)

		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLColumnSchema_allowNull_get, ::avmshell::SQLColumnSchemaObject::AS3_allowNull_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLColumnSchema_autoIncrement_get, ::avmshell::SQLColumnSchemaObject::AS3_autoIncrement_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLColumnSchema_dataType_get, ::avmshell::SQLColumnSchemaObject::AS3_dataType_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLColumnSchema_defaultCollationType_get, ::avmshell::SQLColumnSchemaObject::AS3_defaultCollationType_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLColumnSchema_name_get, ::avmshell::SQLColumnSchemaObject::AS3_name_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLColumnSchema_primaryKey_get, ::avmshell::SQLColumnSchemaObject::AS3_primaryKey_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLColumnSchema_SQLColumnSchema, ::avmshell::SQLColumnSchemaObject::AS3_constructor)

		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_autoCompact_get, ::avmshell::SQLConnectionObject::AS3_autoCompact_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_cacheSize_get, ::avmshell::SQLConnectionObject::AS3_cacheSize_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_cacheSize_set, ::avmshell::SQLConnectionObject::AS3_cacheSize_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_columnNameStyle_get, ::avmshell::SQLConnectionObject::AS3_columnNameStyle_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_columnNameStyle_set, ::avmshell::SQLConnectionObject::AS3_columnNameStyle_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_connected_get, ::avmshell::SQLConnectionObject::AS3_connected_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_inTransaction_get, ::avmshell::SQLConnectionObject::AS3_inTransaction_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_lastInsertRowID_get, ::avmshell::SQLConnectionObject::AS3_lastInsertRowID_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_pageSize_get, ::avmshell::SQLConnectionObject::AS3_pageSize_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_totalChanges_get, ::avmshell::SQLConnectionObject::AS3_totalChanges_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_SQLConnection, ::avmshell::SQLConnectionObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_addEventListener, ::avmshell::SQLConnectionObject::AS3_addEventListener)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_analyze, ::avmshell::SQLConnectionObject::AS3_analyze)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_attach, ::avmshell::SQLConnectionObject::AS3_attach)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_begin, ::avmshell::SQLConnectionObject::AS3_begin)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_cancel, ::avmshell::SQLConnectionObject::AS3_cancel)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_close, ::avmshell::SQLConnectionObject::AS3_close)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_commit, ::avmshell::SQLConnectionObject::AS3_commit)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_compact, ::avmshell::SQLConnectionObject::AS3_compact)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_deanalyze, ::avmshell::SQLConnectionObject::AS3_deanalyze)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_detach, ::avmshell::SQLConnectionObject::AS3_detach)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_getSchemaResult, ::avmshell::SQLConnectionObject::AS3_getSchemaResult)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_loadSchema, ::avmshell::SQLConnectionObject::AS3_loadSchema)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_open, ::avmshell::SQLConnectionObject::AS3_open)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_openAsync, ::avmshell::SQLConnectionObject::AS3_openAsync)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_reencrypt, ::avmshell::SQLConnectionObject::AS3_reencrypt)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_releaseSavepoint, ::avmshell::SQLConnectionObject::AS3_releaseSavepoint)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_removeEventListener, ::avmshell::SQLConnectionObject::AS3_removeEventListener)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_rollback, ::avmshell::SQLConnectionObject::AS3_rollback)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_rollbackToSavepoint, ::avmshell::SQLConnectionObject::AS3_rollbackToSavepoint)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_setSavepoint, ::avmshell::SQLConnectionObject::AS3_setSavepoint)
		//SQLConnection new adds 11
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLConnection_isSupported_get,::avmshell::SQLConnectionClass::AS3_isSupported_get)
		//SQLConnection new adds 11 end

		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLIndexSchema_table_get, ::avmshell::SQLIndexSchemaObject::AS3_table_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLIndexSchema_SQLIndexSchema, ::avmshell::SQLIndexSchemaObject::AS3_constructor)

		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLResult_complete_get, ::avmshell::SQLResultObject::AS3_complete_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLResult_data_get, ::avmshell::SQLResultObject::AS3_data_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLResult_lastInsertRowID_get, ::avmshell::SQLResultObject::AS3_lastInsertRowID_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLResult_rowsAffected_get, ::avmshell::SQLResultObject::AS3_rowsAffected_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLResult_SQLResult, ::avmshell::SQLResultObject::AS3_constructor)

		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLSchema_database_get, ::avmshell::SQLSchemaObject::AS3_database_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLSchema_name_get, ::avmshell::SQLSchemaObject::AS3_name_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLSchema_sql_get, ::avmshell::SQLSchemaObject::AS3_sql_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLSchema_SQLSchema, ::avmshell::SQLSchemaObject::AS3_constructor)

		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLSchemaResult_indices_get, ::avmshell::SQLSchemaResultObject::AS3_indices_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLSchemaResult_tables_get, ::avmshell::SQLSchemaResultObject::AS3_tables_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLSchemaResult_triggers_get, ::avmshell::SQLSchemaResultObject::AS3_triggers_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLSchemaResult_views_get, ::avmshell::SQLSchemaResultObject::AS3_views_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLSchemaResult_SQLSchemaResult, ::avmshell::SQLSchemaResultObject::AS3_constructor)

		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLStatement_executing_get, ::avmshell::SQLStatementObject::AS3_executing_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLStatement_itemClass_get, ::avmshell::SQLStatementObject::AS3_itemClass_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLStatement_itemClass_set, ::avmshell::SQLStatementObject::AS3_itemClass_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLStatement_parameters_get, ::avmshell::SQLStatementObject::AS3_parameters_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLStatement_sqlConnection_get, ::avmshell::SQLStatementObject::AS3_sqlConnection_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLStatement_sqlConnection_set, ::avmshell::SQLStatementObject::AS3_sqlConnection_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLStatement_text_get, ::avmshell::SQLStatementObject::AS3_text_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLStatement_text_set, ::avmshell::SQLStatementObject::AS3_text_set)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLStatement_SQLStatement, ::avmshell::SQLStatementObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLStatement_cancel, ::avmshell::SQLStatementObject::AS3_cancel)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLStatement_clearParameters, ::avmshell::SQLStatementObject::AS3_clearParameters)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLStatement_execute, ::avmshell::SQLStatementObject::AS3_execute)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLStatement_getResult, ::avmshell::SQLStatementObject::AS3_getResult)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLStatement_next, ::avmshell::SQLStatementObject::AS3_next)

		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLTableSchema_columns_get, ::avmshell::SQLTableSchemaObject::AS3_columns_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLTableSchema_SQLTableSchema, ::avmshell::SQLTableSchemaObject::AS3_constructor)

		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLTriggerSchema_table_get, ::avmshell::SQLTriggerSchemaObject::AS3_table_get)
		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLTriggerSchema_SQLTriggerSchema, ::avmshell::SQLTriggerSchemaObject::AS3_constructor)

		AVMTHUNK_NATIVE_METHOD_EX(flash_data_SQLViewSchema_SQLViewSchema, ::avmshell::SQLViewSchemaObject::AS3_constructor)

		//Class NativeWindowDisplayStateEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_NativeWindowDisplayStateEvent_afterDisplayState_get, ::avmshell::NativeWindowDisplayStateEventObject::AS3_afterDisplayState_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_NativeWindowDisplayStateEvent_beforeDisplayState_get, ::avmshell::NativeWindowDisplayStateEventObject::AS3_beforeDisplayState_get)
		AVMTHUNK_NATIVE_METHOD_VOID_SBBSS(flash_events_NativeWindowDisplayStateEvent_NativeWindowDisplayStateEvent, ::avmshell::NativeWindowDisplayStateEventObject::AS3_constructor)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_NativeWindowDisplayStateEvent_clone, ::avmshell::NativeWindowDisplayStateEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_NativeWindowDisplayStateEvent_toString, ::avmshell::NativeWindowDisplayStateEventObject::AS3_toString)

		//Class X500DistinguishedName
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_security_X500DistinguishedName_commonName_get, ::avmshell::X500DistinguishedNameObject::AS3_commonName_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_security_X500DistinguishedName_organizationName_get, ::avmshell::X500DistinguishedNameObject::AS3_organizationName_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_security_X500DistinguishedName_organizationalUnitName_get, ::avmshell::X500DistinguishedNameObject::AS3_organizationalUnitName_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_security_X500DistinguishedName_localityName_get, ::avmshell::X500DistinguishedNameObject::AS3_localityName_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_security_X500DistinguishedName_stateOrProvinceName_get, ::avmshell::X500DistinguishedNameObject::AS3_stateOrProvinceName_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_security_X500DistinguishedName_countryName_get, ::avmshell::X500DistinguishedNameObject::AS3_countryName_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_security_X500DistinguishedName_toString, ::avmshell::X500DistinguishedNameObject::AS3_toString)

		//Class X509Certificate
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_security_X509Certificate_version_get, ::avmshell::X509CertificateObject::AS3_version_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_security_X509Certificate_serialNumber_get, ::avmshell::X509CertificateObject::AS3_serialNumber_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_security_X509Certificate_signatureAlgorithmOID_get, ::avmshell::X509CertificateObject::AS3_signatureAlgorithmOID_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_security_X509Certificate_signatureAlgorithmParams_get, ::avmshell::X509CertificateObject::AS3_signatureAlgorithmParams_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_security_X509Certificate_issuer_get, ::avmshell::X509CertificateObject::AS3_issuer_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_security_X509Certificate_validNotBefore_get, ::avmshell::X509CertificateObject::AS3_validNotBefore_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_security_X509Certificate_validNotAfter_get, ::avmshell::X509CertificateObject::AS3_validNotAfter_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_security_X509Certificate_subject_get, ::avmshell::X509CertificateObject::AS3_subject_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_security_X509Certificate_subjectPublicKeyAlgorithmOID_get, ::avmshell::X509CertificateObject::AS3_subjectPublicKeyAlgorithmOID_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_security_X509Certificate_subjectPublicKey_get, ::avmshell::X509CertificateObject::AS3_subjectPublicKey_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_security_X509Certificate_issuerUniqueID_get, ::avmshell::X509CertificateObject::AS3_issuerUniqueID_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_security_X509Certificate_subjectUniqueID_get, ::avmshell::X509CertificateObject::AS3_subjectUniqueID_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_security_X509Certificate_encoded_get, ::avmshell::X509CertificateObject::AS3_encoded_get)

		//Class Clipboard
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_desktop_Clipboard_generalClipboard_get, ::avmshell::ClipboardClass::AS3_generalClipboard_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_desktop_Clipboard_formats_get, ::avmshell::ClipboardObject::AS3_formats_get)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_desktop_Clipboard_clear, ::avmshell::ClipboardObject::AS3_clear)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_desktop_Clipboard_clearData, ::avmshell::ClipboardObject::AS3_clearData)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_desktop_Clipboard_private_alive_get, ::avmshell::ClipboardObject::AS3_alive_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_desktop_Clipboard_private_canReadContents_get, ::avmshell::ClipboardObject::AS3_canReadContents_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_desktop_Clipboard_private_canWriteContents_get, ::avmshell::ClipboardObject::AS3_canWriteContents_get)
		AVMTHUNK_NATIVE_METHOD_VOID_SP(flash_desktop_Clipboard_private_nativeSetHandler, ::avmshell::ClipboardObject::AS3_nativeSetHandler)
		AVMTHUNK_NATIVE_METHOD_P_S(flash_desktop_Clipboard_private_getObjectReference, ::avmshell::ClipboardObject::AS3_getObjectReference)
		AVMTHUNK_NATIVE_METHOD_VOID_SP(flash_desktop_Clipboard_private_putObjectReference, ::avmshell::ClipboardObject::AS3_putObjectReference)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_desktop_Clipboard_private_getString, ::avmshell::ClipboardObject::AS3_getString)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_desktop_Clipboard_private_putString, ::avmshell::ClipboardObject::AS3_putString)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_desktop_Clipboard_private_getHTML, ::avmshell::ClipboardObject::AS3_getHTML)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_desktop_Clipboard_private_putHTML, ::avmshell::ClipboardObject::AS3_putHTML)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_desktop_Clipboard_private_getRTF, ::avmshell::ClipboardObject::AS3_getRTF)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_desktop_Clipboard_private_putRTF, ::avmshell::ClipboardObject::AS3_putRTF)
		AVMTHUNK_NATIVE_METHOD_P_S(flash_desktop_Clipboard_private_getByteArray, ::avmshell::ClipboardObject::AS3_getByteArray)
		AVMTHUNK_NATIVE_METHOD_VOID_SP(flash_desktop_Clipboard_private_putByteArray, ::avmshell::ClipboardObject::AS3_putByteArray)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_desktop_Clipboard_private_swfVersion_get, ::avmshell::ClipboardObject::AS3_swfVersion_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_desktop_Clipboard_private_setHandlerStoringData, ::avmshell::ClipboardObject::AS3_setHandlerStoringData)

		//Class DRMVoucherStoreContext
		AVMTHUNK_NATIVE_METHOD_U_P(flash_net_drm_DRMVoucherStoreContext_private_getVoucherFromStoreInner, ::avmshell::DRMVoucherStoreContextObject::AS3_getVoucherFromStoreInner)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_net_drm_DRMVoucherStoreContext_private_getVoucherInner, ::avmshell::DRMVoucherStoreContextObject::AS3_getVoucherInner)

		//Class DRMManagerSession
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_drm_DRMManagerSession_getLastError, ::avmshell::DRMManagerSessionObject::AS3_getLastError)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_drm_DRMManagerSession_getLastSubErrorID, ::avmshell::DRMManagerSessionObject::AS3_getLastSubErrorID)
		AVMTHUNK_NATIVE_METHOD_VOID_SPPB(flash_net_drm_DRMManagerSession_private_issueDRMStatusEventInner, ::avmshell::DRMManagerSessionObject::AS3_issueDRMStatusEventInner)
		AVMTHUNK_NATIVE_METHOD_VOID_PIIS(flash_net_drm_DRMManagerSession_issueDRMErrorEvent, ::avmshell::DRMManagerSessionObject::AS3_issueDRMErrorEvent)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_net_drm_DRMManagerSession_errorCodeToThrow, ::avmshell::DRMManagerSessionObject::AS3_errorCodeToThrow)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_net_drm_DRMManagerSession_private_checkStatusInner, ::avmshell::DRMManagerSessionObject::AS3_checkStatusInner)
		//new adds end

		//new adds 11

		//Class Stage3D
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_display_Stage3D_visible_get, ::avmshell::Stage3DObject::AS3_visible_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_display_Stage3D_visible_set, ::avmshell::Stage3DObject::AS3_visible_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_Stage3D_x_get, ::avmshell::Stage3DObject::AS3_x_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_Stage3D_x_set, ::avmshell::Stage3DObject::AS3_x_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_display_Stage3D_y_get, ::avmshell::Stage3DObject::AS3_y_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_display_Stage3D_y_set, ::avmshell::Stage3DObject::AS3_y_set)
		
		
		//Class AVDictionaryDataEvent
		//AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_AVDictionaryDataEvent_dictionary_get, ::avmshell::AVDictionaryDataEventObject::AS3_dictionary_get)
		//AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_AVDictionaryDataEvent_time_get, ::avmshell::AVDictionaryDataEventObject::AS3_time_get)
		

		//Class DRMDeviceGroupErrorEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMDeviceGroupErrorEvent_deviceGroup_get, ::avmshell::DRMDeviceGroupErrorEventObject::AS3_deviceGroup_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_DRMDeviceGroupErrorEvent_deviceGroup_set, ::avmshell::DRMDeviceGroupErrorEventObject::AS3_deviceGroup_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_DRMDeviceGroupErrorEvent_drmUpdateNeeded_get, ::avmshell::DRMDeviceGroupErrorEventObject::AS3_drmUpdateNeeded_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_events_DRMDeviceGroupErrorEvent_subErrorID_get, ::avmshell::DRMDeviceGroupErrorEventObject::AS3_subErrorID_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_events_DRMDeviceGroupErrorEvent_subErrorID_set, ::avmshell::DRMDeviceGroupErrorEventObject::AS3_subErrorID_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_events_DRMDeviceGroupErrorEvent_systemUpdateNeeded_get, ::avmshell::DRMDeviceGroupErrorEventObject::AS3_systemUpdateNeeded_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMDeviceGroupErrorEvent_clone, ::avmshell::DRMDeviceGroupErrorEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_events_DRMDeviceGroupErrorEvent_toString, ::avmshell::DRMDeviceGroupErrorEventObject::AS3_toString)


		//Class DRMDeviceGroupEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMDeviceGroupEvent_deviceGroup_get, ::avmshell::DRMDeviceGroupEventObject::AS3_deviceGroup_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_events_DRMDeviceGroupEvent_deviceGroup_set, ::avmshell::DRMDeviceGroupEventObject::AS3_deviceGroup_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMDeviceGroupEvent_clone, ::avmshell::DRMDeviceGroupEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_events_DRMDeviceGroupEvent_toString, ::avmshell::DRMDeviceGroupEventObject::AS3_toString)


		//Class DRMLicenseRequestEvent
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_events_DRMLicenseRequestEvent_serverURL_get, ::avmshell::DRMLicenseRequestEventObject::AS3_serverURL_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_events_DRMLicenseRequestEvent_serverURL_set, ::avmshell::DRMLicenseRequestEventObject::AS3_serverURL_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMLicenseRequestEvent_clone, ::avmshell::DRMLicenseRequestEventObject::AS3_clone)


		//Class DRMMetadataEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMMetadataEvent_drmMetadata_get, ::avmshell::DRMMetadataEventObject::AS3_drmMetadata_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_DRMMetadataEvent_timestamp_get, ::avmshell::DRMMetadataEventObject::AS3_timestamp_get)

		//Class DRMReturnVoucherCompleteEvent
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_events_DRMReturnVoucherCompleteEvent_licenseID_get, ::avmshell::DRMReturnVoucherCompleteEventObject::AS3_licenseID_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_events_DRMReturnVoucherCompleteEvent_licenseID_set, ::avmshell::DRMReturnVoucherCompleteEventObject::AS3_licenseID_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_events_DRMReturnVoucherCompleteEvent_numberOfVouchersReturned_get, ::avmshell::DRMReturnVoucherCompleteEventObject::AS3_numberOfVouchersReturned_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_events_DRMReturnVoucherCompleteEvent_numberOfVouchersReturned_set, ::avmshell::DRMReturnVoucherCompleteEventObject::AS3_numberOfVouchersReturned_set)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_events_DRMReturnVoucherCompleteEvent_policyID_get, ::avmshell::DRMReturnVoucherCompleteEventObject::AS3_policyID_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_events_DRMReturnVoucherCompleteEvent_policyID_set, ::avmshell::DRMReturnVoucherCompleteEventObject::AS3_policyID_set)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_events_DRMReturnVoucherCompleteEvent_serverURL_get, ::avmshell::DRMReturnVoucherCompleteEventObject::AS3_serverURL_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_events_DRMReturnVoucherCompleteEvent_serverURL_set, ::avmshell::DRMReturnVoucherCompleteEventObject::AS3_serverURL_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMReturnVoucherCompleteEvent_clone, ::avmshell::DRMReturnVoucherCompleteEventObject::AS3_clone)
		
		//Class DRMReturnVoucherErrorEvent
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_events_DRMReturnVoucherErrorEvent_licenseID_get, ::avmshell::DRMReturnVoucherErrorEventObject::AS3_licenseID_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_events_DRMReturnVoucherErrorEvent_licenseID_set, ::avmshell::DRMReturnVoucherErrorEventObject::AS3_licenseID_set)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_events_DRMReturnVoucherErrorEvent_policyID_get, ::avmshell::DRMReturnVoucherErrorEventObject::AS3_policyID_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_events_DRMReturnVoucherErrorEvent_policyID_set, ::avmshell::DRMReturnVoucherErrorEventObject::AS3_policyID_set)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_events_DRMReturnVoucherErrorEvent_serverURL_get, ::avmshell::DRMReturnVoucherErrorEventObject::AS3_serverURL_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_events_DRMReturnVoucherErrorEvent_serverURL_set, ::avmshell::DRMReturnVoucherErrorEventObject::AS3_serverURL_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_events_DRMReturnVoucherErrorEvent_subErrorID_get, ::avmshell::DRMReturnVoucherErrorEventObject::AS3_subErrorID_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_events_DRMReturnVoucherErrorEvent_subErrorID_set, ::avmshell::DRMReturnVoucherErrorEventObject::AS3_subErrorID_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_DRMReturnVoucherErrorEvent_clone, ::avmshell::DRMReturnVoucherErrorEventObject::AS3_clone)
	
		// class GameInputEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_GameInputEvent_device_get, ::avmshell::GameInputEventObject::AS3_device_get)

		// Class RemoteNotificationEvent
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_RemoteNotificationEvent_data_get, ::avmshell::RemoteNotificationEventObject::AS3_data_get)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_events_RemoteNotificationEvent_tokenId_get, ::avmshell::RemoteNotificationEventObject::AS3_tokenId_get)
	
		// Class ThrottleEvent
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_events_ThrottleEvent_state_get, ::avmshell::ThrottleEventObject::AS3_state_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_events_ThrottleEvent_targetFrameRate_get, ::avmshell::ThrottleEventObject::AS3_targetFrameRate_get)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_events_ThrottleEvent_clone, ::avmshell::ThrottleEventObject::AS3_clone)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_events_ThrottleEvent_toString, ::avmshell::ThrottleEventObject::AS3_toString)

		// Class AVTagData
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_media_AVTagData_data_get, ::avmshell::AVTagDataObject::AS3_data_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_media_AVTagData_localTime_get, ::avmshell::AVTagDataObject::AS3_localTime_get)
		AVMTHUNK_NATIVE_METHOD_VOID_SD(flash_media_AVTagData_AVTagData, ::avmshell::AVTagDataObject::AS3_constructor)

		// Class CameraRollBrowseOptions
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_media_CameraRollBrowseOptions_height_get, ::avmshell::CameraRollBrowseOptionsObject::AS3_height_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_media_CameraRollBrowseOptions_height_set, ::avmshell::CameraRollBrowseOptionsObject::AS3_height_set)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_media_CameraRollBrowseOptions_origin_get, ::avmshell::CameraRollBrowseOptionsObject::AS3_origin_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_media_CameraRollBrowseOptions_origin_set, ::avmshell::CameraRollBrowseOptionsObject::AS3_origin_set)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_media_CameraRollBrowseOptions_width_get, ::avmshell::CameraRollBrowseOptionsObject::AS3_width_get)
		AVMTHUNK_NATIVE_METHOD_VOID_D(flash_media_CameraRollBrowseOptions_width_set, ::avmshell::CameraRollBrowseOptionsObject::AS3_width_set)

		// Class H264VideoStreamSettings
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_media_H264VideoStreamSettings_codec_get, ::avmshell::H264VideoStreamSettingsObject::AS3_codec_get)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_media_H264VideoStreamSettings_level_get, ::avmshell::H264VideoStreamSettingsObject::AS3_level_get)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_media_H264VideoStreamSettings_profile_get, ::avmshell::H264VideoStreamSettingsObject::AS3_profile_get)
		AVMTHUNK_NATIVE_METHOD_VOID_SS(flash_media_H264VideoStreamSettings_setProfileLevel, ::avmshell::H264VideoStreamSettingsObject::AS3_setProfileLevel)

		// Class VideoStreamSettings
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_VideoStreamSettings_bandwidth_get, ::avmshell::VideoStreamSettingsObject::AS3_bandwidth_get)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_media_VideoStreamSettings_codec_get, ::avmshell::VideoStreamSettingsObject::AS3_codec_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_media_VideoStreamSettings_fps_get, ::avmshell::VideoStreamSettingsObject::AS3_fps_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_VideoStreamSettings_height_get, ::avmshell::VideoStreamSettingsObject::AS3_height_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_VideoStreamSettings_keyFrameInterval_get, ::avmshell::VideoStreamSettingsObject::AS3_keyFrameInterval_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_VideoStreamSettings_quality_get, ::avmshell::VideoStreamSettingsObject::AS3_quality_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_media_VideoStreamSettings_width_get, ::avmshell::VideoStreamSettingsObject::AS3_width_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_media_VideoStreamSettings_setKeyFrameInterval, ::avmshell::VideoStreamSettingsObject::AS3_setKeyFrameInterval)
		AVMTHUNK_NATIVE_METHOD_VOID_IID(flash_media_VideoStreamSettings_setMode, ::avmshell::VideoStreamSettingsObject::AS3_setMode)
		AVMTHUNK_NATIVE_METHOD_VOID_II(flash_media_VideoStreamSettings_setQuality, ::avmshell::VideoStreamSettingsObject::AS3_setQuality)

		//Class DRMDeviceGroup
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_net_drm_DRMDeviceGroup_authenticationMethod_get, ::avmshell::DRMDeviceGroupObject::AS3_authenticationMethod_get)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_net_drm_DRMDeviceGroup_domain_get, ::avmshell::DRMDeviceGroupObject::AS3_domain_get)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_net_drm_DRMDeviceGroup_name_get, ::avmshell::DRMDeviceGroupObject::AS3_name_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_net_drm_DRMDeviceGroup_name_set, ::avmshell::DRMDeviceGroupObject::AS3_name_set)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_net_drm_DRMDeviceGroup_serverURL_get, ::avmshell::DRMDeviceGroupObject::AS3_serverURL_get)

		// Class MessageChannel
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_MessageChannel_messageAvailable_get, ::avmshell::MessageChannelObject::AS3_messageAvailable_get)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_system_MessageChannel_state_get, ::avmshell::MessageChannelObject::AS3_state_get)
		AVMTHUNK_NATIVE_METHOD_VOID_SPBIB(flash_system_MessageChannel_addEventListener, ::avmshell::MessageChannelObject::AS3_addEventListener)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_system_MessageChannel_close, ::avmshell::MessageChannelObject::AS3_close)
		AVMTHUNK_NATIVE_METHOD_P_B(flash_system_MessageChannel_receive, ::avmshell::MessageChannelObject::AS3_receive)
		AVMTHUNK_NATIVE_METHOD_VOID_SPB(flash_system_MessageChannel_removeEventListener, ::avmshell::MessageChannelObject::AS3_removeEventListener)
		AVMTHUNK_NATIVE_METHOD_VOID_PI(flash_system_MessageChannel_send, ::avmshell::MessageChannelObject::AS3_send)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_system_MessageChannel_toString, ::avmshell::MessageChannelObject::AS3_toString)

		// Class Worker
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_Worker_current_get, ::avmshell::WorkerClass::AS3_current_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_Worker_isPrimordial_get, ::avmshell::WorkerObject::AS3_isPrimordial_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_Worker_isSupported_get, ::avmshell::WorkerClass::AS3_isSupported_get)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_system_Worker_state_get, ::avmshell::WorkerObject::AS3_state_get)
		AVMTHUNK_NATIVE_METHOD_VOID_SPBIB(flash_system_Worker_addEventListener, ::avmshell::WorkerObject::AS3_addEventListener)
		AVMTHUNK_NATIVE_METHOD_P_P(flash_system_Worker_createMessageChannel, ::avmshell::WorkerObject::AS3_createMessageChannel)
		AVMTHUNK_NATIVE_METHOD_P_S(flash_system_Worker_getSharedProperty, ::avmshell::WorkerObject::AS3_getSharedProperty)
		AVMTHUNK_NATIVE_METHOD_VOID_SPB(flash_system_Worker_removeEventListener, ::avmshell::WorkerObject::AS3_removeEventListener)
		AVMTHUNK_NATIVE_METHOD_VOID_SP(flash_system_Worker_setSharedProperty, ::avmshell::WorkerObject::AS3_setSharedProperty)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_system_Worker_start, ::avmshell::WorkerObject::AS3_start)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_Worker_terminate, ::avmshell::WorkerObject::AS3_terminate)

		// Class WorkerDomain
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_WorkerDomain_current_get, ::avmshell::WorkerDomainClass::AS3_current_get)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_system_WorkerDomain_isSupported_get, ::avmshell::WorkerDomainClass::AS3_isSupported_get)
		AVMTHUNK_NATIVE_METHOD_P_PB(flash_system_WorkerDomain_createWorker, ::avmshell::WorkerDomainObject::AS3_createWorker)
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_system_WorkerDomain_listWorkers, ::avmshell::WorkerDomainObject::AS3_listWorkers)

		// Class StageText
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_text_StageText_autoCapitalize_get, ::avmshell::StageTextObject::AS3_autoCapitalize_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_StageText_autoCapitalize_set, ::avmshell::StageTextObject::AS3_autoCapitalize_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_StageText_autoCorrect_get, ::avmshell::StageTextObject::AS3_autoCorrect_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_text_StageText_autoCorrect_set, ::avmshell::StageTextObject::AS3_autoCorrect_set)
		AVMTHUNK_NATIVE_METHOD_U_VOID(flash_text_StageText_color_get, ::avmshell::StageTextObject::AS3_color_get)
		AVMTHUNK_NATIVE_METHOD_VOID_U(flash_text_StageText_color_set, ::avmshell::StageTextObject::AS3_color_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_StageText_displayAsPassword_get, ::avmshell::StageTextObject::AS3_displayAsPassword_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_text_StageText_displayAsPassword_set, ::avmshell::StageTextObject::AS3_displayAsPassword_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_StageText_editable_get, ::avmshell::StageTextObject::AS3_editable_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_text_StageText_editable_set, ::avmshell::StageTextObject::AS3_editable_set)	
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_text_StageText_fontFamily_get, ::avmshell::StageTextObject::AS3_fontFamily_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_StageText_fontFamily_set, ::avmshell::StageTextObject::AS3_fontFamily_set)	
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_text_StageText_fontPosture_get, ::avmshell::StageTextObject::AS3_fontPosture_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_StageText_fontPosture_set, ::avmshell::StageTextObject::AS3_fontPosture_set)	
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_text_StageText_fontSize_get, ::avmshell::StageTextObject::AS3_fontSize_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_text_StageText_fontSize_set, ::avmshell::StageTextObject::AS3_fontSize_set)	
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_text_StageText_fontWeight_get, ::avmshell::StageTextObject::AS3_fontWeight_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_StageText_fontWeight_set, ::avmshell::StageTextObject::AS3_fontWeight_set)	
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_text_StageText_locale_get, ::avmshell::StageTextObject::AS3_locale_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_StageText_locale_set, ::avmshell::StageTextObject::AS3_locale_set)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_text_StageText_maxChars_get, ::avmshell::StageTextObject::AS3_maxChars_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_text_StageText_maxChars_set, ::avmshell::StageTextObject::AS3_maxChars_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_StageText_multiline_get, ::avmshell::StageTextObject::AS3_multiline_get)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_text_StageText_restrict_get, ::avmshell::StageTextObject::AS3_restrict_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_StageText_restrict_set, ::avmshell::StageTextObject::AS3_restrict_set)	
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_text_StageText_returnKeyLabel_get, ::avmshell::StageTextObject::AS3_returnKeyLabel_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_StageText_returnKeyLabel_set, ::avmshell::StageTextObject::AS3_returnKeyLabel_set)	
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_text_StageText_selectionActiveIndex_get, ::avmshell::StageTextObject::AS3_selectionActiveIndex_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_text_StageText_selectionAnchorIndex_get, ::avmshell::StageTextObject::AS3_selectionAnchorIndex_get)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_text_StageText_softKeyboardType_get, ::avmshell::StageTextObject::AS3_softKeyboardType_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_StageText_softKeyboardType_set, ::avmshell::StageTextObject::AS3_softKeyboardType_set)		
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_StageText_stage_get, ::avmshell::StageTextObject::AS3_stage_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_StageText_stage_set, ::avmshell::StageTextObject::AS3_stage_set)		
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_text_StageText_text_get, ::avmshell::StageTextObject::AS3_text_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_StageText_text_set, ::avmshell::StageTextObject::AS3_text_set)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_text_StageText_textAlign_get, ::avmshell::StageTextObject::AS3_textAlign_get)
		AVMTHUNK_NATIVE_METHOD_VOID_S(flash_text_StageText_textAlign_set, ::avmshell::StageTextObject::AS3_textAlign_set)	
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_text_StageText_viewPort_get, ::avmshell::StageTextObject::AS3_viewPort_get)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_StageText_viewPort_set, ::avmshell::StageTextObject::AS3_viewPort_set)
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_StageText_visible_get, ::avmshell::StageTextObject::AS3_visible_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_text_StageText_visible_set, ::avmshell::StageTextObject::AS3_visible_set)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_text_StageText_assignFocus, ::avmshell::StageTextObject::AS3_assignFocus)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_text_StageText_dispose, ::avmshell::StageTextObject::AS3_dispose)
		AVMTHUNK_NATIVE_METHOD_VOID_P(flash_text_StageText_drawViewPortToBitmapData, ::avmshell::StageTextObject::AS3_drawViewPortToBitmapData)
		AVMTHUNK_NATIVE_METHOD_VOID_II(flash_text_StageText_selectRange, ::avmshell::StageTextObject::AS3_selectRange)

		// Class StageTextInitOptions
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_text_StageTextInitOptions_multiline_get, ::avmshell::StageTextInitOptionsObject::AS3_multiline_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_text_StageTextInitOptions_multiline_set, ::avmshell::StageTextInitOptionsObject::AS3_multiline_set)

		// Class GameInput
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_ui_GameInput_isSupported_get, ::avmshell::GameInputClass::AS3_isSupported_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_ui_GameInput_numDevices_get, ::avmshell::GameInputClass::AS3_numDevices_get)
		AVMTHUNK_NATIVE_METHOD_P_I(flash_ui_GameInput_getDeviceAt, ::avmshell::GameInputClass::AS3_getDeviceAt)

		// Class GameInputControl
		AVMTHUNK_NATIVE_METHOD_P_VOID(flash_ui_GameInputControl_device_get, ::avmshell::GameInputControlObject::AS3_device_get)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_ui_GameInputControl_id_get, ::avmshell::GameInputControlObject::AS3_id_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_ui_GameInputControl_maxValue_get, ::avmshell::GameInputControlObject::AS3_maxValue_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_ui_GameInputControl_minValue_get, ::avmshell::GameInputControlObject::AS3_minValue_get)
		AVMTHUNK_NATIVE_METHOD_D_VOID(flash_ui_GameInputControl_value_get, ::avmshell::GameInputControlObject::AS3_value_get)



		// Class GameInputDevice
		AVMTHUNK_NATIVE_METHOD_B_VOID(flash_ui_GameInputDevice_enabled_get, ::avmshell::GameInputDeviceObject::AS3_enabled_get)
		AVMTHUNK_NATIVE_METHOD_VOID_B(flash_ui_GameInputDevice_enabled_set, ::avmshell::GameInputDeviceObject::AS3_enabled_set)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_ui_GameInputDevice_id_get, ::avmshell::GameInputDeviceObject::AS3_id_get)
		AVMTHUNK_NATIVE_METHOD_S_VOID(flash_ui_GameInputDevice_name_get, ::avmshell::GameInputDeviceObject::AS3_name_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_ui_GameInputDevice_numControls_get, ::avmshell::GameInputDeviceObject::AS3_numControls_get)
		AVMTHUNK_NATIVE_METHOD_I_VOID(flash_ui_GameInputDevice_sampleInterval_get, ::avmshell::GameInputDeviceObject::AS3_sampleInterval_get)
		AVMTHUNK_NATIVE_METHOD_VOID_I(flash_ui_GameInputDevice_sampleInterval_set, ::avmshell::GameInputDeviceObject::AS3_sampleInterval_set)
		AVMTHUNK_NATIVE_METHOD_I_PB(flash_ui_GameInputDevice_getCachedSamples, ::avmshell::GameInputDeviceObject::AS3_getCachedSamples)
		AVMTHUNK_NATIVE_METHOD_P_I(flash_ui_GameInputDevice_getControlAt, ::avmshell::GameInputDeviceObject::AS3_getControlAt)
		AVMTHUNK_NATIVE_METHOD_VOID_IP(flash_ui_GameInputDevice_startCachingSamples, ::avmshell::GameInputDeviceObject::AS3_startCachingSamples)
		AVMTHUNK_NATIVE_METHOD_VOID_VOID(flash_ui_GameInputDevice_stopCachingSamples, ::avmshell::GameInputDeviceObject::AS3_stopCachingSamples)

		AVMTHUNK_NATIVE_METHOD_P_SP( JSON_parse, ::avmshell::JSONClass::AS3_parse )
		//AVMTHUNK_NATIVE_METHOD_S_PPP( JSON_stringify, ::avmshell::JSONClass::AS3_stringify )

		//new adds 11 end
		/////////////////////////////////////////////////////////////////////////////
		//extends for OPT
		//AVMTHUNK_NATIVE_METHOD_VOID_P(org_util_zip_Inflater_setInput, ::avmshell::InflaterObject::AS3_setInput)
		//AVMTHUNK_NATIVE_METHOD_U_P(org_util_zip_Inflater_inflate, ::avmshell::InflaterObject::AS3_inflate)

		////////////////////////////////////////////////////////////////////////////////////////////////////
		// Private
		//AVMTHUNK_NATIVE_METHOD_VOID_VOID(avmplus_Domain_Domain, ::avmshell::DomainObject::AS3_constructor)
		//AVMTHUNK_NATIVE_METHOD_VOID_VOID(avmplus_Domain_domainMemory_get, ::avmshell::DomainObject::AS3_domainMemory_get)
		//AVMTHUNK_NATIVE_METHOD_VOID_VOID(avmplus_Domain_domainMemory_set, ::avmshell::DomainObject::AS3_domainMemory_set)



	AVMTHUNK_END_NATIVE_METHODS()

	//Map Class(Instance) Table


	AVMTHUNK_BEGIN_NATIVE_CLASSES(TotalInclude)

		AVMTHUNK_NATIVE_CLASS(abcclass_flash_geom_ColorTransform, ColorTransformClass, ::avmshell::ColorTransformClass, SlotOffsetsAndAsserts::s_slotsOffsetColorTransformClass, ::avmshell::ColorTransformObject, SlotOffsetsAndAsserts::s_slotsOffsetColorTransformObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_geom_Point, PointClass, ::avmshell::PointClass, SlotOffsetsAndAsserts::s_slotsOffsetPointClass, ::avmshell::PointObject, SlotOffsetsAndAsserts::s_slotsOffsetPointObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_geom_Rectangle, RectangleClass, ::avmshell::RectangleClass, SlotOffsetsAndAsserts::s_slotsOffsetRectangleClass, ::avmshell::RectangleObject, SlotOffsetsAndAsserts::s_slotsOffsetRectangleObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_geom_Matrix, MatrixClass, ::avmshell::MatrixClass, SlotOffsetsAndAsserts::s_slotsOffsetMatrixClass, ::avmshell::MatrixObject, SlotOffsetsAndAsserts::s_slotsOffsetMatrixObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_Event, EventClass, ::avmshell::EventClass, SlotOffsetsAndAsserts::s_slotsOffsetEventClass, ::avmshell::EventObject, SlotOffsetsAndAsserts::s_slotsOffsetEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_BitmapData, BitmapDataClass, ::avmshell::BitmapDataClass, SlotOffsetsAndAsserts::s_slotsOffsetBitmapDataClass, ::avmshell::BitmapDataObject, SlotOffsetsAndAsserts::s_slotsOffsetBitmapDataObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_system_ApplicationDomain, ApplicationDomainClass, ::avmshell::ApplicationDomainClass, SlotOffsetsAndAsserts::s_slotsOffsetApplicationDomainClass, ::avmshell::ApplicationDomainObject, SlotOffsetsAndAsserts::s_slotsOffsetApplicationDomainObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_system_SecurityDomain, SecurityDomainClass, ::avmshell::SecurityDomainClass, SlotOffsetsAndAsserts::s_slotsOffsetSecurityDomainClass, ::avmshell::SecurityDomainObject, SlotOffsetsAndAsserts::s_slotsOffsetSecurityDomainObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_utils_ByteArray, ByteArrayClass, ::avmshell::ByteArrayClass, SlotOffsetsAndAsserts::s_slotsOffsetByteArrayClass, ::avmshell::ByteArrayObject, SlotOffsetsAndAsserts::s_slotsOffsetByteArrayObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_ui_ContextMenuBuiltInItems, ContextMenuBuiltInItemsClass, ::avmshell::ContextMenuBuiltInItemsClass, SlotOffsetsAndAsserts::s_slotsOffsetContextMenuBuiltInItemsClass, ::avmshell::ContextMenuBuiltInItemsObject, SlotOffsetsAndAsserts::s_slotsOffsetContextMenuBuiltInItemsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_accessibility_AccessibilityProperties, AccessibilityPropertiesClass, ::avmshell::AccessibilityPropertiesClass, SlotOffsetsAndAsserts::s_slotsOffsetAccessibilityPropertiesClass, ::avmshell::AccessibilityPropertiesObject, SlotOffsetsAndAsserts::s_slotsOffsetAccessibilityPropertiesObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_geom_Transform, TransformClass, ::avmshell::TransformClass, SlotOffsetsAndAsserts::s_slotsOffsetTransformClass, ::avmshell::TransformObject, SlotOffsetsAndAsserts::s_slotsOffsetTransformObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_EventDispatcher, EventDispatcherClass, ::avmshell::EventDispatcherClass, SlotOffsetsAndAsserts::s_slotsOffsetEventDispatcherClass, ::avmshell::EventDispatcherObject, SlotOffsetsAndAsserts::s_slotsOffsetEventDispatcherObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_URLRequest, URLRequestClass, ::avmshell::URLRequestClass, SlotOffsetsAndAsserts::s_slotsOffsetURLRequestClass, ::avmshell::URLRequestObject, SlotOffsetsAndAsserts::s_slotsOffsetURLRequestObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_media_SoundTransform, SoundTransformClass, ::avmshell::SoundTransformClass, SlotOffsetsAndAsserts::s_slotsOffsetSoundTransformClass, ::avmshell::SoundTransformObject, SlotOffsetsAndAsserts::s_slotsOffsetSoundTransformObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_Responder, ResponderClass, ::avmshell::ResponderClass, SlotOffsetsAndAsserts::s_slotsOffsetResponderClass, ::avmshell::ResponderObject, SlotOffsetsAndAsserts::s_slotsOffsetResponderObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_media_ID3Info, ID3InfoClass, ::avmshell::ID3InfoClass, SlotOffsetsAndAsserts::s_slotsOffsetID3InfoClass, ::avmshell::ID3InfoObject, SlotOffsetsAndAsserts::s_slotsOffsetID3InfoObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_media_SoundLoaderContext, SoundLoaderContextClass, ::avmshell::SoundLoaderContextClass, SlotOffsetsAndAsserts::s_slotsOffsetSoundLoaderContextClass, ::avmshell::SoundLoaderContextObject, SlotOffsetsAndAsserts::s_slotsOffsetSoundLoaderContextObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_TextFormat, TextFormatClass, ::avmshell::TextFormatClass, SlotOffsetsAndAsserts::s_slotsOffsetTextFormatClass, ::avmshell::TextFormatObject, SlotOffsetsAndAsserts::s_slotsOffsetTextFormatObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_system_LoaderContext, LoaderContextClass, ::avmshell::LoaderContextClass, SlotOffsetsAndAsserts::s_slotsOffsetLoaderContextClass, ::avmshell::LoaderContextObject, SlotOffsetsAndAsserts::s_slotsOffsetLoaderContextObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_filters_BitmapFilter, BitmapFilterClass, ::avmshell::BitmapFilterClass, SlotOffsetsAndAsserts::s_slotsOffsetBitmapFilterClass, ::avmshell::BitmapFilterObject, SlotOffsetsAndAsserts::s_slotsOffsetBitmapFilterObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_TextSnapshot, TextSnapshotClass, ::avmshell::TextSnapshotClass, SlotOffsetsAndAsserts::s_slotsOffsetTextSnapshotClass, ::avmshell::TextSnapshotObject, SlotOffsetsAndAsserts::s_slotsOffsetTextSnapshotObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_Graphics, GraphicsClass, ::avmshell::GraphicsClass, SlotOffsetsAndAsserts::s_slotsOffsetGraphicsClass, ::avmshell::GraphicsObject, SlotOffsetsAndAsserts::s_slotsOffsetGraphicsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_Scene, SceneClass, ::avmshell::SceneClass, SlotOffsetsAndAsserts::s_slotsOffsetSceneClass, ::avmshell::SceneObject, SlotOffsetsAndAsserts::s_slotsOffsetSceneObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_printing_PrintJobOptions, PrintJobOptionsClass, ::avmshell::PrintJobOptionsClass, SlotOffsetsAndAsserts::s_slotsOffsetPrintJobOptionsClass, ::avmshell::PrintJobOptionsObject, SlotOffsetsAndAsserts::s_slotsOffsetPrintJobOptionsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_accessibility_Accessibility, AccessibilityClass, ::avmshell::AccessibilityClass, SlotOffsetsAndAsserts::s_slotsOffsetAccessibilityClass, ::avmshell::AccessibilityObject, SlotOffsetsAndAsserts::s_slotsOffsetAccessibilityObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_ActionScriptVersion, ActionScriptVersionClass, ::avmshell::ActionScriptVersionClass, SlotOffsetsAndAsserts::s_slotsOffsetActionScriptVersionClass, ::avmshell::ActionScriptVersionObject, SlotOffsetsAndAsserts::s_slotsOffsetActionScriptVersionObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_AntiAliasType, AntiAliasTypeClass, ::avmshell::AntiAliasTypeClass, SlotOffsetsAndAsserts::s_slotsOffsetAntiAliasTypeClass, ::avmshell::AntiAliasTypeObject, SlotOffsetsAndAsserts::s_slotsOffsetAntiAliasTypeObject)
		//AVMTHUNK_NATIVE_CLASS(abcclass_arguments, argumentsClass, ::avmshell::argumentsClass, SlotOffsetsAndAsserts::s_slotsOffsetargumentsClass, ::avmshell::argumentsObject, SlotOffsetsAndAsserts::s_slotsOffsetargumentsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_BitmapDataChannel, BitmapDataChannelClass, ::avmshell::BitmapDataChannelClass, SlotOffsetsAndAsserts::s_slotsOffsetBitmapDataChannelClass, ::avmshell::BitmapDataChannelObject, SlotOffsetsAndAsserts::s_slotsOffsetBitmapDataChannelObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_filters_BitmapFilterQuality, BitmapFilterQualityClass, ::avmshell::BitmapFilterQualityClass, SlotOffsetsAndAsserts::s_slotsOffsetBitmapFilterQualityClass, ::avmshell::BitmapFilterQualityObject, SlotOffsetsAndAsserts::s_slotsOffsetBitmapFilterQualityObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_filters_BitmapFilterType, BitmapFilterTypeClass, ::avmshell::BitmapFilterTypeClass, SlotOffsetsAndAsserts::s_slotsOffsetBitmapFilterTypeClass, ::avmshell::BitmapFilterTypeObject, SlotOffsetsAndAsserts::s_slotsOffsetBitmapFilterTypeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_BlendMode, BlendModeClass, ::avmshell::BlendModeClass, SlotOffsetsAndAsserts::s_slotsOffsetBlendModeClass, ::avmshell::BlendModeObject, SlotOffsetsAndAsserts::s_slotsOffsetBlendModeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_system_Capabilities, CapabilitiesClass, ::avmshell::CapabilitiesClass, SlotOffsetsAndAsserts::s_slotsOffsetCapabilitiesClass, ::avmshell::CapabilitiesObject, SlotOffsetsAndAsserts::s_slotsOffsetCapabilitiesObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_CapsStyle, CapsStyleClass, ::avmshell::CapsStyleClass, SlotOffsetsAndAsserts::s_slotsOffsetCapsStyleClass, ::avmshell::CapsStyleObject, SlotOffsetsAndAsserts::s_slotsOffsetCapsStyleObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_CSMSettings, CSMSettingsClass, ::avmshell::CSMSettingsClass, SlotOffsetsAndAsserts::s_slotsOffsetCSMSettingsClass, ::avmshell::CSMSettingsObject, SlotOffsetsAndAsserts::s_slotsOffsetCSMSettingsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_adobe_utils_CustomActions, CustomActionsClass, ::avmshell::CustomActionsClass, SlotOffsetsAndAsserts::s_slotsOffsetCustomActionsClass, ::avmshell::CustomActionsObject, SlotOffsetsAndAsserts::s_slotsOffsetCustomActionsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_utils_Dictionary, DictionaryClass, ::avmshell::DictionaryClass, SlotOffsetsAndAsserts::s_slotsOffsetDictionaryClass, ::avmshell::DictionaryObject, SlotOffsetsAndAsserts::s_slotsOffsetDictionaryObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_filters_DisplacementMapFilterMode, DisplacementMapFilterModeClass, ::avmshell::DisplacementMapFilterModeClass, SlotOffsetsAndAsserts::s_slotsOffsetDisplacementMapFilterModeClass, ::avmshell::DisplacementMapFilterModeObject, SlotOffsetsAndAsserts::s_slotsOffsetDisplacementMapFilterModeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_utils_Endian, EndianClass, ::avmshell::EndianClass, SlotOffsetsAndAsserts::s_slotsOffsetEndianClass, ::avmshell::EndianObject, SlotOffsetsAndAsserts::s_slotsOffsetEndianObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_EventPhase, EventPhaseClass, ::avmshell::EventPhaseClass, SlotOffsetsAndAsserts::s_slotsOffsetEventPhaseClass, ::avmshell::EventPhaseObject, SlotOffsetsAndAsserts::s_slotsOffsetEventPhaseObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_FileFilter, FileFilterClass, ::avmshell::FileFilterClass, SlotOffsetsAndAsserts::s_slotsOffsetFileFilterClass, ::avmshell::FileFilterObject, SlotOffsetsAndAsserts::s_slotsOffsetFileFilterObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_Font, FontClass, ::avmshell::FontClass, SlotOffsetsAndAsserts::s_slotsOffsetFontClass, ::avmshell::FontObject, SlotOffsetsAndAsserts::s_slotsOffsetFontObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_FontStyle, FontStyleClass, ::avmshell::FontStyleClass, SlotOffsetsAndAsserts::s_slotsOffsetFontStyleClass, ::avmshell::FontStyleObject, SlotOffsetsAndAsserts::s_slotsOffsetFontStyleObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_FontType, FontTypeClass, ::avmshell::FontTypeClass, SlotOffsetsAndAsserts::s_slotsOffsetFontTypeClass, ::avmshell::FontTypeObject, SlotOffsetsAndAsserts::s_slotsOffsetFontTypeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_FrameLabel, FrameLabelClass, ::avmshell::FrameLabelClass, SlotOffsetsAndAsserts::s_slotsOffsetFrameLabelClass, ::avmshell::FrameLabelObject, SlotOffsetsAndAsserts::s_slotsOffsetFrameLabelObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_GradientType, GradientTypeClass, ::avmshell::GradientTypeClass, SlotOffsetsAndAsserts::s_slotsOffsetGradientTypeClass, ::avmshell::GradientTypeObject, SlotOffsetsAndAsserts::s_slotsOffsetGradientTypeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_GridFitType, GridFitTypeClass, ::avmshell::GridFitTypeClass, SlotOffsetsAndAsserts::s_slotsOffsetGridFitTypeClass, ::avmshell::GridFitTypeObject, SlotOffsetsAndAsserts::s_slotsOffsetGridFitTypeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_system_IMEConversionMode, IMEConversionModeClass, ::avmshell::IMEConversionModeClass, SlotOffsetsAndAsserts::s_slotsOffsetIMEConversionModeClass, ::avmshell::IMEConversionModeObject, SlotOffsetsAndAsserts::s_slotsOffsetIMEConversionModeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_InterpolationMethod, InterpolationMethodClass, ::avmshell::InterpolationMethodClass, SlotOffsetsAndAsserts::s_slotsOffsetInterpolationMethodClass, ::avmshell::InterpolationMethodObject, SlotOffsetsAndAsserts::s_slotsOffsetInterpolationMethodObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_JointStyle, JointStyleClass, ::avmshell::JointStyleClass, SlotOffsetsAndAsserts::s_slotsOffsetJointStyleClass, ::avmshell::JointStyleObject, SlotOffsetsAndAsserts::s_slotsOffsetJointStyleObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_ui_Keyboard, KeyboardClass, ::avmshell::KeyboardClass, SlotOffsetsAndAsserts::s_slotsOffsetKeyboardClass, ::avmshell::KeyboardObject, SlotOffsetsAndAsserts::s_slotsOffsetKeyboardObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_ui_KeyLocation, KeyLocationClass, ::avmshell::KeyLocationClass, SlotOffsetsAndAsserts::s_slotsOffsetKeyLocationClass, ::avmshell::KeyLocationObject, SlotOffsetsAndAsserts::s_slotsOffsetKeyLocationObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_LineScaleMode, LineScaleModeClass, ::avmshell::LineScaleModeClass, SlotOffsetsAndAsserts::s_slotsOffsetLineScaleModeClass, ::avmshell::LineScaleModeObject, SlotOffsetsAndAsserts::s_slotsOffsetLineScaleModeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_ui_Mouse, MouseClass, ::avmshell::MouseClass, SlotOffsetsAndAsserts::s_slotsOffsetMouseClass, ::avmshell::MouseObject, SlotOffsetsAndAsserts::s_slotsOffsetMouseObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_ObjectEncoding, ObjectEncodingClass, ::avmshell::ObjectEncodingClass, SlotOffsetsAndAsserts::s_slotsOffsetObjectEncodingClass, ::avmshell::ObjectEncodingObject, SlotOffsetsAndAsserts::s_slotsOffsetObjectEncodingObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_PixelSnapping, PixelSnappingClass, ::avmshell::PixelSnappingClass, SlotOffsetsAndAsserts::s_slotsOffsetPixelSnappingClass, ::avmshell::PixelSnappingObject, SlotOffsetsAndAsserts::s_slotsOffsetPixelSnappingObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_printing_PrintJobOrientation, PrintJobOrientationClass, ::avmshell::PrintJobOrientationClass, SlotOffsetsAndAsserts::s_slotsOffsetPrintJobOrientationClass, ::avmshell::PrintJobOrientationObject, SlotOffsetsAndAsserts::s_slotsOffsetPrintJobOrientationObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_utils_Proxy, ProxyClass, ::avmshell::ProxyClass, SlotOffsetsAndAsserts::s_slotsOffsetProxyClass, ::avmshell::ProxyObject, SlotOffsetsAndAsserts::s_slotsOffsetProxyObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_system_Security, SecurityClass, ::avmshell::SecurityClass, SlotOffsetsAndAsserts::s_slotsOffsetSecurityClass, ::avmshell::SecurityObject, SlotOffsetsAndAsserts::s_slotsOffsetSecurityObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_system_SecurityPanel, SecurityPanelClass, ::avmshell::SecurityPanelClass, SlotOffsetsAndAsserts::s_slotsOffsetSecurityPanelClass, ::avmshell::SecurityPanelObject, SlotOffsetsAndAsserts::s_slotsOffsetSecurityPanelObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_SharedObjectFlushStatus, SharedObjectFlushStatusClass, ::avmshell::SharedObjectFlushStatusClass, SlotOffsetsAndAsserts::s_slotsOffsetSharedObjectFlushStatusClass, ::avmshell::SharedObjectFlushStatusObject, SlotOffsetsAndAsserts::s_slotsOffsetSharedObjectFlushStatusObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_media_SoundMixer, SoundMixerClass, ::avmshell::SoundMixerClass, SlotOffsetsAndAsserts::s_slotsOffsetSoundMixerClass, ::avmshell::SoundMixerObject, SlotOffsetsAndAsserts::s_slotsOffsetSoundMixerObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_SpreadMethod, SpreadMethodClass, ::avmshell::SpreadMethodClass, SlotOffsetsAndAsserts::s_slotsOffsetSpreadMethodClass, ::avmshell::SpreadMethodObject, SlotOffsetsAndAsserts::s_slotsOffsetSpreadMethodObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_StageAlign, StageAlignClass, ::avmshell::StageAlignClass, SlotOffsetsAndAsserts::s_slotsOffsetStageAlignClass, ::avmshell::StageAlignObject, SlotOffsetsAndAsserts::s_slotsOffsetStageAlignObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_StageDisplayState, StageDisplayStateClass, ::avmshell::StageDisplayStateClass, SlotOffsetsAndAsserts::s_slotsOffsetStageDisplayStateClass, ::avmshell::StageDisplayStateObject, SlotOffsetsAndAsserts::s_slotsOffsetStageDisplayStateObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_StageQuality, StageQualityClass, ::avmshell::StageQualityClass, SlotOffsetsAndAsserts::s_slotsOffsetStageQualityClass, ::avmshell::StageQualityObject, SlotOffsetsAndAsserts::s_slotsOffsetStageQualityObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_StageScaleMode, StageScaleModeClass, ::avmshell::StageScaleModeClass, SlotOffsetsAndAsserts::s_slotsOffsetStageScaleModeClass, ::avmshell::StageScaleModeObject, SlotOffsetsAndAsserts::s_slotsOffsetStageScaleModeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_SWFVersion, SWFVersionClass, ::avmshell::SWFVersionClass, SlotOffsetsAndAsserts::s_slotsOffsetSWFVersionClass, ::avmshell::SWFVersionObject, SlotOffsetsAndAsserts::s_slotsOffsetSWFVersionObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_system_System, SystemClass, ::avmshell::SystemClass, SlotOffsetsAndAsserts::s_slotsOffsetSystemClass, ::avmshell::SystemObject, SlotOffsetsAndAsserts::s_slotsOffsetSystemObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_TextColorType, TextColorTypeClass, ::avmshell::TextColorTypeClass, SlotOffsetsAndAsserts::s_slotsOffsetTextColorTypeClass, ::avmshell::TextColorTypeObject, SlotOffsetsAndAsserts::s_slotsOffsetTextColorTypeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_TextDisplayMode, TextDisplayModeClass, ::avmshell::TextDisplayModeClass, SlotOffsetsAndAsserts::s_slotsOffsetTextDisplayModeClass, ::avmshell::TextDisplayModeObject, SlotOffsetsAndAsserts::s_slotsOffsetTextDisplayModeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_TextFieldAutoSize, TextFieldAutoSizeClass, ::avmshell::TextFieldAutoSizeClass, SlotOffsetsAndAsserts::s_slotsOffsetTextFieldAutoSizeClass, ::avmshell::TextFieldAutoSizeObject, SlotOffsetsAndAsserts::s_slotsOffsetTextFieldAutoSizeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_TextFieldType, TextFieldTypeClass, ::avmshell::TextFieldTypeClass, SlotOffsetsAndAsserts::s_slotsOffsetTextFieldTypeClass, ::avmshell::TextFieldTypeObject, SlotOffsetsAndAsserts::s_slotsOffsetTextFieldTypeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_TextFormatAlign, TextFormatAlignClass, ::avmshell::TextFormatAlignClass, SlotOffsetsAndAsserts::s_slotsOffsetTextFormatAlignClass, ::avmshell::TextFormatAlignObject, SlotOffsetsAndAsserts::s_slotsOffsetTextFormatAlignObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_TextLineMetrics, TextLineMetricsClass, ::avmshell::TextLineMetricsClass, SlotOffsetsAndAsserts::s_slotsOffsetTextLineMetricsClass, ::avmshell::TextLineMetricsObject, SlotOffsetsAndAsserts::s_slotsOffsetTextLineMetricsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_TextRenderer, TextRendererClass, ::avmshell::TextRendererClass, SlotOffsetsAndAsserts::s_slotsOffsetTextRendererClass, ::avmshell::TextRendererObject, SlotOffsetsAndAsserts::s_slotsOffsetTextRendererObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_URLLoaderDataFormat, URLLoaderDataFormatClass, ::avmshell::URLLoaderDataFormatClass, SlotOffsetsAndAsserts::s_slotsOffsetURLLoaderDataFormatClass, ::avmshell::URLLoaderDataFormatObject, SlotOffsetsAndAsserts::s_slotsOffsetURLLoaderDataFormatObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_URLRequestHeader, URLRequestHeaderClass, ::avmshell::URLRequestHeaderClass, SlotOffsetsAndAsserts::s_slotsOffsetURLRequestHeaderClass, ::avmshell::URLRequestHeaderObject, SlotOffsetsAndAsserts::s_slotsOffsetURLRequestHeaderObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_URLRequestMethod, URLRequestMethodClass, ::avmshell::URLRequestMethodClass, SlotOffsetsAndAsserts::s_slotsOffsetURLRequestMethodClass, ::avmshell::URLRequestMethodObject, SlotOffsetsAndAsserts::s_slotsOffsetURLRequestMethodObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_URLVariables, URLVariablesClass, ::avmshell::URLVariablesClass, SlotOffsetsAndAsserts::s_slotsOffsetURLVariablesClass, ::avmshell::URLVariablesObject, SlotOffsetsAndAsserts::s_slotsOffsetURLVariablesObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_xml_XMLNode, XMLNodeClass, ::avmshell::XMLNodeClass, SlotOffsetsAndAsserts::s_slotsOffsetXMLNodeClass, ::avmshell::XMLNodeObject, SlotOffsetsAndAsserts::s_slotsOffsetXMLNodeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_xml_XMLNodeType, XMLNodeTypeClass, ::avmshell::XMLNodeTypeClass, SlotOffsetsAndAsserts::s_slotsOffsetXMLNodeTypeClass, ::avmshell::XMLNodeTypeObject, SlotOffsetsAndAsserts::s_slotsOffsetXMLNodeTypeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_adobe_utils_XMLUI, XMLUIClass, ::avmshell::XMLUIClass, SlotOffsetsAndAsserts::s_slotsOffsetXMLUIClass, ::avmshell::XMLUIObject, SlotOffsetsAndAsserts::s_slotsOffsetXMLUIObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_errors_IllegalOperationError, IllegalOperationErrorClass, ::avmshell::IllegalOperationErrorClass, SlotOffsetsAndAsserts::s_slotsOffsetIllegalOperationErrorClass, ::avmshell::IllegalOperationErrorObject, SlotOffsetsAndAsserts::s_slotsOffsetIllegalOperationErrorObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_errors_IOError, IOErrorClass, ::avmshell::IOErrorClass, SlotOffsetsAndAsserts::s_slotsOffsetIOErrorClass, ::avmshell::IOErrorObject, SlotOffsetsAndAsserts::s_slotsOffsetIOErrorObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_errors_MemoryError, MemoryErrorClass, ::avmshell::MemoryErrorClass, SlotOffsetsAndAsserts::s_slotsOffsetMemoryErrorClass, ::avmshell::MemoryErrorObject, SlotOffsetsAndAsserts::s_slotsOffsetMemoryErrorObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_errors_ScriptTimeoutError, ScriptTimeoutErrorClass, ::avmshell::ScriptTimeoutErrorClass, SlotOffsetsAndAsserts::s_slotsOffsetScriptTimeoutErrorClass, ::avmshell::ScriptTimeoutErrorObject, SlotOffsetsAndAsserts::s_slotsOffsetScriptTimeoutErrorObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_errors_StackOverflowError, StackOverflowErrorClass, ::avmshell::StackOverflowErrorClass, SlotOffsetsAndAsserts::s_slotsOffsetStackOverflowErrorClass, ::avmshell::StackOverflowErrorObject, SlotOffsetsAndAsserts::s_slotsOffsetStackOverflowErrorObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_ActivityEvent, ActivityEventClass, ::avmshell::ActivityEventClass, SlotOffsetsAndAsserts::s_slotsOffsetActivityEventClass, ::avmshell::ActivityEventObject, SlotOffsetsAndAsserts::s_slotsOffsetActivityEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_ContextMenuEvent, ContextMenuEventClass, ::avmshell::ContextMenuEventClass, SlotOffsetsAndAsserts::s_slotsOffsetContextMenuEventClass, ::avmshell::ContextMenuEventObject, SlotOffsetsAndAsserts::s_slotsOffsetContextMenuEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_FocusEvent, FocusEventClass, ::avmshell::FocusEventClass, SlotOffsetsAndAsserts::s_slotsOffsetFocusEventClass, ::avmshell::FocusEventObject, SlotOffsetsAndAsserts::s_slotsOffsetFocusEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_HTTPStatusEvent, HTTPStatusEventClass, ::avmshell::HTTPStatusEventClass, SlotOffsetsAndAsserts::s_slotsOffsetHTTPStatusEventClass, ::avmshell::HTTPStatusEventObject, SlotOffsetsAndAsserts::s_slotsOffsetHTTPStatusEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_errors_InvalidSWFError, InvalidSWFErrorClass, ::avmshell::InvalidSWFErrorClass, SlotOffsetsAndAsserts::s_slotsOffsetInvalidSWFErrorClass, ::avmshell::InvalidSWFErrorObject, SlotOffsetsAndAsserts::s_slotsOffsetInvalidSWFErrorObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_KeyboardEvent, KeyboardEventClass, ::avmshell::KeyboardEventClass, SlotOffsetsAndAsserts::s_slotsOffsetKeyboardEventClass, ::avmshell::KeyboardEventObject, SlotOffsetsAndAsserts::s_slotsOffsetKeyboardEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_MouseEvent, MouseEventClass, ::avmshell::MouseEventClass, SlotOffsetsAndAsserts::s_slotsOffsetMouseEventClass, ::avmshell::MouseEventObject, SlotOffsetsAndAsserts::s_slotsOffsetMouseEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_NetStatusEvent, NetStatusEventClass, ::avmshell::NetStatusEventClass, SlotOffsetsAndAsserts::s_slotsOffsetNetStatusEventClass, ::avmshell::NetStatusEventObject, SlotOffsetsAndAsserts::s_slotsOffsetNetStatusEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_ProgressEvent, ProgressEventClass, ::avmshell::ProgressEventClass, SlotOffsetsAndAsserts::s_slotsOffsetProgressEventClass, ::avmshell::ProgressEventObject, SlotOffsetsAndAsserts::s_slotsOffsetProgressEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_StatusEvent, StatusEventClass, ::avmshell::StatusEventClass, SlotOffsetsAndAsserts::s_slotsOffsetStatusEventClass, ::avmshell::StatusEventObject, SlotOffsetsAndAsserts::s_slotsOffsetStatusEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_SyncEvent, SyncEventClass, ::avmshell::SyncEventClass, SlotOffsetsAndAsserts::s_slotsOffsetSyncEventClass, ::avmshell::SyncEventObject, SlotOffsetsAndAsserts::s_slotsOffsetSyncEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_TextEvent, TextEventClass, ::avmshell::TextEventClass, SlotOffsetsAndAsserts::s_slotsOffsetTextEventClass, ::avmshell::TextEventObject, SlotOffsetsAndAsserts::s_slotsOffsetTextEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_TimerEvent, TimerEventClass, ::avmshell::TimerEventClass, SlotOffsetsAndAsserts::s_slotsOffsetTimerEventClass, ::avmshell::TimerEventObject, SlotOffsetsAndAsserts::s_slotsOffsetTimerEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_ui_ContextMenu, ContextMenuClass, ::avmshell::ContextMenuClass, SlotOffsetsAndAsserts::s_slotsOffsetContextMenuClass, ::avmshell::ContextMenuObject, SlotOffsetsAndAsserts::s_slotsOffsetContextMenuObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_DisplayObject, DisplayObjectClass, ::avmshell::DisplayObjectClass, SlotOffsetsAndAsserts::s_slotsOffsetDisplayObjectClass, ::avmshell::DisplayObjectObject, SlotOffsetsAndAsserts::s_slotsOffsetDisplayObjectObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_system_IME, IMEClass, ::avmshell::IMEClass, SlotOffsetsAndAsserts::s_slotsOffsetIMEClass, ::avmshell::IMEObject, SlotOffsetsAndAsserts::s_slotsOffsetIMEObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_NetConnection, NetConnectionClass, ::avmshell::NetConnectionClass, SlotOffsetsAndAsserts::s_slotsOffsetNetConnectionClass, ::avmshell::NetConnectionObject, SlotOffsetsAndAsserts::s_slotsOffsetNetConnectionObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_media_SoundChannel, SoundChannelClass, ::avmshell::SoundChannelClass, SlotOffsetsAndAsserts::s_slotsOffsetSoundChannelClass, ::avmshell::SoundChannelObject, SlotOffsetsAndAsserts::s_slotsOffsetSoundChannelObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_StyleSheet, StyleSheetClass, ::avmshell::StyleSheetClass, SlotOffsetsAndAsserts::s_slotsOffsetStyleSheetClass, ::avmshell::StyleSheetObject, SlotOffsetsAndAsserts::s_slotsOffsetStyleSheetObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_media_Microphone, MicrophoneClass, ::avmshell::MicrophoneClass, SlotOffsetsAndAsserts::s_slotsOffsetMicrophoneClass, ::avmshell::MicrophoneObject, SlotOffsetsAndAsserts::s_slotsOffsetMicrophoneObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_NetStream, NetStreamClass, ::avmshell::NetStreamClass, SlotOffsetsAndAsserts::s_slotsOffsetNetStreamClass, ::avmshell::NetStreamObject, SlotOffsetsAndAsserts::s_slotsOffsetNetStreamObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_media_Camera, CameraClass, ::avmshell::CameraClass, SlotOffsetsAndAsserts::s_slotsOffsetCameraClass, ::avmshell::CameraObject, SlotOffsetsAndAsserts::s_slotsOffsetCameraObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_ui_ContextMenuItem, ContextMenuItemClass, ::avmshell::ContextMenuItemClass, SlotOffsetsAndAsserts::s_slotsOffsetContextMenuItemClass, ::avmshell::ContextMenuItemObject, SlotOffsetsAndAsserts::s_slotsOffsetContextMenuItemObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_FileReference, FileReferenceClass, ::avmshell::FileReferenceClass, SlotOffsetsAndAsserts::s_slotsOffsetFileReferenceClass, ::avmshell::FileReferenceObject, SlotOffsetsAndAsserts::s_slotsOffsetFileReferenceObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_FileReferenceList, FileReferenceListClass, ::avmshell::FileReferenceListClass, SlotOffsetsAndAsserts::s_slotsOffsetFileReferenceListClass, ::avmshell::FileReferenceListObject, SlotOffsetsAndAsserts::s_slotsOffsetFileReferenceListObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_LoaderInfo, LoaderInfoClass, ::avmshell::LoaderInfoClass, SlotOffsetsAndAsserts::s_slotsOffsetLoaderInfoClass, ::avmshell::LoaderInfoObject, SlotOffsetsAndAsserts::s_slotsOffsetLoaderInfoObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_LocalConnection, LocalConnectionClass, ::avmshell::LocalConnectionClass, SlotOffsetsAndAsserts::s_slotsOffsetLocalConnectionClass, ::avmshell::LocalConnectionObject, SlotOffsetsAndAsserts::s_slotsOffsetLocalConnectionObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_printing_PrintJob, PrintJobClass, ::avmshell::PrintJobClass, SlotOffsetsAndAsserts::s_slotsOffsetPrintJobClass, ::avmshell::PrintJobObject, SlotOffsetsAndAsserts::s_slotsOffsetPrintJobObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_SharedObject, SharedObjectClass, ::avmshell::SharedObjectClass, SlotOffsetsAndAsserts::s_slotsOffsetSharedObjectClass, ::avmshell::SharedObjectObject, SlotOffsetsAndAsserts::s_slotsOffsetSharedObjectObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_Socket, SocketClass, ::avmshell::SocketClass, SlotOffsetsAndAsserts::s_slotsOffsetSocketClass, ::avmshell::SocketObject, SlotOffsetsAndAsserts::s_slotsOffsetSocketObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_media_Sound, SoundClass, ::avmshell::SoundClass, SlotOffsetsAndAsserts::s_slotsOffsetSoundClass, ::avmshell::SoundObject, SlotOffsetsAndAsserts::s_slotsOffsetSoundObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_utils_Timer, TimerClass, ::avmshell::TimerClass, SlotOffsetsAndAsserts::s_slotsOffsetTimerClass, ::avmshell::TimerObject, SlotOffsetsAndAsserts::s_slotsOffsetTimerObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_URLLoader, URLLoaderClass, ::avmshell::URLLoaderClass, SlotOffsetsAndAsserts::s_slotsOffsetURLLoaderClass, ::avmshell::URLLoaderObject, SlotOffsetsAndAsserts::s_slotsOffsetURLLoaderObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_URLStream, URLStreamClass, ::avmshell::URLStreamClass, SlotOffsetsAndAsserts::s_slotsOffsetURLStreamClass, ::avmshell::URLStreamObject, SlotOffsetsAndAsserts::s_slotsOffsetURLStreamObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_XMLSocket, XMLSocketClass, ::avmshell::XMLSocketClass, SlotOffsetsAndAsserts::s_slotsOffsetXMLSocketClass, ::avmshell::XMLSocketObject, SlotOffsetsAndAsserts::s_slotsOffsetXMLSocketObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_filters_BlurFilter, BlurFilterClass, ::avmshell::BlurFilterClass, SlotOffsetsAndAsserts::s_slotsOffsetBlurFilterClass, ::avmshell::BlurFilterObject, SlotOffsetsAndAsserts::s_slotsOffsetBlurFilterObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_filters_BevelFilter, BevelFilterClass, ::avmshell::BevelFilterClass, SlotOffsetsAndAsserts::s_slotsOffsetBevelFilterClass, ::avmshell::BevelFilterObject, SlotOffsetsAndAsserts::s_slotsOffsetBevelFilterObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_filters_ColorMatrixFilter, ColorMatrixFilterClass, ::avmshell::ColorMatrixFilterClass, SlotOffsetsAndAsserts::s_slotsOffsetColorMatrixFilterClass, ::avmshell::ColorMatrixFilterObject, SlotOffsetsAndAsserts::s_slotsOffsetColorMatrixFilterObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_filters_ConvolutionFilter, ConvolutionFilterClass, ::avmshell::ConvolutionFilterClass, SlotOffsetsAndAsserts::s_slotsOffsetConvolutionFilterClass, ::avmshell::ConvolutionFilterObject, SlotOffsetsAndAsserts::s_slotsOffsetConvolutionFilterObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_filters_DisplacementMapFilter, DisplacementMapFilterClass, ::avmshell::DisplacementMapFilterClass, SlotOffsetsAndAsserts::s_slotsOffsetDisplacementMapFilterClass, ::avmshell::DisplacementMapFilterObject, SlotOffsetsAndAsserts::s_slotsOffsetDisplacementMapFilterObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_filters_DropShadowFilter, DropShadowFilterClass, ::avmshell::DropShadowFilterClass, SlotOffsetsAndAsserts::s_slotsOffsetDropShadowFilterClass, ::avmshell::DropShadowFilterObject, SlotOffsetsAndAsserts::s_slotsOffsetDropShadowFilterObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_filters_GlowFilter, GlowFilterClass, ::avmshell::GlowFilterClass, SlotOffsetsAndAsserts::s_slotsOffsetGlowFilterClass, ::avmshell::GlowFilterObject, SlotOffsetsAndAsserts::s_slotsOffsetGlowFilterObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_filters_GradientBevelFilter, GradientBevelFilterClass, ::avmshell::GradientBevelFilterClass, SlotOffsetsAndAsserts::s_slotsOffsetGradientBevelFilterClass, ::avmshell::GradientBevelFilterObject, SlotOffsetsAndAsserts::s_slotsOffsetGradientBevelFilterObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_filters_GradientGlowFilter, GradientGlowFilterClass, ::avmshell::GradientGlowFilterClass, SlotOffsetsAndAsserts::s_slotsOffsetGradientGlowFilterClass, ::avmshell::GradientGlowFilterObject, SlotOffsetsAndAsserts::s_slotsOffsetGradientGlowFilterObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_xml_XMLDocument, XMLDocumentClass, ::avmshell::XMLDocumentClass, SlotOffsetsAndAsserts::s_slotsOffsetXMLDocumentClass, ::avmshell::XMLDocumentObject, SlotOffsetsAndAsserts::s_slotsOffsetXMLDocumentObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_errors_EOFError, EOFErrorClass, ::avmshell::EOFErrorClass, SlotOffsetsAndAsserts::s_slotsOffsetEOFErrorClass, ::avmshell::EOFErrorObject, SlotOffsetsAndAsserts::s_slotsOffsetEOFErrorObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_FullScreenEvent, FullScreenEventClass, ::avmshell::FullScreenEventClass, SlotOffsetsAndAsserts::s_slotsOffsetFullScreenEventClass, ::avmshell::FullScreenEventObject, SlotOffsetsAndAsserts::s_slotsOffsetFullScreenEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_DataEvent, DataEventClass, ::avmshell::DataEventClass, SlotOffsetsAndAsserts::s_slotsOffsetDataEventClass, ::avmshell::DataEventObject, SlotOffsetsAndAsserts::s_slotsOffsetDataEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_ErrorEvent, ErrorEventClass, ::avmshell::ErrorEventClass, SlotOffsetsAndAsserts::s_slotsOffsetErrorEventClass, ::avmshell::ErrorEventObject, SlotOffsetsAndAsserts::s_slotsOffsetErrorEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_IMEEvent, IMEEventClass, ::avmshell::IMEEventClass, SlotOffsetsAndAsserts::s_slotsOffsetIMEEventClass, ::avmshell::IMEEventObject, SlotOffsetsAndAsserts::s_slotsOffsetIMEEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_InteractiveObject, InteractiveObjectClass, ::avmshell::InteractiveObjectClass, SlotOffsetsAndAsserts::s_slotsOffsetInteractiveObjectClass, ::avmshell::InteractiveObjectObject, SlotOffsetsAndAsserts::s_slotsOffsetInteractiveObjectObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_AVM1Movie, AVM1MovieClass, ::avmshell::AVM1MovieClass, SlotOffsetsAndAsserts::s_slotsOffsetAVM1MovieClass, ::avmshell::AVM1MovieObject, SlotOffsetsAndAsserts::s_slotsOffsetAVM1MovieObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_Bitmap, BitmapClass, ::avmshell::BitmapClass, SlotOffsetsAndAsserts::s_slotsOffsetBitmapClass, ::avmshell::BitmapObject, SlotOffsetsAndAsserts::s_slotsOffsetBitmapObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_MorphShape, MorphShapeClass, ::avmshell::MorphShapeClass, SlotOffsetsAndAsserts::s_slotsOffsetMorphShapeClass, ::avmshell::MorphShapeObject, SlotOffsetsAndAsserts::s_slotsOffsetMorphShapeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_Shape, ShapeClass, ::avmshell::ShapeClass, SlotOffsetsAndAsserts::s_slotsOffsetShapeClass, ::avmshell::ShapeObject, SlotOffsetsAndAsserts::s_slotsOffsetShapeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_StaticText, StaticTextClass, ::avmshell::StaticTextClass, SlotOffsetsAndAsserts::s_slotsOffsetStaticTextClass, ::avmshell::StaticTextObject, SlotOffsetsAndAsserts::s_slotsOffsetStaticTextObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_media_Video, VideoClass, ::avmshell::VideoClass, SlotOffsetsAndAsserts::s_slotsOffsetVideoClass, ::avmshell::VideoObject, SlotOffsetsAndAsserts::s_slotsOffsetVideoObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_AsyncErrorEvent, AsyncErrorEventClass, ::avmshell::AsyncErrorEventClass, SlotOffsetsAndAsserts::s_slotsOffsetAsyncErrorEventClass, ::avmshell::AsyncErrorEventObject, SlotOffsetsAndAsserts::s_slotsOffsetAsyncErrorEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_IOErrorEvent, IOErrorEventClass, ::avmshell::IOErrorEventClass, SlotOffsetsAndAsserts::s_slotsOffsetIOErrorEventClass, ::avmshell::IOErrorEventObject, SlotOffsetsAndAsserts::s_slotsOffsetIOErrorEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_SecurityErrorEvent, SecurityErrorEventClass, ::avmshell::SecurityErrorEventClass, SlotOffsetsAndAsserts::s_slotsOffsetSecurityErrorEventClass, ::avmshell::SecurityErrorEventObject, SlotOffsetsAndAsserts::s_slotsOffsetSecurityErrorEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_DisplayObjectContainer, DisplayObjectContainerClass, ::avmshell::DisplayObjectContainerClass, SlotOffsetsAndAsserts::s_slotsOffsetDisplayObjectContainerClass, ::avmshell::DisplayObjectContainerObject, SlotOffsetsAndAsserts::s_slotsOffsetDisplayObjectContainerObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_SimpleButton, SimpleButtonClass, ::avmshell::SimpleButtonClass, SlotOffsetsAndAsserts::s_slotsOffsetSimpleButtonClass, ::avmshell::SimpleButtonObject, SlotOffsetsAndAsserts::s_slotsOffsetSimpleButtonObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_TextField, TextFieldClass, ::avmshell::TextFieldClass, SlotOffsetsAndAsserts::s_slotsOffsetTextFieldClass, ::avmshell::TextFieldObject, SlotOffsetsAndAsserts::s_slotsOffsetTextFieldObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_Loader, LoaderClass, ::avmshell::LoaderClass, SlotOffsetsAndAsserts::s_slotsOffsetLoaderClass, ::avmshell::LoaderObject, SlotOffsetsAndAsserts::s_slotsOffsetLoaderObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_Sprite, SpriteClass, ::avmshell::SpriteClass, SlotOffsetsAndAsserts::s_slotsOffsetSpriteClass, ::avmshell::SpriteObject, SlotOffsetsAndAsserts::s_slotsOffsetSpriteObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_Stage, StageClass, ::avmshell::StageClass, SlotOffsetsAndAsserts::s_slotsOffsetStageClass, ::avmshell::StageObject, SlotOffsetsAndAsserts::s_slotsOffsetStageObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_MovieClip, MovieClipClass, ::avmshell::MovieClipClass, SlotOffsetsAndAsserts::s_slotsOffsetMovieClipClass, ::avmshell::MovieClipObject, SlotOffsetsAndAsserts::s_slotsOffsetMovieClipObject)
		////////////////////////////////////////////////////////////////////
		// Private
		//AVMTHUNK_NATIVE_CLASS(abcclass_avmplus_Domain, DomainClass, ::avmshell::DomainClass, SlotOffsetsAndAsserts::s_slotsOffsetDomainClass, ::avmshell::DomainObject, SlotOffsetsAndAsserts::s_slotsOffsetDomainObject)
		////////////////////////////////////////////////////////////////////
		// JavaScript
		//Delete JavaScript for BUGS
		//AVMTHUNK_NATIVE_CLASS(abcclass_Window, WindowClass, ::avmshell::WindowClass, SlotOffsetsAndAsserts::s_slotsOffsetWindowClass, ::avmshell::DomainObject, SlotOffsetsAndAsserts::s_slotsOffsetWindowObject)
		//AVMTHUNK_NATIVE_CLASS(abcclass_Location, LocationClass, ::avmshell::LocationClass, SlotOffsetsAndAsserts::s_slotsOffsetLocationClass, ::avmshell::DomainObject, SlotOffsetsAndAsserts::s_slotsOffsetLocationObject)
		//AVMTHUNK_NATIVE_CLASS(abcclass_Navigator, NavigatorClass, ::avmshell::NavigatorClass, SlotOffsetsAndAsserts::s_slotsOffsetNavigatorClass, ::avmshell::DomainObject, SlotOffsetsAndAsserts::s_slotsOffsetNavigatorObject)


		AVMTHUNK_NATIVE_CLASS(abcclass_flash_accessibility_AccessibilityImplementation, AccessibilityImplementationClass, ::avmshell::AccessibilityImplementationClass, SlotOffsetsAndAsserts::s_slotsOffsetAccessibilityImplementationClass, ::avmshell::AccessibilityImplementationObject, SlotOffsetsAndAsserts::s_slotsOffsetAccessibilityImplementationObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_ColorCorrection, ColorCorrectionClass, ::avmshell::ColorCorrectionClass, SlotOffsetsAndAsserts::s_slotsOffsetColorCorrectionClass, ::avmshell::ColorCorrectionObject, SlotOffsetsAndAsserts::s_slotsOffsetColorCorrectionObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_ColorCorrectionSupport, ColorCorrectionSupportClass, ::avmshell::ColorCorrectionSupportClass, SlotOffsetsAndAsserts::s_slotsOffsetColorCorrectionSupportClass, ::avmshell::ColorCorrectionSupportObject, SlotOffsetsAndAsserts::s_slotsOffsetColorCorrectionSupportObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_FocusDirection, FocusDirectionClass, ::avmshell::FocusDirectionClass, SlotOffsetsAndAsserts::s_slotsOffsetFocusDirectionClass, ::avmshell::FocusDirectionObject, SlotOffsetsAndAsserts::s_slotsOffsetFocusDirectionObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_GraphicsBitmapFill, GraphicsBitmapFillClass, ::avmshell::GraphicsBitmapFillClass, SlotOffsetsAndAsserts::s_slotsOffsetGraphicsBitmapFillClass, ::avmshell::GraphicsBitmapFillObject, SlotOffsetsAndAsserts::s_slotsOffsetGraphicsBitmapFillObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_GraphicsEndFill, GraphicsEndFillClass, ::avmshell::GraphicsEndFillClass, SlotOffsetsAndAsserts::s_slotsOffsetGraphicsEndFillClass, ::avmshell::GraphicsEndFillObject, SlotOffsetsAndAsserts::s_slotsOffsetGraphicsEndFillObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_GraphicsGradientFill, GraphicsGradientFillClass, ::avmshell::GraphicsGradientFillClass, SlotOffsetsAndAsserts::s_slotsOffsetGraphicsGradientFillClass, ::avmshell::GraphicsGradientFillObject, SlotOffsetsAndAsserts::s_slotsOffsetGraphicsGradientFillObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_GraphicsPath, GraphicsPathClass, ::avmshell::GraphicsPathClass, SlotOffsetsAndAsserts::s_slotsOffsetGraphicsPathClass, ::avmshell::GraphicsPathObject, SlotOffsetsAndAsserts::s_slotsOffsetGraphicsPathObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_GraphicsPathCommand, GraphicsPathCommandClass, ::avmshell::GraphicsPathCommandClass, SlotOffsetsAndAsserts::s_slotsOffsetGraphicsPathCommandClass, ::avmshell::GraphicsPathCommandObject, SlotOffsetsAndAsserts::s_slotsOffsetGraphicsPathCommandObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_GraphicsPathWinding, GraphicsPathWindingClass, ::avmshell::GraphicsPathWindingClass, SlotOffsetsAndAsserts::s_slotsOffsetGraphicsPathWindingClass, ::avmshell::GraphicsPathWindingObject, SlotOffsetsAndAsserts::s_slotsOffsetGraphicsPathWindingObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_GraphicsShaderFill, GraphicsShaderFillClass, ::avmshell::GraphicsShaderFillClass, SlotOffsetsAndAsserts::s_slotsOffsetGraphicsShaderFillClass, ::avmshell::GraphicsShaderFillObject, SlotOffsetsAndAsserts::s_slotsOffsetGraphicsShaderFillObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_GraphicsSolidFill, GraphicsSolidFillClass, ::avmshell::GraphicsSolidFillClass, SlotOffsetsAndAsserts::s_slotsOffsetGraphicsSolidFillClass, ::avmshell::GraphicsSolidFillObject, SlotOffsetsAndAsserts::s_slotsOffsetGraphicsSolidFillObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_GraphicsStroke, GraphicsStrokeClass, ::avmshell::GraphicsStrokeClass, SlotOffsetsAndAsserts::s_slotsOffsetGraphicsStrokeClass, ::avmshell::GraphicsStrokeObject, SlotOffsetsAndAsserts::s_slotsOffsetGraphicsStrokeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_GraphicsTrianglePath, GraphicsTrianglePathClass, ::avmshell::GraphicsTrianglePathClass, SlotOffsetsAndAsserts::s_slotsOffsetGraphicsTrianglePathClass, ::avmshell::GraphicsTrianglePathObject, SlotOffsetsAndAsserts::s_slotsOffsetGraphicsTrianglePathObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_NativeMenu, NativeMenuClass, ::avmshell::NativeMenuClass, SlotOffsetsAndAsserts::s_slotsOffsetNativeMenuClass, ::avmshell::NativeMenuObject, SlotOffsetsAndAsserts::s_slotsOffsetNativeMenuObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_NativeMenuItem, NativeMenuItemClass, ::avmshell::NativeMenuItemClass, SlotOffsetsAndAsserts::s_slotsOffsetNativeMenuItemClass, ::avmshell::NativeMenuItemObject, SlotOffsetsAndAsserts::s_slotsOffsetNativeMenuItemObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_NativeWindow, NativeWindowClass, ::avmshell::NativeWindowClass, SlotOffsetsAndAsserts::s_slotsOffsetNativeWindowClass, ::avmshell::NativeWindowObject, SlotOffsetsAndAsserts::s_slotsOffsetNativeWindowObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_NativeWindowDisplayState, NativeWindowDisplayStateClass, ::avmshell::NativeWindowDisplayStateClass, SlotOffsetsAndAsserts::s_slotsOffsetNativeWindowDisplayStateClass, ::avmshell::NativeWindowDisplayStateObject, SlotOffsetsAndAsserts::s_slotsOffsetNativeWindowDisplayStateObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_NativeWindowInitOptions, NativeWindowInitOptionsClass, ::avmshell::NativeWindowInitOptionsClass, SlotOffsetsAndAsserts::s_slotsOffsetNativeWindowInitOptionsClass, ::avmshell::NativeWindowInitOptionsObject, SlotOffsetsAndAsserts::s_slotsOffsetNativeWindowInitOptionsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_NativeWindowResize, NativeWindowResizeClass, ::avmshell::NativeWindowResizeClass, SlotOffsetsAndAsserts::s_slotsOffsetNativeWindowResizeClass, ::avmshell::NativeWindowResizeObject, SlotOffsetsAndAsserts::s_slotsOffsetNativeWindowResizeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_NativeWindowSystemChrome, NativeWindowSystemChromeClass, ::avmshell::NativeWindowSystemChromeClass, SlotOffsetsAndAsserts::s_slotsOffsetNativeWindowSystemChromeClass, ::avmshell::NativeWindowSystemChromeObject, SlotOffsetsAndAsserts::s_slotsOffsetNativeWindowSystemChromeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_NativeWindowType, NativeWindowTypeClass, ::avmshell::NativeWindowTypeClass, SlotOffsetsAndAsserts::s_slotsOffsetNativeWindowTypeClass, ::avmshell::NativeWindowTypeObject, SlotOffsetsAndAsserts::s_slotsOffsetNativeWindowTypeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_Screen, ScreenClass, ::avmshell::ScreenClass, SlotOffsetsAndAsserts::s_slotsOffsetScreenClass, ::avmshell::ScreenObject, SlotOffsetsAndAsserts::s_slotsOffsetScreenObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_Shader, ShaderClass, ::avmshell::ShaderClass, SlotOffsetsAndAsserts::s_slotsOffsetShaderClass, ::avmshell::ShaderObject, SlotOffsetsAndAsserts::s_slotsOffsetShaderObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_ShaderData, ShaderDataClass, ::avmshell::ShaderDataClass, SlotOffsetsAndAsserts::s_slotsOffsetShaderDataClass, ::avmshell::ShaderDataObject, SlotOffsetsAndAsserts::s_slotsOffsetShaderDataObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_ShaderInput, ShaderInputClass, ::avmshell::ShaderInputClass, SlotOffsetsAndAsserts::s_slotsOffsetShaderInputClass, ::avmshell::ShaderInputObject, SlotOffsetsAndAsserts::s_slotsOffsetShaderInputObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_ShaderJob, ShaderJobClass, ::avmshell::ShaderJobClass, SlotOffsetsAndAsserts::s_slotsOffsetShaderJobClass, ::avmshell::ShaderJobObject, SlotOffsetsAndAsserts::s_slotsOffsetShaderJobObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_ShaderParameter, ShaderParameterClass, ::avmshell::ShaderParameterClass, SlotOffsetsAndAsserts::s_slotsOffsetShaderParameterClass, ::avmshell::ShaderParameterObject, SlotOffsetsAndAsserts::s_slotsOffsetShaderParameterObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_ShaderParameterType, ShaderParameterTypeClass, ::avmshell::ShaderParameterTypeClass, SlotOffsetsAndAsserts::s_slotsOffsetShaderParameterTypeClass, ::avmshell::ShaderParameterTypeObject, SlotOffsetsAndAsserts::s_slotsOffsetShaderParameterTypeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_ShaderPrecision, ShaderPrecisionClass, ::avmshell::ShaderPrecisionClass, SlotOffsetsAndAsserts::s_slotsOffsetShaderPrecisionClass, ::avmshell::ShaderPrecisionObject, SlotOffsetsAndAsserts::s_slotsOffsetShaderPrecisionObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_StageAspectRatio, StageAspectRatioClass, ::avmshell::StageAspectRatioClass, SlotOffsetsAndAsserts::s_slotsOffsetStageAspectRatioClass, ::avmshell::StageAspectRatioObject, SlotOffsetsAndAsserts::s_slotsOffsetStageAspectRatioObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_StageOrientation, StageOrientationClass, ::avmshell::StageOrientationClass, SlotOffsetsAndAsserts::s_slotsOffsetStageOrientationClass, ::avmshell::StageOrientationObject, SlotOffsetsAndAsserts::s_slotsOffsetStageOrientationObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_TriangleCulling, TriangleCullingClass, ::avmshell::TriangleCullingClass, SlotOffsetsAndAsserts::s_slotsOffsetTriangleCullingClass, ::avmshell::TriangleCullingObject, SlotOffsetsAndAsserts::s_slotsOffsetTriangleCullingObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_errors_DRMManagerError, DRMManagerErrorClass, ::avmshell::DRMManagerErrorClass, SlotOffsetsAndAsserts::s_slotsOffsetDRMManagerErrorClass, ::avmshell::DRMManagerErrorObject, SlotOffsetsAndAsserts::s_slotsOffsetDRMManagerErrorObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_errors_SQLError, SQLErrorClass, ::avmshell::SQLErrorClass, SlotOffsetsAndAsserts::s_slotsOffsetSQLErrorClass, ::avmshell::SQLErrorObject, SlotOffsetsAndAsserts::s_slotsOffsetSQLErrorObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_errors_SQLErrorOperation, SQLErrorOperationClass, ::avmshell::SQLErrorOperationClass, SlotOffsetsAndAsserts::s_slotsOffsetSQLErrorOperationClass, ::avmshell::SQLErrorOperationObject, SlotOffsetsAndAsserts::s_slotsOffsetSQLErrorOperationObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_AccelerometerEvent, AccelerometerEventClass, ::avmshell::AccelerometerEventClass, SlotOffsetsAndAsserts::s_slotsOffsetAccelerometerEventClass, ::avmshell::AccelerometerEventObject, SlotOffsetsAndAsserts::s_slotsOffsetAccelerometerEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_BrowserInvokeEvent, BrowserInvokeEventClass, ::avmshell::BrowserInvokeEventClass, SlotOffsetsAndAsserts::s_slotsOffsetBrowserInvokeEventClass, ::avmshell::BrowserInvokeEventObject, SlotOffsetsAndAsserts::s_slotsOffsetBrowserInvokeEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_DatagramSocketDataEvent, DatagramSocketDataEventClass, ::avmshell::DatagramSocketDataEventClass, SlotOffsetsAndAsserts::s_slotsOffsetDatagramSocketDataEventClass, ::avmshell::DatagramSocketDataEventObject, SlotOffsetsAndAsserts::s_slotsOffsetDatagramSocketDataEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_DNSResolverEvent, DNSResolverEventClass, ::avmshell::DNSResolverEventClass, SlotOffsetsAndAsserts::s_slotsOffsetDNSResolverEventClass, ::avmshell::DNSResolverEventObject, SlotOffsetsAndAsserts::s_slotsOffsetDNSResolverEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_DRMAuthenticateEvent, DRMAuthenticateEventClass, ::avmshell::DRMAuthenticateEventClass, SlotOffsetsAndAsserts::s_slotsOffsetDRMAuthenticateEventClass, ::avmshell::DRMAuthenticateEventObject, SlotOffsetsAndAsserts::s_slotsOffsetDRMAuthenticateEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_DRMAuthenticationCompleteEvent, DRMAuthenticationCompleteEventClass, ::avmshell::DRMAuthenticationCompleteEventClass, SlotOffsetsAndAsserts::s_slotsOffsetDRMAuthenticationCompleteEventClass, ::avmshell::DRMAuthenticationCompleteEventObject, SlotOffsetsAndAsserts::s_slotsOffsetDRMAuthenticationCompleteEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_DRMAuthenticationErrorEvent, DRMAuthenticationErrorEventClass, ::avmshell::DRMAuthenticationErrorEventClass, SlotOffsetsAndAsserts::s_slotsOffsetDRMAuthenticationErrorEventClass, ::avmshell::DRMAuthenticationErrorEventObject, SlotOffsetsAndAsserts::s_slotsOffsetDRMAuthenticationErrorEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_DRMErrorEvent, DRMErrorEventClass, ::avmshell::DRMErrorEventClass, SlotOffsetsAndAsserts::s_slotsOffsetDRMErrorEventClass, ::avmshell::DRMErrorEventObject, SlotOffsetsAndAsserts::s_slotsOffsetDRMErrorEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_DRMStatusEvent, DRMStatusEventClass, ::avmshell::DRMStatusEventClass, SlotOffsetsAndAsserts::s_slotsOffsetDRMStatusEventClass, ::avmshell::DRMStatusEventObject, SlotOffsetsAndAsserts::s_slotsOffsetDRMStatusEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_FileListEvent, FileListEventClass, ::avmshell::FileListEventClass, SlotOffsetsAndAsserts::s_slotsOffsetFileListEventClass, ::avmshell::FileListEventObject, SlotOffsetsAndAsserts::s_slotsOffsetFileListEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_GeolocationEvent, GeolocationEventClass, ::avmshell::GeolocationEventClass, SlotOffsetsAndAsserts::s_slotsOffsetGeolocationEventClass, ::avmshell::GeolocationEventObject, SlotOffsetsAndAsserts::s_slotsOffsetGeolocationEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_GestureEvent, GestureEventClass, ::avmshell::GestureEventClass, SlotOffsetsAndAsserts::s_slotsOffsetGestureEventClass, ::avmshell::GestureEventObject, SlotOffsetsAndAsserts::s_slotsOffsetGestureEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_GesturePhase, GesturePhaseClass, ::avmshell::GesturePhaseClass, SlotOffsetsAndAsserts::s_slotsOffsetGesturePhaseClass, ::avmshell::GesturePhaseObject, SlotOffsetsAndAsserts::s_slotsOffsetGesturePhaseObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_HTMLUncaughtScriptExceptionEvent, HTMLUncaughtScriptExceptionEventClass, ::avmshell::HTMLUncaughtScriptExceptionEventClass, SlotOffsetsAndAsserts::s_slotsOffsetHTMLUncaughtScriptExceptionEventClass, ::avmshell::HTMLUncaughtScriptExceptionEventObject, SlotOffsetsAndAsserts::s_slotsOffsetHTMLUncaughtScriptExceptionEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_InvokeEvent, InvokeEventClass, ::avmshell::InvokeEventClass, SlotOffsetsAndAsserts::s_slotsOffsetInvokeEventClass, ::avmshell::InvokeEventObject, SlotOffsetsAndAsserts::s_slotsOffsetInvokeEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_LocationChangeEvent, LocationChangeEventClass, ::avmshell::LocationChangeEventClass, SlotOffsetsAndAsserts::s_slotsOffsetLocationChangeEventClass, ::avmshell::LocationChangeEventObject, SlotOffsetsAndAsserts::s_slotsOffsetLocationChangeEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_MediaEvent, MediaEventClass, ::avmshell::MediaEventClass, SlotOffsetsAndAsserts::s_slotsOffsetMediaEventClass, ::avmshell::MediaEventObject, SlotOffsetsAndAsserts::s_slotsOffsetMediaEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_NativeDragEvent, NativeDragEventClass, ::avmshell::NativeDragEventClass, SlotOffsetsAndAsserts::s_slotsOffsetNativeDragEventClass, ::avmshell::NativeDragEventObject, SlotOffsetsAndAsserts::s_slotsOffsetNativeDragEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_NativeProcessExitEvent, NativeProcessExitEventClass, ::avmshell::NativeProcessExitEventClass, SlotOffsetsAndAsserts::s_slotsOffsetNativeProcessExitEventClass, ::avmshell::NativeProcessExitEventObject, SlotOffsetsAndAsserts::s_slotsOffsetNativeProcessExitEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_NativeWindowBoundsEvent, NativeWindowBoundsEventClass, ::avmshell::NativeWindowBoundsEventClass, SlotOffsetsAndAsserts::s_slotsOffsetNativeWindowBoundsEventClass, ::avmshell::NativeWindowBoundsEventObject, SlotOffsetsAndAsserts::s_slotsOffsetNativeWindowBoundsEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_NativeWindowDisplayStateEvent, NativeWindowDisplayStateEventClass, ::avmshell::NativeWindowDisplayStateEventClass, SlotOffsetsAndAsserts::s_slotsOffsetNativeWindowDisplayStateEventClass, ::avmshell::NativeWindowDisplayStateEventObject, SlotOffsetsAndAsserts::s_slotsOffsetNativeWindowDisplayStateEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_NetDataEvent, NetDataEventClass, ::avmshell::NetDataEventClass, SlotOffsetsAndAsserts::s_slotsOffsetNetDataEventClass, ::avmshell::NetDataEventObject, SlotOffsetsAndAsserts::s_slotsOffsetNetDataEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_NetMonitorEvent, NetMonitorEventClass, ::avmshell::NetMonitorEventClass, SlotOffsetsAndAsserts::s_slotsOffsetNetMonitorEventClass, ::avmshell::NetMonitorEventObject, SlotOffsetsAndAsserts::s_slotsOffsetNetMonitorEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_OutputProgressEvent, OutputProgressEventClass, ::avmshell::OutputProgressEventClass, SlotOffsetsAndAsserts::s_slotsOffsetOutputProgressEventClass, ::avmshell::OutputProgressEventObject, SlotOffsetsAndAsserts::s_slotsOffsetOutputProgressEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_PressAndTapGestureEvent, PressAndTapGestureEventClass, ::avmshell::PressAndTapGestureEventClass, SlotOffsetsAndAsserts::s_slotsOffsetPressAndTapGestureEventClass, ::avmshell::PressAndTapGestureEventObject, SlotOffsetsAndAsserts::s_slotsOffsetPressAndTapGestureEventObject)
//		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_SampleDataEvent, SampleDataEventClass, ::avmshell::SampleDataEventClass, SlotOffsetsAndAsserts::s_slotsOffsetSampleDataEventClass, ::avmshell::SampleDataEventObject, SlotOffsetsAndAsserts::s_slotsOffsetSampleDataEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_ScreenMouseEvent, ScreenMouseEventClass, ::avmshell::ScreenMouseEventClass, SlotOffsetsAndAsserts::s_slotsOffsetScreenMouseEventClass, ::avmshell::ScreenMouseEventObject, SlotOffsetsAndAsserts::s_slotsOffsetScreenMouseEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_ServerSocketConnectEvent, ServerSocketConnectEventClass, ::avmshell::ServerSocketConnectEventClass, SlotOffsetsAndAsserts::s_slotsOffsetServerSocketConnectEventClass, ::avmshell::ServerSocketConnectEventObject, SlotOffsetsAndAsserts::s_slotsOffsetServerSocketConnectEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_ShaderEvent, ShaderEventClass, ::avmshell::ShaderEventClass, SlotOffsetsAndAsserts::s_slotsOffsetShaderEventClass, ::avmshell::ShaderEventObject, SlotOffsetsAndAsserts::s_slotsOffsetShaderEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_SoftKeyboardEvent, SoftKeyboardEventClass, ::avmshell::SoftKeyboardEventClass, SlotOffsetsAndAsserts::s_slotsOffsetSoftKeyboardEventClass, ::avmshell::SoftKeyboardEventObject, SlotOffsetsAndAsserts::s_slotsOffsetSoftKeyboardEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_SoftKeyboardTrigger, SoftKeyboardTriggerClass, ::avmshell::SoftKeyboardTriggerClass, SlotOffsetsAndAsserts::s_slotsOffsetSoftKeyboardTriggerClass, ::avmshell::SoftKeyboardTriggerObject, SlotOffsetsAndAsserts::s_slotsOffsetSoftKeyboardTriggerObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_SQLErrorEvent, SQLErrorEventClass, ::avmshell::SQLErrorEventClass, SlotOffsetsAndAsserts::s_slotsOffsetSQLErrorEventClass, ::avmshell::SQLErrorEventObject, SlotOffsetsAndAsserts::s_slotsOffsetSQLErrorEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_SQLEvent, SQLEventClass, ::avmshell::SQLEventClass, SlotOffsetsAndAsserts::s_slotsOffsetSQLEventClass, ::avmshell::SQLEventObject, SlotOffsetsAndAsserts::s_slotsOffsetSQLEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_SQLUpdateEvent, SQLUpdateEventClass, ::avmshell::SQLUpdateEventClass, SlotOffsetsAndAsserts::s_slotsOffsetSQLUpdateEventClass, ::avmshell::SQLUpdateEventObject, SlotOffsetsAndAsserts::s_slotsOffsetSQLUpdateEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_StageOrientationEvent, StageOrientationEventClass, ::avmshell::StageOrientationEventClass, SlotOffsetsAndAsserts::s_slotsOffsetStageOrientationEventClass, ::avmshell::StageOrientationEventObject, SlotOffsetsAndAsserts::s_slotsOffsetStageOrientationEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_StageVideoAvailabilityEvent, StageVideoAvailabilityEventClass, ::avmshell::StageVideoAvailabilityEventClass, SlotOffsetsAndAsserts::s_slotsOffsetStageVideoAvailabilityEventClass, ::avmshell::StageVideoAvailabilityEventObject, SlotOffsetsAndAsserts::s_slotsOffsetStageVideoAvailabilityEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_StageVideoEvent, StageVideoEventClass, ::avmshell::StageVideoEventClass, SlotOffsetsAndAsserts::s_slotsOffsetStageVideoEventClass, ::avmshell::StageVideoEventObject, SlotOffsetsAndAsserts::s_slotsOffsetStageVideoEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_StorageVolumeChangeEvent, StorageVolumeChangeEventClass, ::avmshell::StorageVolumeChangeEventClass, SlotOffsetsAndAsserts::s_slotsOffsetStorageVolumeChangeEventClass, ::avmshell::StorageVolumeChangeEventObject, SlotOffsetsAndAsserts::s_slotsOffsetStorageVolumeChangeEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_TouchEvent, TouchEventClass, ::avmshell::TouchEventClass, SlotOffsetsAndAsserts::s_slotsOffsetTouchEventClass, ::avmshell::TouchEventObject, SlotOffsetsAndAsserts::s_slotsOffsetTouchEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_TransformGestureEvent, TransformGestureEventClass, ::avmshell::TransformGestureEventClass, SlotOffsetsAndAsserts::s_slotsOffsetTransformGestureEventClass, ::avmshell::TransformGestureEventObject, SlotOffsetsAndAsserts::s_slotsOffsetTransformGestureEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_UncaughtErrorEvent, UncaughtErrorEventClass, ::avmshell::UncaughtErrorEventClass, SlotOffsetsAndAsserts::s_slotsOffsetUncaughtErrorEventClass, ::avmshell::UncaughtErrorEventObject, SlotOffsetsAndAsserts::s_slotsOffsetUncaughtErrorEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_UncaughtErrorEvents, UncaughtErrorEventsClass, ::avmshell::UncaughtErrorEventsClass, SlotOffsetsAndAsserts::s_slotsOffsetUncaughtErrorEventsClass, ::avmshell::UncaughtErrorEventsObject, SlotOffsetsAndAsserts::s_slotsOffsetUncaughtErrorEventsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_VideoEvent, VideoEventClass, ::avmshell::VideoEventClass, SlotOffsetsAndAsserts::s_slotsOffsetVideoEventClass, ::avmshell::VideoEventObject, SlotOffsetsAndAsserts::s_slotsOffsetVideoEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_external_ExtensionContext, ExtensionContextClass, ::avmshell::ExtensionContextClass, SlotOffsetsAndAsserts::s_slotsOffsetExtensionContextClass, ::avmshell::ExtensionContextObject, SlotOffsetsAndAsserts::s_slotsOffsetExtensionContextObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_filters_ShaderFilter, ShaderFilterClass, ::avmshell::ShaderFilterClass, SlotOffsetsAndAsserts::s_slotsOffsetShaderFilterClass, ::avmshell::ShaderFilterObject, SlotOffsetsAndAsserts::s_slotsOffsetShaderFilterObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_geom_Matrix3D, Matrix3DClass, ::avmshell::Matrix3DClass, SlotOffsetsAndAsserts::s_slotsOffsetMatrix3DClass, ::avmshell::Matrix3DObject, SlotOffsetsAndAsserts::s_slotsOffsetMatrix3DObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_geom_Orientation3D, Orientation3DClass, ::avmshell::Orientation3DClass, SlotOffsetsAndAsserts::s_slotsOffsetOrientation3DClass, ::avmshell::Orientation3DObject, SlotOffsetsAndAsserts::s_slotsOffsetOrientation3DObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_geom_PerspectiveProjection, PerspectiveProjectionClass, ::avmshell::PerspectiveProjectionClass, SlotOffsetsAndAsserts::s_slotsOffsetPerspectiveProjectionClass, ::avmshell::PerspectiveProjectionObject, SlotOffsetsAndAsserts::s_slotsOffsetPerspectiveProjectionObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_geom_Utils3D, Utils3DClass, ::avmshell::Utils3DClass, SlotOffsetsAndAsserts::s_slotsOffsetUtils3DClass, ::avmshell::Utils3DObject, SlotOffsetsAndAsserts::s_slotsOffsetUtils3DObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_geom_Vector3D, Vector3DClass, ::avmshell::Vector3DClass, SlotOffsetsAndAsserts::s_slotsOffsetVector3DClass, ::avmshell::Vector3DObject, SlotOffsetsAndAsserts::s_slotsOffsetVector3DObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_media_CameraRoll, CameraRollClass, ::avmshell::CameraRollClass, SlotOffsetsAndAsserts::s_slotsOffsetCameraRollClass, ::avmshell::CameraRollObject, SlotOffsetsAndAsserts::s_slotsOffsetCameraRollObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_media_CameraUI, CameraUIClass, ::avmshell::CameraUIClass, SlotOffsetsAndAsserts::s_slotsOffsetCameraUIClass, ::avmshell::CameraUIObject, SlotOffsetsAndAsserts::s_slotsOffsetCameraUIObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_media_MediaPromise, MediaPromiseClass, ::avmshell::MediaPromiseClass, SlotOffsetsAndAsserts::s_slotsOffsetMediaPromiseClass, ::avmshell::MediaPromiseObject, SlotOffsetsAndAsserts::s_slotsOffsetMediaPromiseObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_media_MediaType, MediaTypeClass, ::avmshell::MediaTypeClass, SlotOffsetsAndAsserts::s_slotsOffsetMediaTypeClass, ::avmshell::MediaTypeObject, SlotOffsetsAndAsserts::s_slotsOffsetMediaTypeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_media_MicrophoneEnhancedMode, MicrophoneEnhancedModeClass, ::avmshell::MicrophoneEnhancedModeClass, SlotOffsetsAndAsserts::s_slotsOffsetMicrophoneEnhancedModeClass, ::avmshell::MicrophoneEnhancedModeObject, SlotOffsetsAndAsserts::s_slotsOffsetMicrophoneEnhancedModeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_media_MicrophoneEnhancedOptions, MicrophoneEnhancedOptionsClass, ::avmshell::MicrophoneEnhancedOptionsClass, SlotOffsetsAndAsserts::s_slotsOffsetMicrophoneEnhancedOptionsClass, ::avmshell::MicrophoneEnhancedOptionsObject, SlotOffsetsAndAsserts::s_slotsOffsetMicrophoneEnhancedOptionsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_media_SoundCodec, SoundCodecClass, ::avmshell::SoundCodecClass, SlotOffsetsAndAsserts::s_slotsOffsetSoundCodecClass, ::avmshell::SoundCodecObject, SlotOffsetsAndAsserts::s_slotsOffsetSoundCodecObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_media_StageVideo, StageVideoClass, ::avmshell::StageVideoClass, SlotOffsetsAndAsserts::s_slotsOffsetStageVideoClass, ::avmshell::StageVideoObject, SlotOffsetsAndAsserts::s_slotsOffsetStageVideoObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_media_StageVideoAvailability, StageVideoAvailabilityClass, ::avmshell::StageVideoAvailabilityClass, SlotOffsetsAndAsserts::s_slotsOffsetStageVideoAvailabilityClass, ::avmshell::StageVideoAvailabilityObject, SlotOffsetsAndAsserts::s_slotsOffsetStageVideoAvailabilityObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_media_StageWebView, StageWebViewClass, ::avmshell::StageWebViewClass, SlotOffsetsAndAsserts::s_slotsOffsetStageWebViewClass, ::avmshell::StageWebViewObject, SlotOffsetsAndAsserts::s_slotsOffsetStageWebViewObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_media_VideoStatus, VideoStatusClass, ::avmshell::VideoStatusClass, SlotOffsetsAndAsserts::s_slotsOffsetVideoStatusClass, ::avmshell::VideoStatusObject, SlotOffsetsAndAsserts::s_slotsOffsetVideoStatusObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_DatagramSocket, DatagramSocketClass, ::avmshell::DatagramSocketClass, SlotOffsetsAndAsserts::s_slotsOffsetDatagramSocketClass, ::avmshell::DatagramSocketObject, SlotOffsetsAndAsserts::s_slotsOffsetDatagramSocketObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_GroupSpecifier, GroupSpecifierClass, ::avmshell::GroupSpecifierClass, SlotOffsetsAndAsserts::s_slotsOffsetGroupSpecifierClass, ::avmshell::GroupSpecifierObject, SlotOffsetsAndAsserts::s_slotsOffsetGroupSpecifierObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_InterfaceAddress, InterfaceAddressClass, ::avmshell::InterfaceAddressClass, SlotOffsetsAndAsserts::s_slotsOffsetInterfaceAddressClass, ::avmshell::InterfaceAddressObject, SlotOffsetsAndAsserts::s_slotsOffsetInterfaceAddressObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_IPVersion, IPVersionClass, ::avmshell::IPVersionClass, SlotOffsetsAndAsserts::s_slotsOffsetIPVersionClass, ::avmshell::IPVersionObject, SlotOffsetsAndAsserts::s_slotsOffsetIPVersionObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_NetGroup, NetGroupClass, ::avmshell::NetGroupClass, SlotOffsetsAndAsserts::s_slotsOffsetNetGroupClass, ::avmshell::NetGroupObject, SlotOffsetsAndAsserts::s_slotsOffsetNetGroupObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_NetGroupInfo, NetGroupInfoClass, ::avmshell::NetGroupInfoClass, SlotOffsetsAndAsserts::s_slotsOffsetNetGroupInfoClass, ::avmshell::NetGroupInfoObject, SlotOffsetsAndAsserts::s_slotsOffsetNetGroupInfoObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_NetGroupReceiveMode, NetGroupReceiveModeClass, ::avmshell::NetGroupReceiveModeClass, SlotOffsetsAndAsserts::s_slotsOffsetNetGroupReceiveModeClass, ::avmshell::NetGroupReceiveModeObject, SlotOffsetsAndAsserts::s_slotsOffsetNetGroupReceiveModeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_NetGroupReplicationStrategy, NetGroupReplicationStrategyClass, ::avmshell::NetGroupReplicationStrategyClass, SlotOffsetsAndAsserts::s_slotsOffsetNetGroupReplicationStrategyClass, ::avmshell::NetGroupReplicationStrategyObject, SlotOffsetsAndAsserts::s_slotsOffsetNetGroupReplicationStrategyObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_NetGroupSendMode, NetGroupSendModeClass, ::avmshell::NetGroupSendModeClass, SlotOffsetsAndAsserts::s_slotsOffsetNetGroupSendModeClass, ::avmshell::NetGroupSendModeObject, SlotOffsetsAndAsserts::s_slotsOffsetNetGroupSendModeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_NetGroupSendResult, NetGroupSendResultClass, ::avmshell::NetGroupSendResultClass, SlotOffsetsAndAsserts::s_slotsOffsetNetGroupSendResultClass, ::avmshell::NetGroupSendResultObject, SlotOffsetsAndAsserts::s_slotsOffsetNetGroupSendResultObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_NetMonitor, NetMonitorClass, ::avmshell::NetMonitorClass, SlotOffsetsAndAsserts::s_slotsOffsetNetMonitorClass, ::avmshell::NetMonitorObject, SlotOffsetsAndAsserts::s_slotsOffsetNetMonitorObject)
//		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_NetStream, NetStreamClass, ::avmshell::NetStreamClass, SlotOffsetsAndAsserts::s_slotsOffsetNetStreamClass, ::avmshell::NetStreamObject, SlotOffsetsAndAsserts::s_slotsOffsetNetStreamObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_NetStreamAppendBytesAction, NetStreamAppendBytesActionClass, ::avmshell::NetStreamAppendBytesActionClass, SlotOffsetsAndAsserts::s_slotsOffsetNetStreamAppendBytesActionClass, ::avmshell::NetStreamAppendBytesActionObject, SlotOffsetsAndAsserts::s_slotsOffsetNetStreamAppendBytesActionObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_NetStreamInfo, NetStreamInfoClass, ::avmshell::NetStreamInfoClass, SlotOffsetsAndAsserts::s_slotsOffsetNetStreamInfoClass, ::avmshell::NetStreamInfoObject, SlotOffsetsAndAsserts::s_slotsOffsetNetStreamInfoObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_NetStreamMulticastInfo, NetStreamMulticastInfoClass, ::avmshell::NetStreamMulticastInfoClass, SlotOffsetsAndAsserts::s_slotsOffsetNetStreamMulticastInfoClass, ::avmshell::NetStreamMulticastInfoObject, SlotOffsetsAndAsserts::s_slotsOffsetNetStreamMulticastInfoObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_NetStreamPlayOptions, NetStreamPlayOptionsClass, ::avmshell::NetStreamPlayOptionsClass, SlotOffsetsAndAsserts::s_slotsOffsetNetStreamPlayOptionsClass, ::avmshell::NetStreamPlayOptionsObject, SlotOffsetsAndAsserts::s_slotsOffsetNetStreamPlayOptionsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_NetStreamPlayTransitions, NetStreamPlayTransitionsClass, ::avmshell::NetStreamPlayTransitionsClass, SlotOffsetsAndAsserts::s_slotsOffsetNetStreamPlayTransitionsClass, ::avmshell::NetStreamPlayTransitionsObject, SlotOffsetsAndAsserts::s_slotsOffsetNetStreamPlayTransitionsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_NetworkInfo, NetworkInfoClass, ::avmshell::NetworkInfoClass, SlotOffsetsAndAsserts::s_slotsOffsetNetworkInfoClass, ::avmshell::NetworkInfoObject, SlotOffsetsAndAsserts::s_slotsOffsetNetworkInfoObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_NetworkInterface, NetworkInterfaceClass, ::avmshell::NetworkInterfaceClass, SlotOffsetsAndAsserts::s_slotsOffsetNetworkInterfaceClass, ::avmshell::NetworkInterfaceObject, SlotOffsetsAndAsserts::s_slotsOffsetNetworkInterfaceObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_SecureSocket, SecureSocketClass, ::avmshell::SecureSocketClass, SlotOffsetsAndAsserts::s_slotsOffsetSecureSocketClass, ::avmshell::SecureSocketObject, SlotOffsetsAndAsserts::s_slotsOffsetSecureSocketObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_ServerSocket, ServerSocketClass, ::avmshell::ServerSocketClass, SlotOffsetsAndAsserts::s_slotsOffsetServerSocketClass, ::avmshell::ServerSocketObject, SlotOffsetsAndAsserts::s_slotsOffsetServerSocketObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_URLRequestDefaults, URLRequestDefaultsClass, ::avmshell::URLRequestDefaultsClass, SlotOffsetsAndAsserts::s_slotsOffsetURLRequestDefaultsClass, ::avmshell::URLRequestDefaultsObject, SlotOffsetsAndAsserts::s_slotsOffsetURLRequestDefaultsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_printing_PaperSize, PaperSizeClass, ::avmshell::PaperSizeClass, SlotOffsetsAndAsserts::s_slotsOffsetPaperSizeClass, ::avmshell::PaperSizeObject, SlotOffsetsAndAsserts::s_slotsOffsetPaperSizeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_printing_PrintMethod, PrintMethodClass, ::avmshell::PrintMethodClass, SlotOffsetsAndAsserts::s_slotsOffsetPrintMethodClass, ::avmshell::PrintMethodObject, SlotOffsetsAndAsserts::s_slotsOffsetPrintMethodObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_printing_PrintUIOptions, PrintUIOptionsClass, ::avmshell::PrintUIOptionsClass, SlotOffsetsAndAsserts::s_slotsOffsetPrintUIOptionsClass, ::avmshell::PrintUIOptionsObject, SlotOffsetsAndAsserts::s_slotsOffsetPrintUIOptionsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_system_ImageDecodingPolicy, ImageDecodingPolicyClass, ::avmshell::ImageDecodingPolicyClass, SlotOffsetsAndAsserts::s_slotsOffsetImageDecodingPolicyClass, ::avmshell::ImageDecodingPolicyObject, SlotOffsetsAndAsserts::s_slotsOffsetImageDecodingPolicyObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_system_JPEGLoaderContext, JPEGLoaderContextClass, ::avmshell::JPEGLoaderContextClass, SlotOffsetsAndAsserts::s_slotsOffsetJPEGLoaderContextClass, ::avmshell::JPEGLoaderContextObject, SlotOffsetsAndAsserts::s_slotsOffsetJPEGLoaderContextObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_system_SystemUpdater, SystemUpdaterClass, ::avmshell::SystemUpdaterClass, SlotOffsetsAndAsserts::s_slotsOffsetSystemUpdaterClass, ::avmshell::SystemUpdaterObject, SlotOffsetsAndAsserts::s_slotsOffsetSystemUpdaterObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_system_SystemUpdaterType, SystemUpdaterTypeClass, ::avmshell::SystemUpdaterTypeClass, SlotOffsetsAndAsserts::s_slotsOffsetSystemUpdaterTypeClass, ::avmshell::SystemUpdaterTypeObject, SlotOffsetsAndAsserts::s_slotsOffsetSystemUpdaterTypeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_system_TouchscreenType, TouchscreenTypeClass, ::avmshell::TouchscreenTypeClass, SlotOffsetsAndAsserts::s_slotsOffsetTouchscreenTypeClass, ::avmshell::TouchscreenTypeObject, SlotOffsetsAndAsserts::s_slotsOffsetTouchscreenTypeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_TextExtent, TextExtentClass, ::avmshell::TextExtentClass, SlotOffsetsAndAsserts::s_slotsOffsetTextExtentClass, ::avmshell::TextExtentObject, SlotOffsetsAndAsserts::s_slotsOffsetTextExtentObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_TextInteractionMode, TextInteractionModeClass, ::avmshell::TextInteractionModeClass, SlotOffsetsAndAsserts::s_slotsOffsetTextInteractionModeClass, ::avmshell::TextInteractionModeObject, SlotOffsetsAndAsserts::s_slotsOffsetTextInteractionModeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_ui_ContextMenuClipboardItems, ContextMenuClipboardItemsClass, ::avmshell::ContextMenuClipboardItemsClass, SlotOffsetsAndAsserts::s_slotsOffsetContextMenuClipboardItemsClass, ::avmshell::ContextMenuClipboardItemsObject, SlotOffsetsAndAsserts::s_slotsOffsetContextMenuClipboardItemsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_ui_KeyboardType, KeyboardTypeClass, ::avmshell::KeyboardTypeClass, SlotOffsetsAndAsserts::s_slotsOffsetKeyboardTypeClass, ::avmshell::KeyboardTypeObject, SlotOffsetsAndAsserts::s_slotsOffsetKeyboardTypeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_ui_MouseCursor, MouseCursorClass, ::avmshell::MouseCursorClass, SlotOffsetsAndAsserts::s_slotsOffsetMouseCursorClass, ::avmshell::MouseCursorObject, SlotOffsetsAndAsserts::s_slotsOffsetMouseCursorObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_ui_MouseCursorData, MouseCursorDataClass, ::avmshell::MouseCursorDataClass, SlotOffsetsAndAsserts::s_slotsOffsetMouseCursorDataClass, ::avmshell::MouseCursorDataObject, SlotOffsetsAndAsserts::s_slotsOffsetMouseCursorDataObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_ui_Multitouch, MultitouchClass, ::avmshell::MultitouchClass, SlotOffsetsAndAsserts::s_slotsOffsetMultitouchClass, ::avmshell::MultitouchObject, SlotOffsetsAndAsserts::s_slotsOffsetMultitouchObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_ui_MultitouchInputMode, MultitouchInputModeClass, ::avmshell::MultitouchInputModeClass, SlotOffsetsAndAsserts::s_slotsOffsetMultitouchInputModeClass, ::avmshell::MultitouchInputModeObject, SlotOffsetsAndAsserts::s_slotsOffsetMultitouchInputModeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_utils_CompressionAlgorithm, CompressionAlgorithmClass, ::avmshell::CompressionAlgorithmClass, SlotOffsetsAndAsserts::s_slotsOffsetCompressionAlgorithmClass, ::avmshell::CompressionAlgorithmObject, SlotOffsetsAndAsserts::s_slotsOffsetCompressionAlgorithmObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_desktop_Clipboard, ClipboardClass, ::avmshell::ClipboardClass, SlotOffsetsAndAsserts::s_slotsOffsetClipboardClass, ::avmshell::ClipboardObject, SlotOffsetsAndAsserts::s_slotsOffsetClipboardObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_desktop_ClipboardFormats, ClipboardFormatsClass, ::avmshell::ClipboardFormatsClass, SlotOffsetsAndAsserts::s_slotsOffsetClipboardFormatsClass, ::avmshell::ClipboardFormatsObject, SlotOffsetsAndAsserts::s_slotsOffsetClipboardFormatsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_desktop_ClipboardTransferMode, ClipboardTransferModeClass, ::avmshell::ClipboardTransferModeClass, SlotOffsetsAndAsserts::s_slotsOffsetClipboardTransferModeClass, ::avmshell::ClipboardTransferModeObject, SlotOffsetsAndAsserts::s_slotsOffsetClipboardTransferModeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_desktop_DockIcon, DockIconClass, ::avmshell::DockIconClass, SlotOffsetsAndAsserts::s_slotsOffsetDockIconClass, ::avmshell::DockIconObject, SlotOffsetsAndAsserts::s_slotsOffsetDockIconObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_desktop_Icon, IconClass, ::avmshell::IconClass, SlotOffsetsAndAsserts::s_slotsOffsetIconClass, ::avmshell::IconObject, SlotOffsetsAndAsserts::s_slotsOffsetIconObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_desktop_InteractiveIcon, InteractiveIconClass, ::avmshell::InteractiveIconClass, SlotOffsetsAndAsserts::s_slotsOffsetInteractiveIconClass, ::avmshell::InteractiveIconObject, SlotOffsetsAndAsserts::s_slotsOffsetInteractiveIconObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_desktop_InvokeEventReason, InvokeEventReasonClass, ::avmshell::InvokeEventReasonClass, SlotOffsetsAndAsserts::s_slotsOffsetInvokeEventReasonClass, ::avmshell::InvokeEventReasonObject, SlotOffsetsAndAsserts::s_slotsOffsetInvokeEventReasonObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_desktop_NativeApplication, NativeApplicationClass, ::avmshell::NativeApplicationClass, SlotOffsetsAndAsserts::s_slotsOffsetNativeApplicationClass, ::avmshell::NativeApplicationObject, SlotOffsetsAndAsserts::s_slotsOffsetNativeApplicationObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_desktop_NativeDragActions, NativeDragActionsClass, ::avmshell::NativeDragActionsClass, SlotOffsetsAndAsserts::s_slotsOffsetNativeDragActionsClass, ::avmshell::NativeDragActionsObject, SlotOffsetsAndAsserts::s_slotsOffsetNativeDragActionsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_desktop_NativeDragManager, NativeDragManagerClass, ::avmshell::NativeDragManagerClass, SlotOffsetsAndAsserts::s_slotsOffsetNativeDragManagerClass, ::avmshell::NativeDragManagerObject, SlotOffsetsAndAsserts::s_slotsOffsetNativeDragManagerObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_desktop_NativeDragOptions, NativeDragOptionsClass, ::avmshell::NativeDragOptionsClass, SlotOffsetsAndAsserts::s_slotsOffsetNativeDragOptionsClass, ::avmshell::NativeDragOptionsObject, SlotOffsetsAndAsserts::s_slotsOffsetNativeDragOptionsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_desktop_NativeProcess, NativeProcessClass, ::avmshell::NativeProcessClass, SlotOffsetsAndAsserts::s_slotsOffsetNativeProcessClass, ::avmshell::NativeProcessObject, SlotOffsetsAndAsserts::s_slotsOffsetNativeProcessObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_desktop_NativeProcessStartupInfo, NativeProcessStartupInfoClass, ::avmshell::NativeProcessStartupInfoClass, SlotOffsetsAndAsserts::s_slotsOffsetNativeProcessStartupInfoClass, ::avmshell::NativeProcessStartupInfoObject, SlotOffsetsAndAsserts::s_slotsOffsetNativeProcessStartupInfoObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_desktop_NotificationType, NotificationTypeClass, ::avmshell::NotificationTypeClass, SlotOffsetsAndAsserts::s_slotsOffsetNotificationTypeClass, ::avmshell::NotificationTypeObject, SlotOffsetsAndAsserts::s_slotsOffsetNotificationTypeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_desktop_SystemIdleMode, SystemIdleModeClass, ::avmshell::SystemIdleModeClass, SlotOffsetsAndAsserts::s_slotsOffsetSystemIdleModeClass, ::avmshell::SystemIdleModeObject, SlotOffsetsAndAsserts::s_slotsOffsetSystemIdleModeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_desktop_SystemTrayIcon, SystemTrayIconClass, ::avmshell::SystemTrayIconClass, SlotOffsetsAndAsserts::s_slotsOffsetSystemTrayIconClass, ::avmshell::SystemTrayIconObject, SlotOffsetsAndAsserts::s_slotsOffsetSystemTrayIconObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_desktop_Updater, UpdaterClass, ::avmshell::UpdaterClass, SlotOffsetsAndAsserts::s_slotsOffsetUpdaterClass, ::avmshell::UpdaterObject, SlotOffsetsAndAsserts::s_slotsOffsetUpdaterObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_filesystem_File, FileClass, ::avmshell::FileClass, SlotOffsetsAndAsserts::s_slotsOffsetFileClass, ::avmshell::FileObject, SlotOffsetsAndAsserts::s_slotsOffsetFileObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_filesystem_FileMode, FileModeClass, ::avmshell::FileModeClass, SlotOffsetsAndAsserts::s_slotsOffsetFileModeClass, ::avmshell::FileModeObject, SlotOffsetsAndAsserts::s_slotsOffsetFileModeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_filesystem_FileStream, FileStreamClass, ::avmshell::FileStreamClass, SlotOffsetsAndAsserts::s_slotsOffsetFileStreamClass, ::avmshell::FileStreamObject, SlotOffsetsAndAsserts::s_slotsOffsetFileStreamObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_filesystem_StorageVolume, StorageVolumeClass, ::avmshell::StorageVolumeClass, SlotOffsetsAndAsserts::s_slotsOffsetStorageVolumeClass, ::avmshell::StorageVolumeObject, SlotOffsetsAndAsserts::s_slotsOffsetStorageVolumeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_filesystem_StorageVolumeInfo, StorageVolumeInfoClass, ::avmshell::StorageVolumeInfoClass, SlotOffsetsAndAsserts::s_slotsOffsetStorageVolumeInfoClass, ::avmshell::StorageVolumeInfoObject, SlotOffsetsAndAsserts::s_slotsOffsetStorageVolumeInfoObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_globalization_Collator, CollatorClass, ::avmshell::CollatorClass, SlotOffsetsAndAsserts::s_slotsOffsetCollatorClass, ::avmshell::CollatorObject, SlotOffsetsAndAsserts::s_slotsOffsetCollatorObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_globalization_CollatorMode, CollatorModeClass, ::avmshell::CollatorModeClass, SlotOffsetsAndAsserts::s_slotsOffsetCollatorModeClass, ::avmshell::CollatorModeObject, SlotOffsetsAndAsserts::s_slotsOffsetCollatorModeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_globalization_CurrencyFormatter, CurrencyFormatterClass, ::avmshell::CurrencyFormatterClass, SlotOffsetsAndAsserts::s_slotsOffsetCurrencyFormatterClass, ::avmshell::CurrencyFormatterObject, SlotOffsetsAndAsserts::s_slotsOffsetCurrencyFormatterObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_globalization_CurrencyParseResult, CurrencyParseResultClass, ::avmshell::CurrencyParseResultClass, SlotOffsetsAndAsserts::s_slotsOffsetCurrencyParseResultClass, ::avmshell::CurrencyParseResultObject, SlotOffsetsAndAsserts::s_slotsOffsetCurrencyParseResultObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_globalization_DateTimeFormatter, DateTimeFormatterClass, ::avmshell::DateTimeFormatterClass, SlotOffsetsAndAsserts::s_slotsOffsetDateTimeFormatterClass, ::avmshell::DateTimeFormatterObject, SlotOffsetsAndAsserts::s_slotsOffsetDateTimeFormatterObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_globalization_DateTimeNameContext, DateTimeNameContextClass, ::avmshell::DateTimeNameContextClass, SlotOffsetsAndAsserts::s_slotsOffsetDateTimeNameContextClass, ::avmshell::DateTimeNameContextObject, SlotOffsetsAndAsserts::s_slotsOffsetDateTimeNameContextObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_globalization_DateTimeNameStyle, DateTimeNameStyleClass, ::avmshell::DateTimeNameStyleClass, SlotOffsetsAndAsserts::s_slotsOffsetDateTimeNameStyleClass, ::avmshell::DateTimeNameStyleObject, SlotOffsetsAndAsserts::s_slotsOffsetDateTimeNameStyleObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_globalization_DateTimeStyle, DateTimeStyleClass, ::avmshell::DateTimeStyleClass, SlotOffsetsAndAsserts::s_slotsOffsetDateTimeStyleClass, ::avmshell::DateTimeStyleObject, SlotOffsetsAndAsserts::s_slotsOffsetDateTimeStyleObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_globalization_LastOperationStatus, LastOperationStatusClass, ::avmshell::LastOperationStatusClass, SlotOffsetsAndAsserts::s_slotsOffsetLastOperationStatusClass, ::avmshell::LastOperationStatusObject, SlotOffsetsAndAsserts::s_slotsOffsetLastOperationStatusObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_globalization_LocaleID, LocaleIDClass, ::avmshell::LocaleIDClass, SlotOffsetsAndAsserts::s_slotsOffsetLocaleIDClass, ::avmshell::LocaleIDObject, SlotOffsetsAndAsserts::s_slotsOffsetLocaleIDObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_globalization_NationalDigitsType, NationalDigitsTypeClass, ::avmshell::NationalDigitsTypeClass, SlotOffsetsAndAsserts::s_slotsOffsetNationalDigitsTypeClass, ::avmshell::NationalDigitsTypeObject, SlotOffsetsAndAsserts::s_slotsOffsetNationalDigitsTypeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_globalization_NumberFormatter, NumberFormatterClass, ::avmshell::NumberFormatterClass, SlotOffsetsAndAsserts::s_slotsOffsetNumberFormatterClass, ::avmshell::NumberFormatterObject, SlotOffsetsAndAsserts::s_slotsOffsetNumberFormatterObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_globalization_NumberParseResult, NumberParseResultClass, ::avmshell::NumberParseResultClass, SlotOffsetsAndAsserts::s_slotsOffsetNumberParseResultClass, ::avmshell::NumberParseResultObject, SlotOffsetsAndAsserts::s_slotsOffsetNumberParseResultObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_globalization_StringTools, StringToolsClass, ::avmshell::StringToolsClass, SlotOffsetsAndAsserts::s_slotsOffsetStringToolsClass, ::avmshell::StringToolsObject, SlotOffsetsAndAsserts::s_slotsOffsetStringToolsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_drm_AuthenticationMethod, AuthenticationMethodClass, ::avmshell::AuthenticationMethodClass, SlotOffsetsAndAsserts::s_slotsOffsetAuthenticationMethodClass, ::avmshell::AuthenticationMethodObject, SlotOffsetsAndAsserts::s_slotsOffsetAuthenticationMethodObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_drm_DRMContentData, DRMContentDataClass, ::avmshell::DRMContentDataClass, SlotOffsetsAndAsserts::s_slotsOffsetDRMContentDataClass, ::avmshell::DRMContentDataObject, SlotOffsetsAndAsserts::s_slotsOffsetDRMContentDataObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_drm_DRMManager, DRMManagerClass, ::avmshell::DRMManagerClass, SlotOffsetsAndAsserts::s_slotsOffsetDRMManagerClass, ::avmshell::DRMManagerObject, SlotOffsetsAndAsserts::s_slotsOffsetDRMManagerObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_drm_DRMPlaybackTimeWindow, DRMPlaybackTimeWindowClass, ::avmshell::DRMPlaybackTimeWindowClass, SlotOffsetsAndAsserts::s_slotsOffsetDRMPlaybackTimeWindowClass, ::avmshell::DRMPlaybackTimeWindowObject, SlotOffsetsAndAsserts::s_slotsOffsetDRMPlaybackTimeWindowObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_drm_DRMVoucher, DRMVoucherClass, ::avmshell::DRMVoucherClass, SlotOffsetsAndAsserts::s_slotsOffsetDRMVoucherClass, ::avmshell::DRMVoucherObject, SlotOffsetsAndAsserts::s_slotsOffsetDRMVoucherObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_drm_LoadVoucherSetting, LoadVoucherSettingClass, ::avmshell::LoadVoucherSettingClass, SlotOffsetsAndAsserts::s_slotsOffsetLoadVoucherSettingClass, ::avmshell::LoadVoucherSettingObject, SlotOffsetsAndAsserts::s_slotsOffsetLoadVoucherSettingObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_drm_VoucherAccessInfo, VoucherAccessInfoClass, ::avmshell::VoucherAccessInfoClass, SlotOffsetsAndAsserts::s_slotsOffsetVoucherAccessInfoClass, ::avmshell::VoucherAccessInfoObject, SlotOffsetsAndAsserts::s_slotsOffsetVoucherAccessInfoObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_sampler_DeleteObjectSample, DeleteObjectSampleClass, ::avmshell::DeleteObjectSampleClass, SlotOffsetsAndAsserts::s_slotsOffsetDeleteObjectSampleClass, ::avmshell::DeleteObjectSampleObject, SlotOffsetsAndAsserts::s_slotsOffsetDeleteObjectSampleObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_sampler_NewObjectSample, NewObjectSampleClass, ::avmshell::NewObjectSampleClass, SlotOffsetsAndAsserts::s_slotsOffsetNewObjectSampleClass, ::avmshell::NewObjectSampleObject, SlotOffsetsAndAsserts::s_slotsOffsetNewObjectSampleObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_sampler_Sample, SampleClass, ::avmshell::SampleClass, SlotOffsetsAndAsserts::s_slotsOffsetSampleClass, ::avmshell::SampleObject, SlotOffsetsAndAsserts::s_slotsOffsetSampleObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_sampler_StackFrame, StackFrameClass, ::avmshell::StackFrameClass, SlotOffsetsAndAsserts::s_slotsOffsetStackFrameClass, ::avmshell::StackFrameObject, SlotOffsetsAndAsserts::s_slotsOffsetStackFrameObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_sensors_Accelerometer, AccelerometerClass, ::avmshell::AccelerometerClass, SlotOffsetsAndAsserts::s_slotsOffsetAccelerometerClass, ::avmshell::AccelerometerObject, SlotOffsetsAndAsserts::s_slotsOffsetAccelerometerObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_sensors_Geolocation, GeolocationClass, ::avmshell::GeolocationClass, SlotOffsetsAndAsserts::s_slotsOffsetGeolocationClass, ::avmshell::GeolocationObject, SlotOffsetsAndAsserts::s_slotsOffsetGeolocationObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_BreakOpportunity, BreakOpportunityClass, ::avmshell::BreakOpportunityClass, SlotOffsetsAndAsserts::s_slotsOffsetBreakOpportunityClass, ::avmshell::BreakOpportunityObject, SlotOffsetsAndAsserts::s_slotsOffsetBreakOpportunityObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_CFFHinting, CFFHintingClass, ::avmshell::CFFHintingClass, SlotOffsetsAndAsserts::s_slotsOffsetCFFHintingClass, ::avmshell::CFFHintingObject, SlotOffsetsAndAsserts::s_slotsOffsetCFFHintingObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_ContentElement, ContentElementClass, ::avmshell::ContentElementClass, SlotOffsetsAndAsserts::s_slotsOffsetContentElementClass, ::avmshell::ContentElementObject, SlotOffsetsAndAsserts::s_slotsOffsetContentElementObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_DigitCase, DigitCaseClass, ::avmshell::DigitCaseClass, SlotOffsetsAndAsserts::s_slotsOffsetDigitCaseClass, ::avmshell::DigitCaseObject, SlotOffsetsAndAsserts::s_slotsOffsetDigitCaseObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_DigitWidth, DigitWidthClass, ::avmshell::DigitWidthClass, SlotOffsetsAndAsserts::s_slotsOffsetDigitWidthClass, ::avmshell::DigitWidthObject, SlotOffsetsAndAsserts::s_slotsOffsetDigitWidthObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_EastAsianJustifier, EastAsianJustifierClass, ::avmshell::EastAsianJustifierClass, SlotOffsetsAndAsserts::s_slotsOffsetEastAsianJustifierClass, ::avmshell::EastAsianJustifierObject, SlotOffsetsAndAsserts::s_slotsOffsetEastAsianJustifierObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_ElementFormat, ElementFormatClass, ::avmshell::ElementFormatClass, SlotOffsetsAndAsserts::s_slotsOffsetElementFormatClass, ::avmshell::ElementFormatObject, SlotOffsetsAndAsserts::s_slotsOffsetElementFormatObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_FontDescription, FontDescriptionClass, ::avmshell::FontDescriptionClass, SlotOffsetsAndAsserts::s_slotsOffsetFontDescriptionClass, ::avmshell::FontDescriptionObject, SlotOffsetsAndAsserts::s_slotsOffsetFontDescriptionObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_FontLookup, FontLookupClass, ::avmshell::FontLookupClass, SlotOffsetsAndAsserts::s_slotsOffsetFontLookupClass, ::avmshell::FontLookupObject, SlotOffsetsAndAsserts::s_slotsOffsetFontLookupObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_FontMetrics, FontMetricsClass, ::avmshell::FontMetricsClass, SlotOffsetsAndAsserts::s_slotsOffsetFontMetricsClass, ::avmshell::FontMetricsObject, SlotOffsetsAndAsserts::s_slotsOffsetFontMetricsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_FontPosture, FontPostureClass, ::avmshell::FontPostureClass, SlotOffsetsAndAsserts::s_slotsOffsetFontPostureClass, ::avmshell::FontPostureObject, SlotOffsetsAndAsserts::s_slotsOffsetFontPostureObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_FontWeight, FontWeightClass, ::avmshell::FontWeightClass, SlotOffsetsAndAsserts::s_slotsOffsetFontWeightClass, ::avmshell::FontWeightObject, SlotOffsetsAndAsserts::s_slotsOffsetFontWeightObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_GraphicElement, GraphicElementClass, ::avmshell::GraphicElementClass, SlotOffsetsAndAsserts::s_slotsOffsetGraphicElementClass, ::avmshell::GraphicElementObject, SlotOffsetsAndAsserts::s_slotsOffsetGraphicElementObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_GroupElement, GroupElementClass, ::avmshell::GroupElementClass, SlotOffsetsAndAsserts::s_slotsOffsetGroupElementClass, ::avmshell::GroupElementObject, SlotOffsetsAndAsserts::s_slotsOffsetGroupElementObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_JustificationStyle, JustificationStyleClass, ::avmshell::JustificationStyleClass, SlotOffsetsAndAsserts::s_slotsOffsetJustificationStyleClass, ::avmshell::JustificationStyleObject, SlotOffsetsAndAsserts::s_slotsOffsetJustificationStyleObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_Kerning, KerningClass, ::avmshell::KerningClass, SlotOffsetsAndAsserts::s_slotsOffsetKerningClass, ::avmshell::KerningObject, SlotOffsetsAndAsserts::s_slotsOffsetKerningObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_LigatureLevel, LigatureLevelClass, ::avmshell::LigatureLevelClass, SlotOffsetsAndAsserts::s_slotsOffsetLigatureLevelClass, ::avmshell::LigatureLevelObject, SlotOffsetsAndAsserts::s_slotsOffsetLigatureLevelObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_LineJustification, LineJustificationClass, ::avmshell::LineJustificationClass, SlotOffsetsAndAsserts::s_slotsOffsetLineJustificationClass, ::avmshell::LineJustificationObject, SlotOffsetsAndAsserts::s_slotsOffsetLineJustificationObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_RenderingMode, RenderingModeClass, ::avmshell::RenderingModeClass, SlotOffsetsAndAsserts::s_slotsOffsetRenderingModeClass, ::avmshell::RenderingModeObject, SlotOffsetsAndAsserts::s_slotsOffsetRenderingModeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_SpaceJustifier, SpaceJustifierClass, ::avmshell::SpaceJustifierClass, SlotOffsetsAndAsserts::s_slotsOffsetSpaceJustifierClass, ::avmshell::SpaceJustifierObject, SlotOffsetsAndAsserts::s_slotsOffsetSpaceJustifierObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_TabAlignment, TabAlignmentClass, ::avmshell::TabAlignmentClass, SlotOffsetsAndAsserts::s_slotsOffsetTabAlignmentClass, ::avmshell::TabAlignmentObject, SlotOffsetsAndAsserts::s_slotsOffsetTabAlignmentObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_TabStop, TabStopClass, ::avmshell::TabStopClass, SlotOffsetsAndAsserts::s_slotsOffsetTabStopClass, ::avmshell::TabStopObject, SlotOffsetsAndAsserts::s_slotsOffsetTabStopObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_TextBaseline, TextBaselineClass, ::avmshell::TextBaselineClass, SlotOffsetsAndAsserts::s_slotsOffsetTextBaselineClass, ::avmshell::TextBaselineObject, SlotOffsetsAndAsserts::s_slotsOffsetTextBaselineObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_TextBlock, TextBlockClass, ::avmshell::TextBlockClass, SlotOffsetsAndAsserts::s_slotsOffsetTextBlockClass, ::avmshell::TextBlockObject, SlotOffsetsAndAsserts::s_slotsOffsetTextBlockObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_TextElement, TextElementClass, ::avmshell::TextElementClass, SlotOffsetsAndAsserts::s_slotsOffsetTextElementClass, ::avmshell::TextElementObject, SlotOffsetsAndAsserts::s_slotsOffsetTextElementObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_TextJustifier, TextJustifierClass, ::avmshell::TextJustifierClass, SlotOffsetsAndAsserts::s_slotsOffsetTextJustifierClass, ::avmshell::TextJustifierObject, SlotOffsetsAndAsserts::s_slotsOffsetTextJustifierObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_TextLine, TextLineClass, ::avmshell::TextLineClass, SlotOffsetsAndAsserts::s_slotsOffsetTextLineClass, ::avmshell::TextLineObject, SlotOffsetsAndAsserts::s_slotsOffsetTextLineObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_TextLineCreationResult, TextLineCreationResultClass, ::avmshell::TextLineCreationResultClass, SlotOffsetsAndAsserts::s_slotsOffsetTextLineCreationResultClass, ::avmshell::TextLineCreationResultObject, SlotOffsetsAndAsserts::s_slotsOffsetTextLineCreationResultObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_TextLineMirrorRegion, TextLineMirrorRegionClass, ::avmshell::TextLineMirrorRegionClass, SlotOffsetsAndAsserts::s_slotsOffsetTextLineMirrorRegionClass, ::avmshell::TextLineMirrorRegionObject, SlotOffsetsAndAsserts::s_slotsOffsetTextLineMirrorRegionObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_TextLineValidity, TextLineValidityClass, ::avmshell::TextLineValidityClass, SlotOffsetsAndAsserts::s_slotsOffsetTextLineValidityClass, ::avmshell::TextLineValidityObject, SlotOffsetsAndAsserts::s_slotsOffsetTextLineValidityObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_TextRotation, TextRotationClass, ::avmshell::TextRotationClass, SlotOffsetsAndAsserts::s_slotsOffsetTextRotationClass, ::avmshell::TextRotationObject, SlotOffsetsAndAsserts::s_slotsOffsetTextRotationObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_engine_TypographicCase, TypographicCaseClass, ::avmshell::TypographicCaseClass, SlotOffsetsAndAsserts::s_slotsOffsetTypographicCaseClass, ::avmshell::TypographicCaseObject, SlotOffsetsAndAsserts::s_slotsOffsetTypographicCaseObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_ime_CompositionAttributeRange, CompositionAttributeRangeClass, ::avmshell::CompositionAttributeRangeClass, SlotOffsetsAndAsserts::s_slotsOffsetCompositionAttributeRangeClass, ::avmshell::CompositionAttributeRangeObject, SlotOffsetsAndAsserts::s_slotsOffsetCompositionAttributeRangeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_security_CertificateStatus, CertificateStatusClass, ::avmshell::CertificateStatusClass, SlotOffsetsAndAsserts::s_slotsOffsetCertificateStatusClass, ::avmshell::CertificateStatusObject, SlotOffsetsAndAsserts::s_slotsOffsetCertificateStatusObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_security_ReferencesValidationSetting, ReferencesValidationSettingClass, ::avmshell::ReferencesValidationSettingClass, SlotOffsetsAndAsserts::s_slotsOffsetReferencesValidationSettingClass, ::avmshell::ReferencesValidationSettingObject, SlotOffsetsAndAsserts::s_slotsOffsetReferencesValidationSettingObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_security_RevocationCheckSettings, RevocationCheckSettingsClass, ::avmshell::RevocationCheckSettingsClass, SlotOffsetsAndAsserts::s_slotsOffsetRevocationCheckSettingsClass, ::avmshell::RevocationCheckSettingsObject, SlotOffsetsAndAsserts::s_slotsOffsetRevocationCheckSettingsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_security_SignatureStatus, SignatureStatusClass, ::avmshell::SignatureStatusClass, SlotOffsetsAndAsserts::s_slotsOffsetSignatureStatusClass, ::avmshell::SignatureStatusObject, SlotOffsetsAndAsserts::s_slotsOffsetSignatureStatusObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_security_SignerTrustSettings, SignerTrustSettingsClass, ::avmshell::SignerTrustSettingsClass, SlotOffsetsAndAsserts::s_slotsOffsetSignerTrustSettingsClass, ::avmshell::SignerTrustSettingsObject, SlotOffsetsAndAsserts::s_slotsOffsetSignerTrustSettingsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_security_XMLSignatureValidator, XMLSignatureValidatorClass, ::avmshell::XMLSignatureValidatorClass, SlotOffsetsAndAsserts::s_slotsOffsetXMLSignatureValidatorClass, ::avmshell::XMLSignatureValidatorObject, SlotOffsetsAndAsserts::s_slotsOffsetXMLSignatureValidatorObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_html_HTMLHistoryItem, HTMLHistoryItemClass, ::avmshell::HTMLHistoryItemClass, SlotOffsetsAndAsserts::s_slotsOffsetHTMLHistoryItemClass, ::avmshell::HTMLHistoryItemObject, SlotOffsetsAndAsserts::s_slotsOffsetHTMLHistoryItemObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_html_HTMLHost, HTMLHostClass, ::avmshell::HTMLHostClass, SlotOffsetsAndAsserts::s_slotsOffsetHTMLHostClass, ::avmshell::HTMLHostObject, SlotOffsetsAndAsserts::s_slotsOffsetHTMLHostObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_html_HTMLLoader, HTMLLoaderClass, ::avmshell::HTMLLoaderClass, SlotOffsetsAndAsserts::s_slotsOffsetHTMLLoaderClass, ::avmshell::HTMLLoaderObject, SlotOffsetsAndAsserts::s_slotsOffsetHTMLLoaderObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_html_HTMLPDFCapability, HTMLPDFCapabilityClass, ::avmshell::HTMLPDFCapabilityClass, SlotOffsetsAndAsserts::s_slotsOffsetHTMLPDFCapabilityClass, ::avmshell::HTMLPDFCapabilityObject, SlotOffsetsAndAsserts::s_slotsOffsetHTMLPDFCapabilityObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_html_HTMLSWFCapability, HTMLSWFCapabilityClass, ::avmshell::HTMLSWFCapabilityClass, SlotOffsetsAndAsserts::s_slotsOffsetHTMLSWFCapabilityClass, ::avmshell::HTMLSWFCapabilityObject, SlotOffsetsAndAsserts::s_slotsOffsetHTMLSWFCapabilityObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_html_HTMLWindowCreateOptions, HTMLWindowCreateOptionsClass, ::avmshell::HTMLWindowCreateOptionsClass, SlotOffsetsAndAsserts::s_slotsOffsetHTMLWindowCreateOptionsClass, ::avmshell::HTMLWindowCreateOptionsObject, SlotOffsetsAndAsserts::s_slotsOffsetHTMLWindowCreateOptionsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_dns_AAAARecord, AAAARecordClass, ::avmshell::AAAARecordClass, SlotOffsetsAndAsserts::s_slotsOffsetAAAARecordClass, ::avmshell::AAAARecordObject, SlotOffsetsAndAsserts::s_slotsOffsetAAAARecordObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_dns_ARecord, ARecordClass, ::avmshell::ARecordClass, SlotOffsetsAndAsserts::s_slotsOffsetARecordClass, ::avmshell::ARecordObject, SlotOffsetsAndAsserts::s_slotsOffsetARecordObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_dns_DNSResolver, DNSResolverClass, ::avmshell::DNSResolverClass, SlotOffsetsAndAsserts::s_slotsOffsetDNSResolverClass, ::avmshell::DNSResolverObject, SlotOffsetsAndAsserts::s_slotsOffsetDNSResolverObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_dns_MXRecord, MXRecordClass, ::avmshell::MXRecordClass, SlotOffsetsAndAsserts::s_slotsOffsetMXRecordClass, ::avmshell::MXRecordObject, SlotOffsetsAndAsserts::s_slotsOffsetMXRecordObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_dns_PTRRecord, PTRRecordClass, ::avmshell::PTRRecordClass, SlotOffsetsAndAsserts::s_slotsOffsetPTRRecordClass, ::avmshell::PTRRecordObject, SlotOffsetsAndAsserts::s_slotsOffsetPTRRecordObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_dns_ResourceRecord, ResourceRecordClass, ::avmshell::ResourceRecordClass, SlotOffsetsAndAsserts::s_slotsOffsetResourceRecordClass, ::avmshell::ResourceRecordObject, SlotOffsetsAndAsserts::s_slotsOffsetResourceRecordObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_dns_SRVRecord, SRVRecordClass, ::avmshell::SRVRecordClass, SlotOffsetsAndAsserts::s_slotsOffsetSRVRecordClass, ::avmshell::SRVRecordObject, SlotOffsetsAndAsserts::s_slotsOffsetSRVRecordObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_data_EncryptedLocalStore, EncryptedLocalStoreClass, ::avmshell::EncryptedLocalStoreClass, SlotOffsetsAndAsserts::s_slotsOffsetEncryptedLocalStoreClass, ::avmshell::EncryptedLocalStoreObject, SlotOffsetsAndAsserts::s_slotsOffsetEncryptedLocalStoreObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_data_SQLCollationType, SQLCollationTypeClass, ::avmshell::SQLCollationTypeClass, SlotOffsetsAndAsserts::s_slotsOffsetSQLCollationTypeClass, ::avmshell::SQLCollationTypeObject, SlotOffsetsAndAsserts::s_slotsOffsetSQLCollationTypeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_data_SQLColumnNameStyle, SQLColumnNameStyleClass, ::avmshell::SQLColumnNameStyleClass, SlotOffsetsAndAsserts::s_slotsOffsetSQLColumnNameStyleClass, ::avmshell::SQLColumnNameStyleObject, SlotOffsetsAndAsserts::s_slotsOffsetSQLColumnNameStyleObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_data_SQLColumnSchema, SQLColumnSchemaClass, ::avmshell::SQLColumnSchemaClass, SlotOffsetsAndAsserts::s_slotsOffsetSQLColumnSchemaClass, ::avmshell::SQLColumnSchemaObject, SlotOffsetsAndAsserts::s_slotsOffsetSQLColumnSchemaObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_data_SQLConnection, SQLConnectionClass, ::avmshell::SQLConnectionClass, SlotOffsetsAndAsserts::s_slotsOffsetSQLConnectionClass, ::avmshell::SQLConnectionObject, SlotOffsetsAndAsserts::s_slotsOffsetSQLConnectionObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_data_SQLIndexSchema, SQLIndexSchemaClass, ::avmshell::SQLIndexSchemaClass, SlotOffsetsAndAsserts::s_slotsOffsetSQLIndexSchemaClass, ::avmshell::SQLIndexSchemaObject, SlotOffsetsAndAsserts::s_slotsOffsetSQLIndexSchemaObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_data_SQLMode, SQLModeClass, ::avmshell::SQLModeClass, SlotOffsetsAndAsserts::s_slotsOffsetSQLModeClass, ::avmshell::SQLModeObject, SlotOffsetsAndAsserts::s_slotsOffsetSQLModeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_data_SQLResult, SQLResultClass, ::avmshell::SQLResultClass, SlotOffsetsAndAsserts::s_slotsOffsetSQLResultClass, ::avmshell::SQLResultObject, SlotOffsetsAndAsserts::s_slotsOffsetSQLResultObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_data_SQLSchema, SQLSchemaClass, ::avmshell::SQLSchemaClass, SlotOffsetsAndAsserts::s_slotsOffsetSQLSchemaClass, ::avmshell::SQLSchemaObject, SlotOffsetsAndAsserts::s_slotsOffsetSQLSchemaObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_data_SQLSchemaResult, SQLSchemaResultClass, ::avmshell::SQLSchemaResultClass, SlotOffsetsAndAsserts::s_slotsOffsetSQLSchemaResultClass, ::avmshell::SQLSchemaResultObject, SlotOffsetsAndAsserts::s_slotsOffsetSQLSchemaResultObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_data_SQLStatement, SQLStatementClass, ::avmshell::SQLStatementClass, SlotOffsetsAndAsserts::s_slotsOffsetSQLStatementClass, ::avmshell::SQLStatementObject, SlotOffsetsAndAsserts::s_slotsOffsetSQLStatementObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_data_SQLTableSchema, SQLTableSchemaClass, ::avmshell::SQLTableSchemaClass, SlotOffsetsAndAsserts::s_slotsOffsetSQLTableSchemaClass, ::avmshell::SQLTableSchemaObject, SlotOffsetsAndAsserts::s_slotsOffsetSQLTableSchemaObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_data_SQLTransactionLockType, SQLTransactionLockTypeClass, ::avmshell::SQLTransactionLockTypeClass, SlotOffsetsAndAsserts::s_slotsOffsetSQLTransactionLockTypeClass, ::avmshell::SQLTransactionLockTypeObject, SlotOffsetsAndAsserts::s_slotsOffsetSQLTransactionLockTypeObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_data_SQLTriggerSchema, SQLTriggerSchemaClass, ::avmshell::SQLTriggerSchemaClass, SlotOffsetsAndAsserts::s_slotsOffsetSQLTriggerSchemaClass, ::avmshell::SQLTriggerSchemaObject, SlotOffsetsAndAsserts::s_slotsOffsetSQLTriggerSchemaObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_data_SQLViewSchema, SQLViewSchemaClass, ::avmshell::SQLViewSchemaClass, SlotOffsetsAndAsserts::s_slotsOffsetSQLViewSchemaClass, ::avmshell::SQLViewSchemaObject, SlotOffsetsAndAsserts::s_slotsOffsetSQLViewSchemaObject)

		AVMTHUNK_NATIVE_CLASS(abcclass_flash_security_X500DistinguishedName, X500DistinguishedNameClass, ::avmshell::X500DistinguishedNameClass, SlotOffsetsAndAsserts::s_slotsOffsetX500DistinguishedNameClass, ::avmshell::X500DistinguishedNameObject, SlotOffsetsAndAsserts::s_slotsOffsetX500DistinguishedNameObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_security_X509Certificate, X509CertificateClass, ::avmshell::X509CertificateClass, SlotOffsetsAndAsserts::s_slotsOffsetX509CertificateClass, ::avmshell::X509CertificateObject, SlotOffsetsAndAsserts::s_slotsOffsetX509CertificateObject)

		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_drm_DRMVoucherStoreContext, DRMVoucherStoreContextClass, ::avmshell::DRMVoucherStoreContextClass, SlotOffsetsAndAsserts::s_slotsOffsetDRMVoucherStoreContextClass, ::avmshell::DRMVoucherStoreContextObject, SlotOffsetsAndAsserts::s_slotsOffsetDRMVoucherStoreContextObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_drm_DRMManagerSession, DRMManagerSessionClass, ::avmshell::DRMManagerSessionClass, SlotOffsetsAndAsserts::s_slotsOffsetDRMManagerSessionClass, ::avmshell::DRMManagerSessionObject, SlotOffsetsAndAsserts::s_slotsOffsetDRMManagerSessionObject)
		//new adds end

		//new adds 11

		//BitmapEncodingColorSpace
		//AVMTHUNK_NATIVE_CLASS(abcclass_BWLoader_BitmapEncodingColorSpace, BitmapEncodingColorSpaceClass, ::avmshell::BitmapEncodingColorSpaceClass,		  SlotOffsetsAndAsserts::s_slotsOffsetBitmapEncodingColorSpaceClass, ::avmshell::BitmapEncodingColorSpaceObject, SlotOffsetsAndAsserts::s_slotsOffsetBitmapEncodingColorSpaceObject )
		// Stage3D
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_display_Stage3D, Stage3DClass, ::avmshell::Stage3DClass, SlotOffsetsAndAsserts::s_slotsOffsetStage3DClass, ::avmshell::Stage3DObject, SlotOffsetsAndAsserts::s_slotsOffsetStage3DObject )
		// AVDictionaryDataEvent
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_AVDictionaryDataEvent, AVDictionaryDataEventClass, ::avmshell::AVDictionaryDataEventClass, SlotOffsetsAndAsserts::s_slotsOffsetAVDictionaryDataEventClass, ::avmshell::AVDictionaryDataEventObject, SlotOffsetsAndAsserts::s_slotsOffsetAVDictionaryDataEventObject )
		// DRMDeviceGroupErrorEvent
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_DRMDeviceGroupErrorEvent, DRMDeviceGroupErrorEventClass, ::avmshell::DRMDeviceGroupErrorEventClass, SlotOffsetsAndAsserts::s_slotsOffsetDRMDeviceGroupErrorEventClass, ::avmshell::DRMDeviceGroupErrorEventObject, SlotOffsetsAndAsserts::s_slotsOffsetDRMDeviceGroupErrorEventObject )
		// DRMDeviceGroupEvent
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_DRMDeviceGroupEvent, DRMDeviceGroupEventClass, ::avmshell::DRMDeviceGroupEventClass, SlotOffsetsAndAsserts::s_slotsOffsetDRMDeviceGroupEventClass, ::avmshell::DRMDeviceGroupEventObject, SlotOffsetsAndAsserts::s_slotsOffsetDRMDeviceGroupEventObject )
		// DRMLicenseRequestEvent
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_DRMLicenseRequestEvent, DRMLicenseRequestEventClass, ::avmshell::DRMLicenseRequestEventClass, SlotOffsetsAndAsserts::s_slotsOffsetDRMLicenseRequestEventClass, ::avmshell::DRMLicenseRequestEventObject, SlotOffsetsAndAsserts::s_slotsOffsetDRMLicenseRequestEventObject )
		// DRMMetadataEvent
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_DRMMetadataEvent, DRMMetadataEventClass, ::avmshell::DRMMetadataEventClass, SlotOffsetsAndAsserts::s_slotsOffsetDRMMetadataEventClass, ::avmshell::DRMMetadataEventObject, SlotOffsetsAndAsserts::s_slotsOffsetDRMMetadataEventObject )
		// DRMReturnVoucherCompleteEvent
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_DRMReturnVoucherCompleteEvent, DRMReturnVoucherCompleteEventClass, ::avmshell::DRMReturnVoucherCompleteEventClass, SlotOffsetsAndAsserts::s_slotsOffsetDRMReturnVoucherCompleteEventClass, ::avmshell::DRMReturnVoucherCompleteEventObject, SlotOffsetsAndAsserts::s_slotsOffsetDRMReturnVoucherCompleteEventObject )
		// DRMReturnVoucherErrorEvent
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_DRMReturnVoucherErrorEvent, DRMReturnVoucherErrorEventClass, ::avmshell::DRMReturnVoucherErrorEventClass, SlotOffsetsAndAsserts::s_slotsOffsetDRMReturnVoucherErrorEventClass, ::avmshell::DRMReturnVoucherErrorEventObject, SlotOffsetsAndAsserts::s_slotsOffsetDRMReturnVoucherErrorEventObject )
		// GameInputEvent
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_GameInputEvent, GameInputEventClass, ::avmshell::GameInputEventClass, SlotOffsetsAndAsserts::s_slotsOffsetGameInputEventClass, ::avmshell::GameInputEventObject, SlotOffsetsAndAsserts::s_slotsOffsetGameInputEventObject )
		// RemoteNotificationEvent	
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_RemoteNotificationEvent, RemoteNotificationEventClass, ::avmshell::RemoteNotificationEventClass, SlotOffsetsAndAsserts::s_slotsOffsetRemoteNotificationEventClass, ::avmshell::RemoteNotificationEventObject, SlotOffsetsAndAsserts::s_slotsOffsetRemoteNotificationEventObject )
		// ThrottleEvent
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_events_ThrottleEvent, ThrottleEventClass, ::avmshell::ThrottleEventClass, SlotOffsetsAndAsserts::s_slotsOffsetThrottleEventClass, ::avmshell::ThrottleEventObject, SlotOffsetsAndAsserts::s_slotsOffsetThrottleEventObject )
		// AVTagData
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_media_AVTagData, AVTagDataClass, ::avmshell::AVTagDataClass, SlotOffsetsAndAsserts::s_slotsOffsetAVTagDataClass, ::avmshell::AVTagDataObject, SlotOffsetsAndAsserts::s_slotsOffsetAVTagDataObject )
		// CameraRollBrowseOptions
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_media_CameraRollBrowseOptions, CameraRollBrowseOptionsClass, ::avmshell::CameraRollBrowseOptionsClass, SlotOffsetsAndAsserts::s_slotsOffsetCameraRollBrowseOptionsClass, ::avmshell::CameraRollBrowseOptionsObject, SlotOffsetsAndAsserts::s_slotsOffsetCameraRollBrowseOptionsObject )
		// H264VideoStreamSettings
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_media_H264VideoStreamSettings, H264VideoStreamSettingsClass, ::avmshell::H264VideoStreamSettingsClass, SlotOffsetsAndAsserts::s_slotsOffsetH264VideoStreamSettingsClass, ::avmshell::H264VideoStreamSettingsObject, SlotOffsetsAndAsserts::s_slotsOffsetH264VideoStreamSettingsObject )
		// VideoStreamSettings
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_media_VideoStreamSettings, VideoStreamSettingsClass, ::avmshell::VideoStreamSettingsClass, SlotOffsetsAndAsserts::s_slotsOffsetVideoStreamSettingsClass, ::avmshell::VideoStreamSettingsObject, SlotOffsetsAndAsserts::s_slotsOffsetVideoStreamSettingsObject )
		// DRMDeviceGroup
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_net_drm_DRMDeviceGroup, DRMDeviceGroupClass, ::avmshell::DRMDeviceGroupClass, SlotOffsetsAndAsserts::s_slotsOffsetDRMDeviceGroupClass, ::avmshell::DRMDeviceGroupObject, SlotOffsetsAndAsserts::s_slotsOffsetDRMDeviceGroupObject )
		// MessageChannel
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_system_MessageChannel, MessageChannelClass, ::avmshell::MessageChannelClass, SlotOffsetsAndAsserts::s_slotsOffsetMessageChannelClass, ::avmshell::MessageChannelObject, SlotOffsetsAndAsserts::s_slotsOffsetMessageChannelObject )
		// Worker
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_system_Worker, WorkerClass, ::avmshell::WorkerClass, SlotOffsetsAndAsserts::s_slotsOffsetWorkerClass, ::avmshell::WorkerObject, SlotOffsetsAndAsserts::s_slotsOffsetWorkerObject )
		// WorkerDomain
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_system_WorkerDomain, WorkerDomainClass, ::avmshell::WorkerDomainClass, SlotOffsetsAndAsserts::s_slotsOffsetWorkerDomainClass, ::avmshell::WorkerDomainObject, SlotOffsetsAndAsserts::s_slotsOffsetWorkerDomainObject )
		// StageText		
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_StageText, StageTextClass, ::avmshell::StageTextClass, SlotOffsetsAndAsserts::s_slotsOffsetStageTextClass, ::avmshell::StageTextObject, SlotOffsetsAndAsserts::s_slotsOffsetStageTextObject )
		// StageTextInitOptions
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_text_StageTextInitOptions, StageTextInitOptionsClass, ::avmshell::StageTextInitOptionsClass, SlotOffsetsAndAsserts::s_slotsOffsetStageTextInitOptionsClass, ::avmshell::StageTextInitOptionsObject, SlotOffsetsAndAsserts::s_slotsOffsetStageTextInitOptionsObject )
		// GameInput
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_ui_GameInput, GameInputClass, ::avmshell::GameInputClass, SlotOffsetsAndAsserts::s_slotsOffsetGameInputClass, ::avmshell::GameInputObject, SlotOffsetsAndAsserts::s_slotsOffsetGameInputObject )
		// GameInputControl
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_ui_GameInputControl, GameInputControlClass, ::avmshell::GameInputControlClass, SlotOffsetsAndAsserts::s_slotsOffsetGameInputControlClass, ::avmshell::GameInputControlObject, SlotOffsetsAndAsserts::s_slotsOffsetGameInputControlObject )
		// GameInputDevice
		AVMTHUNK_NATIVE_CLASS(abcclass_flash_ui_GameInputDevice, GameInputDeviceClass, ::avmshell::GameInputDeviceClass, SlotOffsetsAndAsserts::s_slotsOffsetGameInputDeviceClass, ::avmshell::GameInputDeviceObject, SlotOffsetsAndAsserts::s_slotsOffsetGameInputDeviceObject )

		//new adds 11 end
		AVMTHUNK_NATIVE_CLASS(abcclass_JSONParseError, JSONParseErrorClass, ::avmshell::JSONParseErrorClass,SlotOffsetsAndAsserts::s_slotsOffsetJSONParseErrorClass, ::avmshell::JSONParseErrorObject, SlotOffsetsAndAsserts::s_slotsOffsetJSONParseErrorObject )
		AVMTHUNK_NATIVE_CLASS(abcclass_JSON, JSONClass, ::avmshell::JSONClass,SlotOffsetsAndAsserts::s_slotsOffsetJSONClass, ::avmshell::JSONObject, SlotOffsetsAndAsserts::s_slotsOffsetJSONObject )

		////Special API
		//AVMTHUNK_NATIVE_CLASS(abcclass_BWLoader_BXDeviceBitmapData, BXDeviceBitmapDataClass, ::avmshell::BXDeviceBitmapDataClass, SlotOffsetsAndAsserts::s_slotsOffsetBXDeviceBitmapDataClass, ::avmshell::BXDeviceBitmapDataObject, SlotOffsetsAndAsserts::s_slotsOffsetBXDeviceBitmapDataObject)
		//AVMTHUNK_NATIVE_CLASS(abcclass_BWLoader_BXBGLayer, BXBGLayerClass, ::avmshell::BXBGLayerClass, SlotOffsetsAndAsserts::s_slotsOffsetBXBGLayerClass, ::avmshell::BXBGLayerObject, SlotOffsetsAndAsserts::s_slotsOffsetBXBGLayerObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_BWLoader_BXWaveStream, BXWaveStreamClass, ::avmshell::BXWaveStreamClass, SlotOffsetsAndAsserts::s_slotsOffsetBXWaveStreamClass, ::avmshell::BXWaveStreamObject, SlotOffsetsAndAsserts::s_slotsOffsetBXWaveStreamObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_BWLoader_BXAcc, BXAccClass, ::avmshell::BXAccClass, SlotOffsetsAndAsserts::s_slotsOffsetBXAccClass, ::avmshell::BXAccObject, SlotOffsetsAndAsserts::s_slotsOffsetBXAccObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_BWLoader_BXWaveEvent, BXWaveEventClass, ::avmshell::BXWaveEventClass, SlotOffsetsAndAsserts::s_slotsOffsetBXWaveEventClass, ::avmshell::BXWaveEventObject, SlotOffsetsAndAsserts::s_slotsOffsetBXWaveEventObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_BWLoader_BwExternAPI,		BwExternAPIClass,		 ::avmshell::BwExternAPIClass,		  SlotOffsetsAndAsserts::s_slotsOffsetBwExternAPIClass,		    ::avmshell::BwExternAPIObject,		 SlotOffsetsAndAsserts::s_slotsOffsetBwExternAPIObject )
		AVMTHUNK_NATIVE_CLASS(abcclass_BWLoader_WeiXinShareSession,		WeiXinShareSessionClass,		 ::avmshell::WeiXinShareSessionClass,		  SlotOffsetsAndAsserts::s_slotsOffsetWeiXinShareSessionClass,		    ::avmshell::WeiXinShareSessionObject,		 SlotOffsetsAndAsserts::s_slotsOffsetWeiXinShareSessionObject )
		AVMTHUNK_NATIVE_CLASS(abcclass_BWLoader_DuoMengSDKInterface,		DuoMengSDKInterfaceClass,		 ::avmshell::DuoMengSDKInterfaceClass,		  SlotOffsetsAndAsserts::s_slotsOffsetDuoMengSDKInterfaceClass,		    ::avmshell::DuoMengSDKInterfaceObject,		 SlotOffsetsAndAsserts::s_slotsOffsetDuoMengSDKInterfaceObject )
		AVMTHUNK_NATIVE_CLASS(abcclass_BWLoader_BwPayAPI, BwPayAPIClass, ::avmshell::BwPayAPIClass,		  SlotOffsetsAndAsserts::s_slotsOffsetBwPayAPIClass,		    ::avmshell::BwPayAPIObject,		 SlotOffsetsAndAsserts::s_slotsOffsetBwPayAPIObject )
		AVMTHUNK_NATIVE_CLASS(abcclass_BWLoader_BXFile, BXFileClass, ::avmshell::BXFileClass,		  SlotOffsetsAndAsserts::s_slotsOffsetBXFileClass,		    ::avmshell::BXFileObject,		 SlotOffsetsAndAsserts::s_slotsOffsetBXFileObject )
		

	AVMTHUNK_END_NATIVE_CLASSES()

AVMTHUNK_END_NATIVE_TABLES()


AVMTHUNK_DEFINE_NATIVE_INITIALIZER(TotalInclude);
}

}


//#include "Inflater.cpp"
//#include "com/jiuyu/frameworks/utils/HashAlgorithms.cpp"

namespace avmplus 
{ 
	namespace NativeID 
{

#include "AS3/XExternAPI.h"
#include "AS3/XExternAPI.cpp"

using namespace avmshell;
class ShellCore;

AVMTHUNK_NATIVE_CLASS_GLUE(InflaterClass,::avmshell::InflaterClass, SlotOffsetsAndAsserts::doInflaterClassAsserts)
AVMTHUNK_NATIVE_CLASS_GLUE(HashAlgorithmsClass,::avmshell::HashAlgorithmsClass, SlotOffsetsAndAsserts::doHashAlgorithmsClassAsserts)
//AVMTHUNK_NATIVE_CLASS_GLUE(HashAlgorithmsClass,::avmshell::HashAlgorithmsClass, SlotOffsetsAndAsserts::doHashAlgorithmsClassAsserts)

AVMTHUNK_BEGIN_NATIVE_TABLES(XExternAPI)
	//Map Method Table
	AVMTHUNK_BEGIN_NATIVE_METHODS(XExternAPI)
		
		/////////////////////////////////////////////////////////////////////////////
		//extends for OPT
		AVMTHUNK_NATIVE_METHOD_VOID_P(org_util_zip_Inflater_setInput, ::avmshell::InflaterObject::AS3_setInput)
		AVMTHUNK_NATIVE_METHOD_U_P(org_util_zip_Inflater_inflate, ::avmshell::InflaterObject::AS3_inflate)
		AVMTHUNK_NATIVE_METHOD_VOID_P(game_utils_zip_Inflater_setInput, ::avmshell::InflaterObject::AS3_setInput)
		AVMTHUNK_NATIVE_METHOD_U_P(game_utils_zip_Inflater_inflate, ::avmshell::InflaterObject::AS3_inflate)
		AVMTHUNK_NATIVE_METHOD_VOID_P(reign_utils_zip_Inflater_setInput, ::avmshell::InflaterObject::AS3_setInput)
		AVMTHUNK_NATIVE_METHOD_U_P(reign_utils_zip_Inflater_inflate, ::avmshell::InflaterObject::AS3_inflate)
		//com.DoGame.DoZip.zip
		AVMTHUNK_NATIVE_METHOD_VOID_P(com_DoGame_DoZip_zip_ZipInflater_com_DoGame_DoZip_zip_setInput, ::avmshell::InflaterObject::AS3_setInput)
		AVMTHUNK_NATIVE_METHOD_U_P(com_DoGame_DoZip_zip_ZipInflater_com_DoGame_DoZip_zip_inflate, ::avmshell::InflaterObject::AS3_inflate)

		//AVMTHUNK_NATIVE_METHOD_I_P(com_jiuyu_frameworks_utils_HashAlgorithms_fnvHash, ::avmshell::HashAlgorithmsClass::AS3_fnvHash)
		//WDJZ
		//AVMTHUNK_NATIVE_METHOD_I_P(com_my9yu_framework_utils_HashAlgorithms_fnvHash, ::avmshell::HashAlgorithmsClass::AS3_fnvHash)


		AVMTHUNK_NATIVE_METHOD_VOID_P(nochump_util_zip_Inflater_setInput, ::avmshell::InflaterObject::AS3_setInput)
		AVMTHUNK_NATIVE_METHOD_U_P(nochump_util_zip_Inflater_inflate, ::avmshell::InflaterObject::AS3_inflate)

		AVMTHUNK_NATIVE_METHOD_I_P(com_jiuyu_frameworks_utils_HashAlgorithms_fnvHash, ::avmshell::HashAlgorithmsClass::AS3_fnvHash)
		AVMTHUNK_NATIVE_METHOD_I_P(com_my9yu_framework_utils_HashAlgorithms_fnvHash, ::avmshell::HashAlgorithmsClass::AS3_fnvHash)
		AVMTHUNK_NATIVE_METHOD_P_PP(com_my9yu_framework_utils_SwfEnDeUtil_unCompress, ::avmshell::SwfEnDeUtilClass::AS3_unCompress)
		AVMTHUNK_NATIVE_METHOD_P_PPP(com_my9yu_framework_utils_SwfEnDeUtil_getDecryptDataByByteArray, ::avmshell::SwfEnDeUtilClass::AS3_getDecryptDataByByteArray)

		//Opti for jiuyu
		//AVMTHUNK_NATIVE_METHOD_P_P(com_my9yu_framework_utils_ClassUtil_clone, ::avmshell::ClassUtilClass::AS3_clone)
		//AVMTHUNK_NATIVE_METHOD_P_P(com_my9yu_framework_utils_ClassUtil_createNewObject, ::avmshell::ClassUtilClass::AS3_createNewObject)
		AVMTHUNK_NATIVE_METHOD_P_PP(com_my9yu_framework_utils_ClassUtil_samePropertiesCopyValue, ::avmshell::ClassUtilClass::AS3_samePropertiesCopyValue)
		AVMTHUNK_NATIVE_METHOD_VOID_PP(com_my9yu_framework_utils_ClassUtil_objectSamePropertyCopyValueByXML, ::avmshell::ClassUtilClass::AS3_objectSamePropertyCopyValueByXML)
		AVMTHUNK_NATIVE_METHOD_P_P(com_my9yu_common_utils_MD5_hashBinary, ::avmshell::MD5Class::AS3_hashBinary)
		//AVMTHUNK_NATIVE_METHOD_VOID_PP(com_my9yu_common_utils_SamePropertyObjectUtil_copySamePropertyValue, ::avmshell::SamePropertyObjectUtilClass::AS3_copySamePropertyValue)
		
	AVMTHUNK_END_NATIVE_METHODS()

	//Map Class(Instance) Table

	AVMTHUNK_BEGIN_NATIVE_CLASSES(XExternAPI)

		AVMTHUNK_NATIVE_CLASS(abcclass_org_util_zip_Inflater, InflaterClass, ::avmshell::InflaterClass, SlotOffsetsAndAsserts::s_slotsOffsetInflaterClass, ::avmshell::InflaterObject, SlotOffsetsAndAsserts::s_slotsOffsetInflaterObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_game_utils_zip_Inflater, InflaterClass, ::avmshell::InflaterClass, SlotOffsetsAndAsserts::s_slotsOffsetInflaterClass, ::avmshell::InflaterObject, SlotOffsetsAndAsserts::s_slotsOffsetInflaterObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_reign_utils_zip_Inflater, InflaterClass, ::avmshell::InflaterClass, SlotOffsetsAndAsserts::s_slotsOffsetInflaterClass, ::avmshell::InflaterObject, SlotOffsetsAndAsserts::s_slotsOffsetInflaterObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_com_DoGame_DoZip_zip_ZipInflater, InflaterClass, ::avmshell::InflaterClass, SlotOffsetsAndAsserts::s_slotsOffsetInflaterClass, ::avmshell::InflaterObject, SlotOffsetsAndAsserts::s_slotsOffsetInflaterObject)

		//AVMTHUNK_NATIVE_CLASS(abcclass_com_jiuyu_frameworks_utils_HashAlgorithms, HashAlgorithmsClass, ::avmshell::HashAlgorithmsClass, SlotOffsetsAndAsserts::s_slotsOffsetHashAlgorithmsClass, ::avmshell::HashAlgorithmsObject, SlotOffsetsAndAsserts::s_slotsOffsetHashAlgorithmsObject)
		//WDJZ
		//AVMTHUNK_NATIVE_CLASS(abcclass_com_my9yu_framework_utils_HashAlgorithms, HashAlgorithmsClass, ::avmshell::HashAlgorithmsClass, SlotOffsetsAndAsserts::s_slotsOffsetHashAlgorithmsClass, ::avmshell::HashAlgorithmsObject, SlotOffsetsAndAsserts::s_slotsOffsetHashAlgorithmsObject)


		AVMTHUNK_NATIVE_CLASS(abcclass_nochump_util_zip_Inflater, InflaterClass, ::avmshell::InflaterClass, SlotOffsetsAndAsserts::s_slotsOffsetInflaterClass, ::avmshell::InflaterObject, SlotOffsetsAndAsserts::s_slotsOffsetInflaterObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_com_my9yu_framework_utils_HashAlgorithms, HashAlgorithmsClass, ::avmshell::HashAlgorithmsClass, SlotOffsetsAndAsserts::s_slotsOffsetHashAlgorithmsClass, ::avmshell::HashAlgorithmsObject, SlotOffsetsAndAsserts::s_slotsOffsetHashAlgorithmsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_com_jiuyu_frameworks_utils_HashAlgorithms, HashAlgorithmsClass, ::avmshell::HashAlgorithmsClass, SlotOffsetsAndAsserts::s_slotsOffsetHashAlgorithmsClass, ::avmshell::HashAlgorithmsObject, SlotOffsetsAndAsserts::s_slotsOffsetHashAlgorithmsObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_com_my9yu_framework_utils_SwfEnDeUtil, SwfEnDeUtilClass, ::avmshell::SwfEnDeUtilClass, SlotOffsetsAndAsserts::s_slotsOffsetSwfEnDeUtilClass, ::avmshell::SwfEnDeUtilObject, SlotOffsetsAndAsserts::s_slotsOffsetSwfEnDeUtilObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_com_my9yu_framework_utils_ClassUtil, ClassUtilClass, ::avmshell::ClassUtilClass, SlotOffsetsAndAsserts::s_slotsOffsetClassUtilClass, ::avmshell::ClassUtilObject, SlotOffsetsAndAsserts::s_slotsOffsetClassUtilObject)
		AVMTHUNK_NATIVE_CLASS(abcclass_com_my9yu_common_utils_MD5, MD5Class, ::avmshell::MD5Class, SlotOffsetsAndAsserts::s_slotsOffsetMD5Class, ::avmshell::MD5Object, SlotOffsetsAndAsserts::s_slotsOffsetMD5Object)
		//AVMTHUNK_NATIVE_CLASS(abcclass_com_my9yu_common_utils_SamePropertyObjectUtil, SamePropertyObjectUtilClass, ::avmshell::SamePropertyObjectUtilClass, SlotOffsetsAndAsserts::s_slotsOffsetSamePropertyObjectUtilClass, ::avmshell::SamePropertyObjectUtilObject, SlotOffsetsAndAsserts::s_slotsOffsetSamePropertyObjectUtilObject)
		
	AVMTHUNK_END_NATIVE_CLASSES()

AVMTHUNK_END_NATIVE_TABLES()
AVMTHUNK_DEFINE_NATIVE_INITIALIZER(XExternAPI);

}
}

